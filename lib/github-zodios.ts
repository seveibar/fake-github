import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core"
import { z } from "zod"

const root = z
  .object({
    current_user_url: z.string(),
    current_user_authorizations_html_url: z.string(),
    authorizations_url: z.string(),
    code_search_url: z.string(),
    commit_search_url: z.string(),
    emails_url: z.string(),
    emojis_url: z.string(),
    events_url: z.string(),
    feeds_url: z.string(),
    followers_url: z.string(),
    following_url: z.string(),
    gists_url: z.string(),
    hub_url: z.string().optional(),
    issue_search_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    label_search_url: z.string(),
    notifications_url: z.string(),
    organization_url: z.string(),
    organization_repositories_url: z.string(),
    organization_teams_url: z.string(),
    public_gists_url: z.string(),
    rate_limit_url: z.string(),
    repository_url: z.string(),
    repository_search_url: z.string(),
    current_user_repositories_url: z.string(),
    starred_url: z.string(),
    starred_gists_url: z.string(),
    topic_search_url: z.string().optional(),
    user_url: z.string(),
    user_organizations_url: z.string(),
    user_repositories_url: z.string(),
    user_search_url: z.string(),
  })
  .passthrough()
const cwes = z.union([z.string(), z.array(z.string())]).optional()
const security_advisory_ecosystems = z.enum([
  "rubygems",
  "npm",
  "pip",
  "maven",
  "nuget",
  "composer",
  "go",
  "rust",
  "erlang",
  "actions",
  "pub",
  "other",
  "swift",
])
export const simple_user = z
  .object({
    name: z.string().nullish(),
    email: z.string().nullish(),
    login: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    avatar_url: z.string().url(),
    gravatar_id: z.string().nullable(),
    url: z.string().url(),
    html_url: z.string().url(),
    followers_url: z.string().url(),
    following_url: z.string(),
    gists_url: z.string(),
    starred_url: z.string(),
    subscriptions_url: z.string().url(),
    organizations_url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string(),
    received_events_url: z.string().url(),
    type: z.string(),
    site_admin: z.boolean(),
    starred_at: z.string().optional(),
  })
  .passthrough()
const security_advisory_credit_types = z.enum([
  "analyst",
  "finder",
  "reporter",
  "coordinator",
  "remediation_developer",
  "remediation_reviewer",
  "remediation_verifier",
  "tool",
  "sponsor",
  "other",
])
const global_advisory = z.object({
  ghsa_id: z.string(),
  cve_id: z.string().nullable(),
  url: z.string(),
  html_url: z.string().url(),
  repository_advisory_url: z.string().url().nullable(),
  summary: z.string().max(1024),
  description: z.string().max(65535).nullable(),
  type: z.enum(["reviewed", "unreviewed", "malware"]),
  severity: z.enum(["critical", "high", "medium", "low", "unknown"]),
  source_code_location: z.string().url().nullable(),
  identifiers: z
    .array(
      z
        .object({ type: z.enum(["CVE", "GHSA"]), value: z.string() })
        .passthrough(),
    )
    .nullable(),
  references: z.array(z.string()).nullable(),
  published_at: z.string().datetime({ offset: true }),
  updated_at: z.string().datetime({ offset: true }),
  github_reviewed_at: z.string().datetime({ offset: true }).nullable(),
  nvd_published_at: z.string().datetime({ offset: true }).nullable(),
  withdrawn_at: z.string().datetime({ offset: true }).nullable(),
  vulnerabilities: z
    .array(
      z
        .object({
          package: z
            .object({
              ecosystem: security_advisory_ecosystems,
              name: z.string().nullable(),
            })
            .passthrough()
            .nullable(),
          vulnerable_version_range: z.string().nullable(),
          first_patched_version: z.string().nullable(),
          vulnerable_functions: z.array(z.string()).nullable(),
        })
        .passthrough(),
    )
    .nullable(),
  cvss: z
    .object({
      vector_string: z.string().nullable(),
      score: z.number().gte(0).lte(10).nullable(),
    })
    .passthrough()
    .nullable(),
  cwes: z
    .array(z.object({ cwe_id: z.string(), name: z.string() }).passthrough())
    .nullable(),
  credits: z
    .array(
      z
        .object({ user: simple_user, type: security_advisory_credit_types })
        .passthrough(),
    )
    .nullable(),
})
const validation_error_simple = z
  .object({
    message: z.string(),
    documentation_url: z.string(),
    errors: z.array(z.string()).optional(),
  })
  .passthrough()
const basic_error = z
  .object({
    message: z.string(),
    documentation_url: z.string(),
    url: z.string(),
    status: z.string(),
  })
  .partial()
  .passthrough()
const nullable_simple_user = z
  .object({
    name: z.string().nullish(),
    email: z.string().nullish(),
    login: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    avatar_url: z.string().url(),
    gravatar_id: z.string().nullable(),
    url: z.string().url(),
    html_url: z.string().url(),
    followers_url: z.string().url(),
    following_url: z.string(),
    gists_url: z.string(),
    starred_url: z.string(),
    subscriptions_url: z.string().url(),
    organizations_url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string(),
    received_events_url: z.string().url(),
    type: z.string(),
    site_admin: z.boolean(),
    starred_at: z.string().optional(),
  })
  .passthrough()
const integration = z
  .object({
    id: z.number().int(),
    slug: z.string().optional(),
    node_id: z.string(),
    owner: nullable_simple_user.nullable(),
    name: z.string(),
    description: z.string().nullable(),
    external_url: z.string().url(),
    html_url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    permissions: z.record(z.string()),
    events: z.array(z.string()),
    installations_count: z.number().int().optional(),
    client_id: z.string().optional(),
    client_secret: z.string().optional(),
    webhook_secret: z.string().nullish(),
    pem: z.string().optional(),
  })
  .passthrough()
const webhook_config_url = z.string()
const webhook_config_content_type = z.string()
const webhook_config_secret = z.string()
const webhook_config_insecure_ssl = z.union([z.string(), z.number()])
const webhook_config = z
  .object({
    url: webhook_config_url.url(),
    content_type: webhook_config_content_type,
    secret: webhook_config_secret,
    insecure_ssl: webhook_config_insecure_ssl,
  })
  .partial()
  .passthrough()
const apps_update_webhook_config_for_app_Body = z
  .object({
    url: webhook_config_url.url(),
    content_type: webhook_config_content_type,
    secret: webhook_config_secret,
    insecure_ssl: webhook_config_insecure_ssl,
  })
  .partial()
  .passthrough()
const hook_delivery_item = z
  .object({
    id: z.number().int(),
    guid: z.string(),
    delivered_at: z.string().datetime({ offset: true }),
    redelivery: z.boolean(),
    duration: z.number(),
    status: z.string(),
    status_code: z.number().int(),
    event: z.string(),
    action: z.string().nullable(),
    installation_id: z.number().int().nullable(),
    repository_id: z.number().int().nullable(),
  })
  .passthrough()
const validation_error = z
  .object({
    message: z.string(),
    documentation_url: z.string(),
    errors: z
      .array(
        z
          .object({
            resource: z.string().optional(),
            field: z.string().optional(),
            message: z.string().optional(),
            code: z.string(),
            index: z.number().int().optional(),
            value: z
              .union([z.string(), z.number(), z.array(z.string())])
              .optional(),
          })
          .passthrough(),
      )
      .optional(),
  })
  .passthrough()
const hook_delivery = z
  .object({
    id: z.number().int(),
    guid: z.string(),
    delivered_at: z.string().datetime({ offset: true }),
    redelivery: z.boolean(),
    duration: z.number(),
    status: z.string(),
    status_code: z.number().int(),
    event: z.string(),
    action: z.string().nullable(),
    installation_id: z.number().int().nullable(),
    repository_id: z.number().int().nullable(),
    url: z.string().optional(),
    request: z
      .object({
        headers: z.object({}).partial().passthrough().nullable(),
        payload: z.object({}).partial().passthrough().nullable(),
      })
      .passthrough(),
    response: z
      .object({
        headers: z.object({}).partial().passthrough().nullable(),
        payload: z.string().nullable(),
      })
      .passthrough(),
  })
  .passthrough()
const enterprise = z
  .object({
    description: z.string().nullish(),
    html_url: z.string().url(),
    website_url: z.string().url().nullish(),
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    slug: z.string(),
    created_at: z.string().datetime({ offset: true }).nullable(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    avatar_url: z.string().url(),
  })
  .passthrough()
const integration_installation_request = z
  .object({
    id: z.number().int(),
    node_id: z.string().optional(),
    account: z.union([simple_user, enterprise]),
    requester: simple_user,
    created_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const app_permissions = z
  .object({
    actions: z.enum(["read", "write"]),
    administration: z.enum(["read", "write"]),
    checks: z.enum(["read", "write"]),
    codespaces: z.enum(["read", "write"]),
    contents: z.enum(["read", "write"]),
    dependabot_secrets: z.enum(["read", "write"]),
    deployments: z.enum(["read", "write"]),
    environments: z.enum(["read", "write"]),
    issues: z.enum(["read", "write"]),
    metadata: z.enum(["read", "write"]),
    packages: z.enum(["read", "write"]),
    pages: z.enum(["read", "write"]),
    pull_requests: z.enum(["read", "write"]),
    repository_custom_properties: z.enum(["read", "write"]),
    repository_hooks: z.enum(["read", "write"]),
    repository_projects: z.enum(["read", "write", "admin"]),
    secret_scanning_alerts: z.enum(["read", "write"]),
    secrets: z.enum(["read", "write"]),
    security_events: z.enum(["read", "write"]),
    single_file: z.enum(["read", "write"]),
    statuses: z.enum(["read", "write"]),
    vulnerability_alerts: z.enum(["read", "write"]),
    workflows: z.literal("write"),
    members: z.enum(["read", "write"]),
    organization_administration: z.enum(["read", "write"]),
    organization_custom_roles: z.enum(["read", "write"]),
    organization_custom_org_roles: z.enum(["read", "write"]),
    organization_custom_properties: z.enum(["read", "write", "admin"]),
    organization_copilot_seat_management: z.literal("write"),
    organization_announcement_banners: z.enum(["read", "write"]),
    organization_events: z.literal("read"),
    organization_hooks: z.enum(["read", "write"]),
    organization_personal_access_tokens: z.enum(["read", "write"]),
    organization_personal_access_token_requests: z.enum(["read", "write"]),
    organization_plan: z.literal("read"),
    organization_projects: z.enum(["read", "write", "admin"]),
    organization_packages: z.enum(["read", "write"]),
    organization_secrets: z.enum(["read", "write"]),
    organization_self_hosted_runners: z.enum(["read", "write"]),
    organization_user_blocking: z.enum(["read", "write"]),
    team_discussions: z.enum(["read", "write"]),
    email_addresses: z.enum(["read", "write"]),
    followers: z.enum(["read", "write"]),
    git_ssh_keys: z.enum(["read", "write"]),
    gpg_keys: z.enum(["read", "write"]),
    interaction_limits: z.enum(["read", "write"]),
    profile: z.literal("write"),
    starring: z.enum(["read", "write"]),
  })
  .partial()
  .passthrough()
const installation = z
  .object({
    id: z.number().int(),
    account: z.union([simple_user, enterprise]).nullable(),
    repository_selection: z.enum(["all", "selected"]),
    access_tokens_url: z.string().url(),
    repositories_url: z.string().url(),
    html_url: z.string().url(),
    app_id: z.number().int(),
    target_id: z.number().int(),
    target_type: z.string(),
    permissions: app_permissions,
    events: z.array(z.string()),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    single_file_name: z.string().nullable(),
    has_multiple_single_files: z.boolean().optional(),
    single_file_paths: z.array(z.string()).optional(),
    app_slug: z.string(),
    suspended_by: nullable_simple_user.nullable(),
    suspended_at: z.string().datetime({ offset: true }).nullable(),
    contact_email: z.string().nullish(),
  })
  .passthrough()
const apps_create_installation_access_token_Body = z
  .object({
    repositories: z.array(z.string()),
    repository_ids: z.array(z.number()),
    permissions: app_permissions,
  })
  .partial()
  .passthrough()
const nullable_license_simple = z
  .object({
    key: z.string(),
    name: z.string(),
    url: z.string().url().nullable(),
    spdx_id: z.string().nullable(),
    node_id: z.string(),
    html_url: z.string().url().optional(),
  })
  .passthrough()
const repository = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    license: nullable_license_simple.nullable(),
    forks: z.number().int(),
    permissions: z
      .object({
        admin: z.boolean(),
        pull: z.boolean(),
        triage: z.boolean().optional(),
        push: z.boolean(),
        maintain: z.boolean().optional(),
      })
      .passthrough()
      .optional(),
    owner: simple_user,
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    archive_url: z.string(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string().url(),
    deployments_url: z.string().url(),
    downloads_url: z.string().url(),
    events_url: z.string().url(),
    forks_url: z.string().url(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    languages_url: z.string().url(),
    merges_url: z.string().url(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    pulls_url: z.string(),
    releases_url: z.string(),
    ssh_url: z.string(),
    stargazers_url: z.string().url(),
    statuses_url: z.string(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    tags_url: z.string().url(),
    teams_url: z.string().url(),
    trees_url: z.string(),
    clone_url: z.string(),
    mirror_url: z.string().url().nullable(),
    hooks_url: z.string().url(),
    svn_url: z.string().url(),
    homepage: z.string().url().nullable(),
    language: z.string().nullable(),
    forks_count: z.number().int(),
    stargazers_count: z.number().int(),
    watchers_count: z.number().int(),
    size: z.number().int(),
    default_branch: z.string(),
    open_issues_count: z.number().int(),
    is_template: z.boolean().optional(),
    topics: z.array(z.string()).optional(),
    has_issues: z.boolean().default(true),
    has_projects: z.boolean().default(true),
    has_wiki: z.boolean().default(true),
    has_pages: z.boolean(),
    has_downloads: z.boolean().default(true),
    has_discussions: z.boolean().optional(),
    archived: z.boolean(),
    disabled: z.boolean(),
    visibility: z.string().optional().default("public"),
    pushed_at: z.string().datetime({ offset: true }).nullable(),
    created_at: z.string().datetime({ offset: true }).nullable(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    allow_rebase_merge: z.boolean().optional().default(true),
    temp_clone_token: z.string().optional(),
    allow_squash_merge: z.boolean().optional().default(true),
    allow_auto_merge: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    allow_update_branch: z.boolean().optional(),
    use_squash_pr_title_as_default: z.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    allow_merge_commit: z.boolean().optional().default(true),
    allow_forking: z.boolean().optional(),
    web_commit_signoff_required: z.boolean().optional(),
    open_issues: z.number().int(),
    watchers: z.number().int(),
    master_branch: z.string().optional(),
    starred_at: z.string().optional(),
    anonymous_access_enabled: z.boolean().optional(),
  })
  .passthrough()
const installation_token = z
  .object({
    token: z.string(),
    expires_at: z.string(),
    permissions: app_permissions.optional(),
    repository_selection: z.enum(["all", "selected"]).optional(),
    repositories: z.array(repository).optional(),
    single_file: z.string().optional(),
    has_multiple_single_files: z.boolean().optional(),
    single_file_paths: z.array(z.string()).optional(),
  })
  .passthrough()
const nullable_scoped_installation = z
  .object({
    permissions: app_permissions,
    repository_selection: z.enum(["all", "selected"]),
    single_file_name: z.string().nullable(),
    has_multiple_single_files: z.boolean().optional(),
    single_file_paths: z.array(z.string()).optional(),
    repositories_url: z.string().url(),
    account: simple_user,
  })
  .passthrough()
const authorization = z
  .object({
    id: z.number().int(),
    url: z.string().url(),
    scopes: z.array(z.string()).nullable(),
    token: z.string(),
    token_last_eight: z.string().nullable(),
    hashed_token: z.string().nullable(),
    app: z
      .object({
        client_id: z.string(),
        name: z.string(),
        url: z.string().url(),
      })
      .passthrough(),
    note: z.string().nullable(),
    note_url: z.string().url().nullable(),
    updated_at: z.string().datetime({ offset: true }),
    created_at: z.string().datetime({ offset: true }),
    fingerprint: z.string().nullable(),
    user: nullable_simple_user.nullish(),
    installation: nullable_scoped_installation.nullish(),
    expires_at: z.string().datetime({ offset: true }).nullable(),
  })
  .passthrough()
const apps_scope_token_Body = z
  .object({
    access_token: z.string(),
    target: z.string().optional(),
    target_id: z.number().int().optional(),
    repositories: z.array(z.string()).optional(),
    repository_ids: z.array(z.number()).optional(),
    permissions: app_permissions.optional(),
  })
  .passthrough()
const simple_classroom_repository = z
  .object({
    id: z.number().int(),
    full_name: z.string(),
    html_url: z.string().url(),
    node_id: z.string(),
    private: z.boolean(),
    default_branch: z.string(),
  })
  .passthrough()
const simple_classroom_organization = z
  .object({
    id: z.number().int(),
    login: z.string(),
    node_id: z.string(),
    html_url: z.string().url(),
    name: z.string().nullable(),
    avatar_url: z.string(),
  })
  .passthrough()
const classroom = z
  .object({
    id: z.number().int(),
    name: z.string(),
    archived: z.boolean(),
    organization: simple_classroom_organization,
    url: z.string(),
  })
  .passthrough()
const classroom_assignment = z
  .object({
    id: z.number().int(),
    public_repo: z.boolean(),
    title: z.string(),
    type: z.enum(["individual", "group"]),
    invite_link: z.string(),
    invitations_enabled: z.boolean(),
    slug: z.string(),
    students_are_repo_admins: z.boolean(),
    feedback_pull_requests_enabled: z.boolean(),
    max_teams: z.number().int().nullable(),
    max_members: z.number().int().nullable(),
    editor: z.string(),
    accepted: z.number().int(),
    submitted: z.number().int(),
    passing: z.number().int(),
    language: z.string(),
    deadline: z.string().datetime({ offset: true }).nullable(),
    starter_code_repository: simple_classroom_repository,
    classroom: classroom,
  })
  .passthrough()
const simple_classroom_user = z
  .object({
    id: z.number().int(),
    login: z.string(),
    avatar_url: z.string().url(),
    html_url: z.string().url(),
  })
  .passthrough()
const simple_classroom = z
  .object({
    id: z.number().int(),
    name: z.string(),
    archived: z.boolean(),
    url: z.string(),
  })
  .passthrough()
const simple_classroom_assignment = z
  .object({
    id: z.number().int(),
    public_repo: z.boolean(),
    title: z.string(),
    type: z.enum(["individual", "group"]),
    invite_link: z.string(),
    invitations_enabled: z.boolean(),
    slug: z.string(),
    students_are_repo_admins: z.boolean(),
    feedback_pull_requests_enabled: z.boolean(),
    max_teams: z.number().int().nullish(),
    max_members: z.number().int().nullish(),
    editor: z.string(),
    accepted: z.number().int(),
    submitted: z.number().int(),
    passing: z.number().int(),
    language: z.string(),
    deadline: z.string().datetime({ offset: true }).nullable(),
    classroom: simple_classroom,
  })
  .passthrough()
const classroom_accepted_assignment = z
  .object({
    id: z.number().int(),
    submitted: z.boolean(),
    passing: z.boolean(),
    commit_count: z.number().int(),
    grade: z.string(),
    students: z.array(simple_classroom_user),
    repository: simple_classroom_repository,
    assignment: simple_classroom_assignment,
  })
  .passthrough()
const classroom_assignment_grade = z
  .object({
    assignment_name: z.string(),
    assignment_url: z.string(),
    starter_code_url: z.string(),
    github_username: z.string(),
    roster_identifier: z.string(),
    student_repository_name: z.string(),
    student_repository_url: z.string(),
    submission_timestamp: z.string(),
    points_awarded: z.number().int(),
    points_available: z.number().int(),
    group_name: z.string().optional(),
  })
  .passthrough()
const code_of_conduct = z
  .object({
    key: z.string(),
    name: z.string(),
    url: z.string().url(),
    body: z.string().optional(),
    html_url: z.string().url().nullable(),
  })
  .passthrough()
const alert_number = z.number()
const dependabot_alert_package = z.object({
  ecosystem: z.string(),
  name: z.string(),
})
const dependabot_alert_security_vulnerability = z.object({
  package: dependabot_alert_package,
  severity: z.enum(["low", "medium", "high", "critical"]),
  vulnerable_version_range: z.string(),
  first_patched_version: z.object({ identifier: z.string() }).nullable(),
})
const dependabot_alert_security_advisory = z.object({
  ghsa_id: z.string(),
  cve_id: z.string().nullable(),
  summary: z.string().max(1024),
  description: z.string(),
  vulnerabilities: z.array(dependabot_alert_security_vulnerability),
  severity: z.enum(["low", "medium", "high", "critical"]),
  cvss: z.object({
    score: z.number().gte(0).lte(10),
    vector_string: z.string().nullable(),
  }),
  cwes: z.array(z.object({ cwe_id: z.string(), name: z.string() })),
  identifiers: z.array(
    z.object({ type: z.enum(["CVE", "GHSA"]), value: z.string() }),
  ),
  references: z.array(z.object({ url: z.string().url() })),
  published_at: z.string().datetime({ offset: true }),
  updated_at: z.string().datetime({ offset: true }),
  withdrawn_at: z.string().datetime({ offset: true }).nullable(),
})
const alert_url = z.string()
const alert_html_url = z.string()
const alert_created_at = z.string()
const alert_updated_at = z.string()
const alert_dismissed_at = z.string()
const alert_fixed_at = z.string()
const alert_auto_dismissed_at = z.string()
const simple_repository = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    owner: simple_user,
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    archive_url: z.string(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string().url(),
    deployments_url: z.string().url(),
    downloads_url: z.string().url(),
    events_url: z.string().url(),
    forks_url: z.string().url(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    languages_url: z.string().url(),
    merges_url: z.string().url(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    pulls_url: z.string(),
    releases_url: z.string(),
    stargazers_url: z.string().url(),
    statuses_url: z.string(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    tags_url: z.string().url(),
    teams_url: z.string().url(),
    trees_url: z.string(),
    hooks_url: z.string().url(),
  })
  .passthrough()
const dependabot_alert_with_repository = z.object({
  number: alert_number.int(),
  state: z.enum(["auto_dismissed", "dismissed", "fixed", "open"]),
  dependency: z
    .object({
      package: dependabot_alert_package,
      manifest_path: z.string(),
      scope: z.enum(["development", "runtime"]).nullable(),
    })
    .partial()
    .passthrough(),
  security_advisory: dependabot_alert_security_advisory,
  security_vulnerability: dependabot_alert_security_vulnerability,
  url: alert_url.url(),
  html_url: alert_html_url.url(),
  created_at: alert_created_at.datetime({ offset: true }),
  updated_at: alert_updated_at.datetime({ offset: true }),
  dismissed_at: alert_dismissed_at.datetime({ offset: true }).nullable(),
  dismissed_by: nullable_simple_user.nullable(),
  dismissed_reason: z
    .enum([
      "fix_started",
      "inaccurate",
      "no_bandwidth",
      "not_used",
      "tolerable_risk",
    ])
    .nullable(),
  dismissed_comment: z.string().max(280).nullable(),
  fixed_at: alert_fixed_at.datetime({ offset: true }).nullable(),
  auto_dismissed_at: alert_auto_dismissed_at
    .datetime({ offset: true })
    .nullish(),
  repository: simple_repository,
})
const nullable_alert_updated_at = z.string()
const secret_scanning_alert_state = z.enum(["open", "resolved"])
const secret_scanning_alert_resolution = z.enum([
  "false_positive",
  "wont_fix",
  "revoked",
  "used_in_tests",
])
const organization_secret_scanning_alert = z
  .object({
    number: alert_number.int(),
    created_at: alert_created_at.datetime({ offset: true }),
    updated_at: nullable_alert_updated_at.datetime({ offset: true }).nullable(),
    url: alert_url.url(),
    html_url: alert_html_url.url(),
    locations_url: z.string().url(),
    state: secret_scanning_alert_state,
    resolution: secret_scanning_alert_resolution.nullable(),
    resolved_at: z.string().datetime({ offset: true }).nullable(),
    resolved_by: nullable_simple_user.nullable(),
    secret_type: z.string(),
    secret_type_display_name: z.string(),
    secret: z.string(),
    repository: simple_repository,
    push_protection_bypassed: z.boolean().nullable(),
    push_protection_bypassed_by: nullable_simple_user.nullable(),
    push_protection_bypassed_at: z
      .string()
      .datetime({ offset: true })
      .nullable(),
    resolution_comment: z.string().nullable(),
    validity: z.enum(["active", "inactive", "unknown"]),
  })
  .partial()
  .passthrough()
const actor = z
  .object({
    id: z.number().int(),
    login: z.string(),
    display_login: z.string().optional(),
    gravatar_id: z.string().nullable(),
    url: z.string().url(),
    avatar_url: z.string().url(),
  })
  .passthrough()
const nullable_milestone = z
  .object({
    url: z.string().url(),
    html_url: z.string().url(),
    labels_url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    number: z.number().int(),
    state: z.enum(["open", "closed"]).default("open"),
    title: z.string(),
    description: z.string().nullable(),
    creator: nullable_simple_user.nullable(),
    open_issues: z.number().int(),
    closed_issues: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    closed_at: z.string().datetime({ offset: true }).nullable(),
    due_on: z.string().datetime({ offset: true }).nullable(),
  })
  .passthrough()
const nullable_integration = z
  .object({
    id: z.number().int(),
    slug: z.string().optional(),
    node_id: z.string(),
    owner: nullable_simple_user.nullable(),
    name: z.string(),
    description: z.string().nullable(),
    external_url: z.string().url(),
    html_url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    permissions: z.record(z.string()),
    events: z.array(z.string()),
    installations_count: z.number().int().optional(),
    client_id: z.string().optional(),
    client_secret: z.string().optional(),
    webhook_secret: z.string().nullish(),
    pem: z.string().optional(),
  })
  .passthrough()
const author_association = z.enum([
  "COLLABORATOR",
  "CONTRIBUTOR",
  "FIRST_TIMER",
  "FIRST_TIME_CONTRIBUTOR",
  "MANNEQUIN",
  "MEMBER",
  "NONE",
  "OWNER",
])
const reaction_rollup = z
  .object({
    url: z.string().url(),
    total_count: z.number().int(),
    "+1": z.number().int(),
    "-1": z.number().int(),
    laugh: z.number().int(),
    confused: z.number().int(),
    heart: z.number().int(),
    hooray: z.number().int(),
    eyes: z.number().int(),
    rocket: z.number().int(),
  })
  .passthrough()
const issue = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    repository_url: z.string().url(),
    labels_url: z.string(),
    comments_url: z.string().url(),
    events_url: z.string().url(),
    html_url: z.string().url(),
    number: z.number().int(),
    state: z.string(),
    state_reason: z.enum(["completed", "reopened", "not_planned"]).nullish(),
    title: z.string(),
    body: z.string().nullish(),
    user: nullable_simple_user.nullable(),
    labels: z.array(
      z.union([
        z.string(),
        z
          .object({
            id: z.number().int(),
            node_id: z.string(),
            url: z.string().url(),
            name: z.string(),
            description: z.string().nullable(),
            color: z.string().nullable(),
            default: z.boolean(),
          })
          .partial()
          .passthrough(),
      ]),
    ),
    assignee: nullable_simple_user.nullable(),
    assignees: z.array(simple_user).nullish(),
    milestone: nullable_milestone.nullable(),
    locked: z.boolean(),
    active_lock_reason: z.string().nullish(),
    comments: z.number().int(),
    pull_request: z
      .object({
        merged_at: z.string().datetime({ offset: true }).nullish(),
        diff_url: z.string().url().nullable(),
        html_url: z.string().url().nullable(),
        patch_url: z.string().url().nullable(),
        url: z.string().url().nullable(),
      })
      .passthrough()
      .optional(),
    closed_at: z.string().datetime({ offset: true }).nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    draft: z.boolean().optional(),
    closed_by: nullable_simple_user.nullish(),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
    timeline_url: z.string().url().optional(),
    repository: repository.optional(),
    performed_via_github_app: nullable_integration.nullish(),
    author_association: author_association,
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const issue_comment = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    body: z.string().optional(),
    body_text: z.string().optional(),
    body_html: z.string().optional(),
    html_url: z.string().url(),
    user: nullable_simple_user.nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    issue_url: z.string().url(),
    author_association: author_association,
    performed_via_github_app: nullable_integration.nullish(),
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const event = z
  .object({
    id: z.string(),
    type: z.string().nullable(),
    actor: actor,
    repo: z
      .object({ id: z.number().int(), name: z.string(), url: z.string().url() })
      .passthrough(),
    org: actor.optional(),
    payload: z
      .object({
        action: z.string(),
        issue: issue,
        comment: issue_comment,
        pages: z.array(
          z
            .object({
              page_name: z.string(),
              title: z.string(),
              summary: z.string().nullable(),
              action: z.string(),
              sha: z.string(),
              html_url: z.string(),
            })
            .partial()
            .passthrough(),
        ),
      })
      .partial()
      .passthrough(),
    public: z.boolean(),
    created_at: z.string().datetime({ offset: true }).nullable(),
  })
  .passthrough()
const link_with_type = z
  .object({ href: z.string(), type: z.string() })
  .passthrough()
const feed = z
  .object({
    timeline_url: z.string(),
    user_url: z.string(),
    current_user_public_url: z.string().optional(),
    current_user_url: z.string().optional(),
    current_user_actor_url: z.string().optional(),
    current_user_organization_url: z.string().optional(),
    current_user_organization_urls: z.array(z.string()).optional(),
    security_advisories_url: z.string().optional(),
    repository_discussions_url: z.string().optional(),
    repository_discussions_category_url: z.string().optional(),
    _links: z
      .object({
        timeline: link_with_type,
        user: link_with_type,
        security_advisories: link_with_type.optional(),
        current_user: link_with_type.optional(),
        current_user_public: link_with_type.optional(),
        current_user_actor: link_with_type.optional(),
        current_user_organization: link_with_type.optional(),
        current_user_organizations: z.array(link_with_type).optional(),
        repository_discussions: link_with_type.optional(),
        repository_discussions_category: link_with_type.optional(),
      })
      .passthrough(),
  })
  .passthrough()
const base_gist = z
  .object({
    url: z.string().url(),
    forks_url: z.string().url(),
    commits_url: z.string().url(),
    id: z.string(),
    node_id: z.string(),
    git_pull_url: z.string().url(),
    git_push_url: z.string().url(),
    html_url: z.string().url(),
    files: z.record(
      z
        .object({
          filename: z.string(),
          type: z.string(),
          language: z.string(),
          raw_url: z.string(),
          size: z.number().int(),
        })
        .partial()
        .passthrough(),
    ),
    public: z.boolean(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    description: z.string().nullable(),
    comments: z.number().int(),
    user: nullable_simple_user.nullable(),
    comments_url: z.string().url(),
    owner: simple_user.optional(),
    truncated: z.boolean().optional(),
    forks: z.array(z.unknown()).optional(),
    history: z.array(z.unknown()).optional(),
  })
  .passthrough()
const gists_create_Body = z
  .object({
    description: z.string().optional(),
    files: z.record(z.object({ content: z.string() }).passthrough()),
    public: z.union([z.boolean(), z.enum(["true", "false"])]).optional(),
  })
  .passthrough()
const public_user = z.object({
  login: z.string(),
  id: z.number().int(),
  node_id: z.string(),
  avatar_url: z.string().url(),
  gravatar_id: z.string().nullable(),
  url: z.string().url(),
  html_url: z.string().url(),
  followers_url: z.string().url(),
  following_url: z.string(),
  gists_url: z.string(),
  starred_url: z.string(),
  subscriptions_url: z.string().url(),
  organizations_url: z.string().url(),
  repos_url: z.string().url(),
  events_url: z.string(),
  received_events_url: z.string().url(),
  type: z.string(),
  site_admin: z.boolean(),
  name: z.string().nullable(),
  company: z.string().nullable(),
  blog: z.string().nullable(),
  location: z.string().nullable(),
  email: z.string().email().nullable(),
  hireable: z.boolean().nullable(),
  bio: z.string().nullable(),
  twitter_username: z.string().nullish(),
  public_repos: z.number().int(),
  public_gists: z.number().int(),
  followers: z.number().int(),
  following: z.number().int(),
  created_at: z.string().datetime({ offset: true }),
  updated_at: z.string().datetime({ offset: true }),
  plan: z
    .object({
      collaborators: z.number().int(),
      name: z.string(),
      space: z.number().int(),
      private_repos: z.number().int(),
    })
    .passthrough()
    .optional(),
  suspended_at: z.string().datetime({ offset: true }).nullish(),
  private_gists: z.number().int().optional(),
  total_private_repos: z.number().int().optional(),
  owned_private_repos: z.number().int().optional(),
  disk_usage: z.number().int().optional(),
  collaborators: z.number().int().optional(),
})
const gist_history = z
  .object({
    user: nullable_simple_user.nullable(),
    version: z.string(),
    committed_at: z.string().datetime({ offset: true }),
    change_status: z
      .object({
        total: z.number().int(),
        additions: z.number().int(),
        deletions: z.number().int(),
      })
      .partial()
      .passthrough(),
    url: z.string().url(),
  })
  .partial()
  .passthrough()
const gist_simple = z
  .object({
    forks: z
      .array(
        z
          .object({
            id: z.string(),
            url: z.string().url(),
            user: public_user,
            created_at: z.string().datetime({ offset: true }),
            updated_at: z.string().datetime({ offset: true }),
          })
          .partial()
          .passthrough(),
      )
      .nullable(),
    history: z.array(gist_history).nullable(),
    fork_of: z
      .object({
        url: z.string().url(),
        forks_url: z.string().url(),
        commits_url: z.string().url(),
        id: z.string(),
        node_id: z.string(),
        git_pull_url: z.string().url(),
        git_push_url: z.string().url(),
        html_url: z.string().url(),
        files: z.record(
          z
            .object({
              filename: z.string(),
              type: z.string(),
              language: z.string(),
              raw_url: z.string(),
              size: z.number().int(),
            })
            .partial()
            .passthrough(),
        ),
        public: z.boolean(),
        created_at: z.string().datetime({ offset: true }),
        updated_at: z.string().datetime({ offset: true }),
        description: z.string().nullable(),
        comments: z.number().int(),
        user: nullable_simple_user.nullable(),
        comments_url: z.string().url(),
        owner: nullable_simple_user.nullish(),
        truncated: z.boolean().optional(),
        forks: z.array(z.unknown()).optional(),
        history: z.array(z.unknown()).optional(),
      })
      .passthrough()
      .nullable(),
    url: z.string(),
    forks_url: z.string(),
    commits_url: z.string(),
    id: z.string(),
    node_id: z.string(),
    git_pull_url: z.string(),
    git_push_url: z.string(),
    html_url: z.string(),
    files: z.record(
      z
        .object({
          filename: z.string(),
          type: z.string(),
          language: z.string(),
          raw_url: z.string(),
          size: z.number().int(),
          truncated: z.boolean(),
          content: z.string(),
        })
        .partial()
        .passthrough()
        .nullable(),
    ),
    public: z.boolean(),
    created_at: z.string(),
    updated_at: z.string(),
    description: z.string().nullable(),
    comments: z.number().int(),
    user: z.string().nullable(),
    comments_url: z.string(),
    owner: simple_user,
    truncated: z.boolean(),
  })
  .partial()
  .passthrough()
const gists_update_Body = z
  .object({
    description: z.string(),
    files: z.record(
      z
        .object({ content: z.string(), filename: z.string().nullable() })
        .partial()
        .passthrough()
        .nullable(),
    ),
  })
  .partial()
  .passthrough()
const gist_comment = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    body: z.string().max(65535),
    user: nullable_simple_user.nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    author_association: author_association,
  })
  .passthrough()
const gist_commit = z
  .object({
    url: z.string().url(),
    version: z.string(),
    user: nullable_simple_user.nullable(),
    change_status: z
      .object({
        total: z.number().int(),
        additions: z.number().int(),
        deletions: z.number().int(),
      })
      .partial()
      .passthrough(),
    committed_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const gitignore_template = z
  .object({ name: z.string(), source: z.string() })
  .passthrough()
const license_simple = z
  .object({
    key: z.string(),
    name: z.string(),
    url: z.string().url().nullable(),
    spdx_id: z.string().nullable(),
    node_id: z.string(),
    html_url: z.string().url().optional(),
  })
  .passthrough()
const license = z
  .object({
    key: z.string(),
    name: z.string(),
    spdx_id: z.string().nullable(),
    url: z.string().url().nullable(),
    node_id: z.string(),
    html_url: z.string().url(),
    description: z.string(),
    implementation: z.string(),
    permissions: z.array(z.string()),
    conditions: z.array(z.string()),
    limitations: z.array(z.string()),
    body: z.string(),
    featured: z.boolean(),
  })
  .passthrough()
const markdown_render_Body = z
  .object({
    text: z.string(),
    mode: z.enum(["markdown", "gfm"]).optional().default("markdown"),
    context: z.string().optional(),
  })
  .passthrough()
const marketplace_listing_plan = z
  .object({
    url: z.string().url(),
    accounts_url: z.string().url(),
    id: z.number().int(),
    number: z.number().int(),
    name: z.string(),
    description: z.string(),
    monthly_price_in_cents: z.number().int(),
    yearly_price_in_cents: z.number().int(),
    price_model: z.enum(["FREE", "FLAT_RATE", "PER_UNIT"]),
    has_free_trial: z.boolean(),
    unit_name: z.string().nullable(),
    state: z.string(),
    bullets: z.array(z.string()),
  })
  .passthrough()
const marketplace_purchase = z
  .object({
    url: z.string(),
    type: z.string(),
    id: z.number().int(),
    login: z.string(),
    organization_billing_email: z.string().optional(),
    email: z.string().nullish(),
    marketplace_pending_change: z
      .object({
        is_installed: z.boolean(),
        effective_date: z.string(),
        unit_count: z.number().int().nullable(),
        id: z.number().int(),
        plan: marketplace_listing_plan,
      })
      .partial()
      .passthrough()
      .nullish(),
    marketplace_purchase: z
      .object({
        billing_cycle: z.string(),
        next_billing_date: z.string().nullable(),
        is_installed: z.boolean(),
        unit_count: z.number().int().nullable(),
        on_free_trial: z.boolean(),
        free_trial_ends_on: z.string().nullable(),
        updated_at: z.string(),
        plan: marketplace_listing_plan,
      })
      .partial()
      .passthrough(),
  })
  .passthrough()
const api_overview = z
  .object({
    verifiable_password_authentication: z.boolean(),
    ssh_key_fingerprints: z
      .object({
        SHA256_RSA: z.string(),
        SHA256_DSA: z.string(),
        SHA256_ECDSA: z.string(),
        SHA256_ED25519: z.string(),
      })
      .partial()
      .passthrough()
      .optional(),
    ssh_keys: z.array(z.string()).optional(),
    hooks: z.array(z.string()).optional(),
    github_enterprise_importer: z.array(z.string()).optional(),
    web: z.array(z.string()).optional(),
    api: z.array(z.string()).optional(),
    git: z.array(z.string()).optional(),
    packages: z.array(z.string()).optional(),
    pages: z.array(z.string()).optional(),
    importer: z.array(z.string()).optional(),
    actions: z.array(z.string()).optional(),
    dependabot: z.array(z.string()).optional(),
    domains: z
      .object({
        website: z.array(z.string()),
        codespaces: z.array(z.string()),
        copilot: z.array(z.string()),
        packages: z.array(z.string()),
        actions: z.array(z.string()),
      })
      .partial()
      .passthrough()
      .optional(),
  })
  .passthrough()
const security_and_analysis = z
  .object({
    advanced_security: z
      .object({ status: z.enum(["enabled", "disabled"]) })
      .partial()
      .passthrough(),
    dependabot_security_updates: z
      .object({ status: z.enum(["enabled", "disabled"]) })
      .partial()
      .passthrough(),
    secret_scanning: z
      .object({ status: z.enum(["enabled", "disabled"]) })
      .partial()
      .passthrough(),
    secret_scanning_push_protection: z
      .object({ status: z.enum(["enabled", "disabled"]) })
      .partial()
      .passthrough(),
  })
  .partial()
  .passthrough()
const minimal_repository = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    owner: simple_user,
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    archive_url: z.string(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string().url(),
    deployments_url: z.string().url(),
    downloads_url: z.string().url(),
    events_url: z.string().url(),
    forks_url: z.string().url(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string().optional(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    languages_url: z.string().url(),
    merges_url: z.string().url(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    pulls_url: z.string(),
    releases_url: z.string(),
    ssh_url: z.string().optional(),
    stargazers_url: z.string().url(),
    statuses_url: z.string(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    tags_url: z.string().url(),
    teams_url: z.string().url(),
    trees_url: z.string(),
    clone_url: z.string().optional(),
    mirror_url: z.string().nullish(),
    hooks_url: z.string().url(),
    svn_url: z.string().optional(),
    homepage: z.string().nullish(),
    language: z.string().nullish(),
    forks_count: z.number().int().optional(),
    stargazers_count: z.number().int().optional(),
    watchers_count: z.number().int().optional(),
    size: z.number().int().optional(),
    default_branch: z.string().optional(),
    open_issues_count: z.number().int().optional(),
    is_template: z.boolean().optional(),
    topics: z.array(z.string()).optional(),
    has_issues: z.boolean().optional(),
    has_projects: z.boolean().optional(),
    has_wiki: z.boolean().optional(),
    has_pages: z.boolean().optional(),
    has_downloads: z.boolean().optional(),
    has_discussions: z.boolean().optional(),
    archived: z.boolean().optional(),
    disabled: z.boolean().optional(),
    visibility: z.string().optional(),
    pushed_at: z.string().datetime({ offset: true }).nullish(),
    created_at: z.string().datetime({ offset: true }).nullish(),
    updated_at: z.string().datetime({ offset: true }).nullish(),
    permissions: z
      .object({
        admin: z.boolean(),
        maintain: z.boolean(),
        push: z.boolean(),
        triage: z.boolean(),
        pull: z.boolean(),
      })
      .partial()
      .passthrough()
      .optional(),
    role_name: z.string().optional(),
    temp_clone_token: z.string().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    subscribers_count: z.number().int().optional(),
    network_count: z.number().int().optional(),
    code_of_conduct: code_of_conduct.optional(),
    license: z
      .object({
        key: z.string(),
        name: z.string(),
        spdx_id: z.string(),
        url: z.string(),
        node_id: z.string(),
      })
      .partial()
      .passthrough()
      .nullish(),
    forks: z.number().int().optional(),
    open_issues: z.number().int().optional(),
    watchers: z.number().int().optional(),
    allow_forking: z.boolean().optional(),
    web_commit_signoff_required: z.boolean().optional(),
    security_and_analysis: security_and_analysis.nullish(),
  })
  .passthrough()
const thread = z
  .object({
    id: z.string(),
    repository: minimal_repository,
    subject: z
      .object({
        title: z.string(),
        url: z.string(),
        latest_comment_url: z.string(),
        type: z.string(),
      })
      .passthrough(),
    reason: z.string(),
    unread: z.boolean(),
    updated_at: z.string(),
    last_read_at: z.string().nullable(),
    url: z.string(),
    subscription_url: z.string(),
  })
  .passthrough()
const activity_mark_notifications_as_read_Body = z
  .object({
    last_read_at: z.string().datetime({ offset: true }),
    read: z.boolean(),
  })
  .partial()
  .passthrough()
const thread_subscription = z
  .object({
    subscribed: z.boolean(),
    ignored: z.boolean(),
    reason: z.string().nullable(),
    created_at: z.string().datetime({ offset: true }).nullable(),
    url: z.string().url(),
    thread_url: z.string().url().optional(),
    repository_url: z.string().url().optional(),
  })
  .passthrough()
const organization_simple = z
  .object({
    login: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string().url(),
    hooks_url: z.string(),
    issues_url: z.string(),
    members_url: z.string(),
    public_members_url: z.string(),
    avatar_url: z.string(),
    description: z.string().nullable(),
  })
  .passthrough()
const organization_full = z
  .object({
    login: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string().url(),
    hooks_url: z.string(),
    issues_url: z.string(),
    members_url: z.string(),
    public_members_url: z.string(),
    avatar_url: z.string(),
    description: z.string().nullable(),
    name: z.string().optional(),
    company: z.string().optional(),
    blog: z.string().url().optional(),
    location: z.string().optional(),
    email: z.string().email().optional(),
    twitter_username: z.string().nullish(),
    is_verified: z.boolean().optional(),
    has_organization_projects: z.boolean(),
    has_repository_projects: z.boolean(),
    public_repos: z.number().int(),
    public_gists: z.number().int(),
    followers: z.number().int(),
    following: z.number().int(),
    html_url: z.string().url(),
    type: z.string(),
    total_private_repos: z.number().int().optional(),
    owned_private_repos: z.number().int().optional(),
    private_gists: z.number().int().nullish(),
    disk_usage: z.number().int().nullish(),
    collaborators: z.number().int().nullish(),
    billing_email: z.string().email().nullish(),
    plan: z
      .object({
        name: z.string(),
        space: z.number().int(),
        private_repos: z.number().int(),
        filled_seats: z.number().int().optional(),
        seats: z.number().int().optional(),
      })
      .passthrough()
      .optional(),
    default_repository_permission: z.string().nullish(),
    members_can_create_repositories: z.boolean().nullish(),
    two_factor_requirement_enabled: z.boolean().nullish(),
    members_allowed_repository_creation_type: z.string().optional(),
    members_can_create_public_repositories: z.boolean().optional(),
    members_can_create_private_repositories: z.boolean().optional(),
    members_can_create_internal_repositories: z.boolean().optional(),
    members_can_create_pages: z.boolean().optional(),
    members_can_create_public_pages: z.boolean().optional(),
    members_can_create_private_pages: z.boolean().optional(),
    members_can_fork_private_repositories: z.boolean().nullish(),
    web_commit_signoff_required: z.boolean().optional(),
    advanced_security_enabled_for_new_repositories: z.boolean().optional(),
    dependabot_alerts_enabled_for_new_repositories: z.boolean().optional(),
    dependabot_security_updates_enabled_for_new_repositories: z
      .boolean()
      .optional(),
    dependency_graph_enabled_for_new_repositories: z.boolean().optional(),
    secret_scanning_enabled_for_new_repositories: z.boolean().optional(),
    secret_scanning_push_protection_enabled_for_new_repositories: z
      .boolean()
      .optional(),
    secret_scanning_push_protection_custom_link_enabled: z.boolean().optional(),
    secret_scanning_push_protection_custom_link: z.string().nullish(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    archived_at: z.string().datetime({ offset: true }).nullable(),
  })
  .passthrough()
const orgs_update_Body = z
  .object({
    billing_email: z.string(),
    company: z.string(),
    email: z.string(),
    twitter_username: z.string(),
    location: z.string(),
    name: z.string(),
    description: z.string(),
    has_organization_projects: z.boolean(),
    has_repository_projects: z.boolean(),
    default_repository_permission: z
      .enum(["read", "write", "admin", "none"])
      .default("read"),
    members_can_create_repositories: z.boolean().default(true),
    members_can_create_internal_repositories: z.boolean(),
    members_can_create_private_repositories: z.boolean(),
    members_can_create_public_repositories: z.boolean(),
    members_allowed_repository_creation_type: z.enum([
      "all",
      "private",
      "none",
    ]),
    members_can_create_pages: z.boolean().default(true),
    members_can_create_public_pages: z.boolean().default(true),
    members_can_create_private_pages: z.boolean().default(true),
    members_can_fork_private_repositories: z.boolean(),
    web_commit_signoff_required: z.boolean(),
    blog: z.string(),
    advanced_security_enabled_for_new_repositories: z.boolean(),
    dependabot_alerts_enabled_for_new_repositories: z.boolean(),
    dependabot_security_updates_enabled_for_new_repositories: z.boolean(),
    dependency_graph_enabled_for_new_repositories: z.boolean(),
    secret_scanning_enabled_for_new_repositories: z.boolean(),
    secret_scanning_push_protection_enabled_for_new_repositories: z.boolean(),
    secret_scanning_push_protection_custom_link_enabled: z.boolean(),
    secret_scanning_push_protection_custom_link: z.string(),
  })
  .partial()
  .passthrough()
const actions_cache_usage_org_enterprise = z
  .object({
    total_active_caches_count: z.number().int(),
    total_active_caches_size_in_bytes: z.number().int(),
  })
  .passthrough()
const actions_cache_usage_by_repository = z
  .object({
    full_name: z.string(),
    active_caches_size_in_bytes: z.number().int(),
    active_caches_count: z.number().int(),
  })
  .passthrough()
const oidc_custom_sub = z
  .object({ include_claim_keys: z.array(z.string()) })
  .passthrough()
const empty_object = z.object({}).partial()
const enabled_repositories = z.enum(["all", "none", "selected"])
const allowed_actions = z.enum(["all", "local_only", "selected"])
const selected_actions_url = z.string()
const actions_organization_permissions = z
  .object({
    enabled_repositories: enabled_repositories,
    selected_repositories_url: z.string().optional(),
    allowed_actions: allowed_actions.optional(),
    selected_actions_url: selected_actions_url.optional(),
  })
  .passthrough()
const actions_set_github_actions_permissions_organization_Body = z
  .object({
    enabled_repositories: enabled_repositories,
    allowed_actions: allowed_actions.optional(),
  })
  .passthrough()
const actions_set_selected_repositories_enabled_github_actions_organization_Body =
  z.object({ selected_repository_ids: z.array(z.number()) }).passthrough()
const selected_actions = z
  .object({
    github_owned_allowed: z.boolean(),
    verified_allowed: z.boolean(),
    patterns_allowed: z.array(z.string()),
  })
  .partial()
  .passthrough()
const actions_default_workflow_permissions = z.enum(["read", "write"])
const actions_can_approve_pull_request_reviews = z.boolean()
const actions_get_default_workflow_permissions = z
  .object({
    default_workflow_permissions: actions_default_workflow_permissions,
    can_approve_pull_request_reviews: actions_can_approve_pull_request_reviews,
  })
  .passthrough()
const actions_set_default_workflow_permissions = z
  .object({
    default_workflow_permissions: actions_default_workflow_permissions,
    can_approve_pull_request_reviews: actions_can_approve_pull_request_reviews,
  })
  .partial()
  .passthrough()
const runner_label = z
  .object({
    id: z.number().int().optional(),
    name: z.string(),
    type: z.enum(["read-only", "custom"]).optional(),
  })
  .passthrough()
const runner = z
  .object({
    id: z.number().int(),
    runner_group_id: z.number().int().optional(),
    name: z.string(),
    os: z.string(),
    status: z.string(),
    busy: z.boolean(),
    labels: z.array(runner_label),
  })
  .passthrough()
const runner_application = z
  .object({
    os: z.string(),
    architecture: z.string(),
    download_url: z.string(),
    filename: z.string(),
    temp_download_token: z.string().optional(),
    sha256_checksum: z.string().optional(),
  })
  .passthrough()
const actions_generate_runner_jitconfig_for_org_Body = z
  .object({
    name: z.string(),
    runner_group_id: z.number().int(),
    labels: z.array(z.string()).min(1).max(100),
    work_folder: z.string().optional().default("_work"),
  })
  .passthrough()
const authentication_token = z
  .object({
    token: z.string(),
    expires_at: z.string().datetime({ offset: true }),
    permissions: z.object({}).partial().passthrough().optional(),
    repositories: z.array(repository).optional(),
    single_file: z.string().nullish(),
    repository_selection: z.enum(["all", "selected"]).optional(),
  })
  .passthrough()
const actions_add_custom_labels_to_self_hosted_runner_for_org_Body = z
  .object({ labels: z.array(z.string()).min(1).max(100) })
  .passthrough()
const actions_set_custom_labels_for_self_hosted_runner_for_org_Body = z
  .object({ labels: z.array(z.string()).max(100) })
  .passthrough()
const organization_actions_secret = z
  .object({
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repositories_url: z.string().url().optional(),
  })
  .passthrough()
const actions_public_key = z
  .object({
    key_id: z.string(),
    key: z.string(),
    id: z.number().int().optional(),
    url: z.string().optional(),
    title: z.string().optional(),
    created_at: z.string().optional(),
  })
  .passthrough()
const actions_create_or_update_org_secret_Body = z
  .object({
    encrypted_value: z
      .string()
      .regex(
        /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/,
      )
      .optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.number()).optional(),
  })
  .passthrough()
const organization_actions_variable = z
  .object({
    name: z.string(),
    value: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repositories_url: z.string().url().optional(),
  })
  .passthrough()
const actions_create_org_variable_Body = z
  .object({
    name: z.string(),
    value: z.string(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.number()).optional(),
  })
  .passthrough()
const actions_update_org_variable_Body = z
  .object({
    name: z.string(),
    value: z.string(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.number()),
  })
  .partial()
  .passthrough()
const alert_instances_url = z.string()
const code_scanning_alert_state = z.enum(["open", "dismissed", "fixed"])
const code_scanning_alert_dismissed_reason = z.enum([
  null,
  "false positive",
  "won't fix",
  "used in tests",
])
const code_scanning_alert_dismissed_comment = z.string()
const code_scanning_alert_rule_summary = z
  .object({
    id: z.string().nullable(),
    name: z.string(),
    tags: z.array(z.string()).nullable(),
    severity: z.enum(["none", "note", "warning", "error"]).nullable(),
    security_severity_level: z
      .enum(["low", "medium", "high", "critical"])
      .nullable(),
    description: z.string(),
  })
  .partial()
  .passthrough()
const code_scanning_analysis_tool_name = z.string()
const code_scanning_analysis_tool_version = z.string()
const code_scanning_analysis_tool_guid = z.string()
const code_scanning_analysis_tool = z
  .object({
    name: code_scanning_analysis_tool_name,
    version: code_scanning_analysis_tool_version.nullable(),
    guid: code_scanning_analysis_tool_guid.nullable(),
  })
  .partial()
  .passthrough()
const code_scanning_ref = z.string()
const code_scanning_analysis_analysis_key = z.string()
const code_scanning_alert_environment = z.string()
const code_scanning_analysis_category = z.string()
const code_scanning_alert_location = z
  .object({
    path: z.string(),
    start_line: z.number().int(),
    end_line: z.number().int(),
    start_column: z.number().int(),
    end_column: z.number().int(),
  })
  .partial()
  .passthrough()
const code_scanning_alert_classification = z.enum([
  "source",
  "generated",
  "test",
  "library",
])
const code_scanning_alert_instance = z
  .object({
    ref: code_scanning_ref,
    analysis_key: code_scanning_analysis_analysis_key,
    environment: code_scanning_alert_environment,
    category: code_scanning_analysis_category,
    state: code_scanning_alert_state,
    commit_sha: z.string(),
    message: z.object({ text: z.string() }).partial().passthrough(),
    location: code_scanning_alert_location,
    html_url: z.string(),
    classifications: z.array(code_scanning_alert_classification),
  })
  .partial()
  .passthrough()
const code_scanning_organization_alert_items = z
  .object({
    number: alert_number.int(),
    created_at: alert_created_at.datetime({ offset: true }),
    updated_at: alert_updated_at.datetime({ offset: true }).optional(),
    url: alert_url.url(),
    html_url: alert_html_url.url(),
    instances_url: alert_instances_url.url(),
    state: code_scanning_alert_state,
    fixed_at: alert_fixed_at.datetime({ offset: true }).nullish(),
    dismissed_by: nullable_simple_user.nullable(),
    dismissed_at: alert_dismissed_at.datetime({ offset: true }).nullable(),
    dismissed_reason: code_scanning_alert_dismissed_reason.nullable(),
    dismissed_comment: code_scanning_alert_dismissed_comment.max(280).nullish(),
    rule: code_scanning_alert_rule_summary,
    tool: code_scanning_analysis_tool,
    most_recent_instance: code_scanning_alert_instance,
    repository: simple_repository,
  })
  .passthrough()
const nullable_codespace_machine = z
  .object({
    name: z.string(),
    display_name: z.string(),
    operating_system: z.string(),
    storage_in_bytes: z.number().int(),
    memory_in_bytes: z.number().int(),
    cpus: z.number().int(),
    prebuild_availability: z.enum(["none", "ready", "in_progress"]).nullable(),
  })
  .passthrough()
const codespace = z
  .object({
    id: z.number().int(),
    name: z.string(),
    display_name: z.string().nullish(),
    environment_id: z.string().nullable(),
    owner: simple_user,
    billable_owner: simple_user,
    repository: minimal_repository,
    machine: nullable_codespace_machine.nullable(),
    devcontainer_path: z.string().nullish(),
    prebuild: z.boolean().nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    last_used_at: z.string().datetime({ offset: true }),
    state: z.enum([
      "Unknown",
      "Created",
      "Queued",
      "Provisioning",
      "Available",
      "Awaiting",
      "Unavailable",
      "Deleted",
      "Moved",
      "Shutdown",
      "Archived",
      "Starting",
      "ShuttingDown",
      "Failed",
      "Exporting",
      "Updating",
      "Rebuilding",
    ]),
    url: z.string().url(),
    git_status: z
      .object({
        ahead: z.number().int(),
        behind: z.number().int(),
        has_unpushed_changes: z.boolean(),
        has_uncommitted_changes: z.boolean(),
        ref: z.string(),
      })
      .partial()
      .passthrough(),
    location: z.enum(["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]),
    idle_timeout_minutes: z.number().int().nullable(),
    web_url: z.string().url(),
    machines_url: z.string().url(),
    start_url: z.string().url(),
    stop_url: z.string().url(),
    publish_url: z.string().url().nullish(),
    pulls_url: z.string().url().nullable(),
    recent_folders: z.array(z.string()),
    runtime_constraints: z
      .object({ allowed_port_privacy_settings: z.array(z.string()).nullable() })
      .partial()
      .passthrough()
      .optional(),
    pending_operation: z.boolean().nullish(),
    pending_operation_disabled_reason: z.string().nullish(),
    idle_timeout_notice: z.string().nullish(),
    retention_period_minutes: z.number().int().nullish(),
    retention_expires_at: z.string().datetime({ offset: true }).nullish(),
    last_known_stop_notice: z.string().nullish(),
  })
  .passthrough()
const codespaces_org_secret = z
  .object({
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repositories_url: z.string().url().optional(),
  })
  .passthrough()
const codespaces_public_key = z
  .object({
    key_id: z.string(),
    key: z.string(),
    id: z.number().int().optional(),
    url: z.string().optional(),
    title: z.string().optional(),
    created_at: z.string().optional(),
  })
  .passthrough()
const copilot_seat_breakdown = z
  .object({
    total: z.number().int(),
    added_this_cycle: z.number().int(),
    pending_cancellation: z.number().int(),
    pending_invitation: z.number().int(),
    active_this_cycle: z.number().int(),
    inactive_this_cycle: z.number().int(),
  })
  .partial()
  .passthrough()
const copilot_organization_details = z
  .object({
    seat_breakdown: copilot_seat_breakdown,
    public_code_suggestions: z.enum([
      "allow",
      "block",
      "unconfigured",
      "unknown",
    ]),
    ide_chat: z.enum(["enabled", "disabled", "unconfigured"]).optional(),
    platform_chat: z.enum(["enabled", "disabled", "unconfigured"]).optional(),
    cli: z.enum(["enabled", "disabled", "unconfigured"]).optional(),
    seat_management_setting: z.enum([
      "assign_all",
      "assign_selected",
      "disabled",
      "unconfigured",
    ]),
  })
  .passthrough()
const nullable_team_simple = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    members_url: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    permission: z.string(),
    privacy: z.string().optional(),
    notification_setting: z.string().optional(),
    html_url: z.string().url(),
    repositories_url: z.string().url(),
    slug: z.string(),
    ldap_dn: z.string().optional(),
  })
  .passthrough()
const team = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    slug: z.string(),
    description: z.string().nullable(),
    privacy: z.string().optional(),
    notification_setting: z.string().optional(),
    permission: z.string(),
    permissions: z
      .object({
        pull: z.boolean(),
        triage: z.boolean(),
        push: z.boolean(),
        maintain: z.boolean(),
        admin: z.boolean(),
      })
      .passthrough()
      .optional(),
    url: z.string().url(),
    html_url: z.string().url(),
    members_url: z.string(),
    repositories_url: z.string().url(),
    parent: nullable_team_simple.nullable(),
  })
  .passthrough()
const organization = z
  .object({
    login: z.string(),
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    repos_url: z.string().url(),
    events_url: z.string().url(),
    hooks_url: z.string(),
    issues_url: z.string(),
    members_url: z.string(),
    public_members_url: z.string(),
    avatar_url: z.string(),
    description: z.string().nullable(),
    blog: z.string().url().optional(),
    html_url: z.string().url(),
    name: z.string().optional(),
    company: z.string().optional(),
    location: z.string().optional(),
    email: z.string().email().optional(),
    has_organization_projects: z.boolean(),
    has_repository_projects: z.boolean(),
    is_verified: z.boolean().optional(),
    public_repos: z.number().int(),
    public_gists: z.number().int(),
    followers: z.number().int(),
    following: z.number().int(),
    type: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    plan: z
      .object({
        name: z.string(),
        space: z.number().int(),
        private_repos: z.number().int(),
        filled_seats: z.number().int(),
        seats: z.number().int(),
      })
      .partial()
      .passthrough()
      .optional(),
  })
  .passthrough()
const copilot_seat_details = z.object({
  assignee: z.union([simple_user, team, organization]),
  assigning_team: team.nullish(),
  pending_cancellation_date: z.string().nullish(),
  last_activity_at: z.string().datetime({ offset: true }).nullish(),
  last_activity_editor: z.string().nullish(),
  created_at: z.string().datetime({ offset: true }),
  updated_at: z.string().datetime({ offset: true }).optional(),
})
const copilot_add_copilot_seats_for_teams_Body = z
  .object({ selected_teams: z.array(z.string()).min(1) })
  .passthrough()
const copilot_add_copilot_seats_for_users_Body = z
  .object({ selected_usernames: z.array(z.string()).min(1) })
  .passthrough()
const organization_dependabot_secret = z
  .object({
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repositories_url: z.string().url().optional(),
  })
  .passthrough()
const dependabot_public_key = z
  .object({ key_id: z.string(), key: z.string() })
  .passthrough()
const dependabot_create_or_update_org_secret_Body = z
  .object({
    encrypted_value: z
      .string()
      .regex(
        /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/,
      )
      .optional(),
    key_id: z.string().optional(),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repository_ids: z.array(z.string()).optional(),
  })
  .passthrough()
const nullable_minimal_repository = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    owner: simple_user,
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    archive_url: z.string(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string().url(),
    deployments_url: z.string().url(),
    downloads_url: z.string().url(),
    events_url: z.string().url(),
    forks_url: z.string().url(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string().optional(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    languages_url: z.string().url(),
    merges_url: z.string().url(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    pulls_url: z.string(),
    releases_url: z.string(),
    ssh_url: z.string().optional(),
    stargazers_url: z.string().url(),
    statuses_url: z.string(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    tags_url: z.string().url(),
    teams_url: z.string().url(),
    trees_url: z.string(),
    clone_url: z.string().optional(),
    mirror_url: z.string().nullish(),
    hooks_url: z.string().url(),
    svn_url: z.string().optional(),
    homepage: z.string().nullish(),
    language: z.string().nullish(),
    forks_count: z.number().int().optional(),
    stargazers_count: z.number().int().optional(),
    watchers_count: z.number().int().optional(),
    size: z.number().int().optional(),
    default_branch: z.string().optional(),
    open_issues_count: z.number().int().optional(),
    is_template: z.boolean().optional(),
    topics: z.array(z.string()).optional(),
    has_issues: z.boolean().optional(),
    has_projects: z.boolean().optional(),
    has_wiki: z.boolean().optional(),
    has_pages: z.boolean().optional(),
    has_downloads: z.boolean().optional(),
    has_discussions: z.boolean().optional(),
    archived: z.boolean().optional(),
    disabled: z.boolean().optional(),
    visibility: z.string().optional(),
    pushed_at: z.string().datetime({ offset: true }).nullish(),
    created_at: z.string().datetime({ offset: true }).nullish(),
    updated_at: z.string().datetime({ offset: true }).nullish(),
    permissions: z
      .object({
        admin: z.boolean(),
        maintain: z.boolean(),
        push: z.boolean(),
        triage: z.boolean(),
        pull: z.boolean(),
      })
      .partial()
      .passthrough()
      .optional(),
    role_name: z.string().optional(),
    temp_clone_token: z.string().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    subscribers_count: z.number().int().optional(),
    network_count: z.number().int().optional(),
    code_of_conduct: code_of_conduct.optional(),
    license: z
      .object({
        key: z.string(),
        name: z.string(),
        spdx_id: z.string(),
        url: z.string(),
        node_id: z.string(),
      })
      .partial()
      .passthrough()
      .nullish(),
    forks: z.number().int().optional(),
    open_issues: z.number().int().optional(),
    watchers: z.number().int().optional(),
    allow_forking: z.boolean().optional(),
    web_commit_signoff_required: z.boolean().optional(),
    security_and_analysis: security_and_analysis.nullish(),
  })
  .passthrough()
const package = z
  .object({
    id: z.number().int(),
    name: z.string(),
    package_type: z.enum([
      "npm",
      "maven",
      "rubygems",
      "docker",
      "nuget",
      "container",
    ]),
    url: z.string(),
    html_url: z.string(),
    version_count: z.number().int(),
    visibility: z.enum(["private", "public"]),
    owner: nullable_simple_user.nullish(),
    repository: nullable_minimal_repository.nullish(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const organization_invitation = z
  .object({
    id: z.number().int(),
    login: z.string().nullable(),
    email: z.string().nullable(),
    role: z.string(),
    created_at: z.string(),
    failed_at: z.string().nullish(),
    failed_reason: z.string().nullish(),
    inviter: simple_user,
    team_count: z.number().int(),
    node_id: z.string(),
    invitation_teams_url: z.string(),
    invitation_source: z.string().optional(),
  })
  .passthrough()
const org_hook = z
  .object({
    id: z.number().int(),
    url: z.string().url(),
    ping_url: z.string().url(),
    deliveries_url: z.string().url().optional(),
    name: z.string(),
    events: z.array(z.string()),
    active: z.boolean(),
    config: z
      .object({
        url: z.string(),
        insecure_ssl: z.string(),
        content_type: z.string(),
        secret: z.string(),
      })
      .partial()
      .passthrough(),
    updated_at: z.string().datetime({ offset: true }),
    created_at: z.string().datetime({ offset: true }),
    type: z.string(),
  })
  .passthrough()
const orgs_create_webhook_Body = z
  .object({
    name: z.string(),
    config: z
      .object({
        url: webhook_config_url.url(),
        content_type: webhook_config_content_type.optional(),
        secret: webhook_config_secret.optional(),
        insecure_ssl: webhook_config_insecure_ssl.optional(),
        username: z.string().optional(),
        password: z.string().optional(),
      })
      .passthrough(),
    events: z.array(z.string()).optional().default(["push"]),
    active: z.boolean().optional().default(true),
  })
  .passthrough()
const orgs_update_webhook_Body = z
  .object({
    config: z
      .object({
        url: webhook_config_url.url(),
        content_type: webhook_config_content_type.optional(),
        secret: webhook_config_secret.optional(),
        insecure_ssl: webhook_config_insecure_ssl.optional(),
      })
      .passthrough(),
    events: z.array(z.string()).default(["push"]),
    active: z.boolean().default(true),
    name: z.string(),
  })
  .partial()
  .passthrough()
const interaction_group = z.enum([
  "existing_users",
  "contributors_only",
  "collaborators_only",
])
const interaction_limit_response = z
  .object({
    limit: interaction_group,
    origin: z.string(),
    expires_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const interaction_expiry = z.enum([
  "one_day",
  "three_days",
  "one_week",
  "one_month",
  "six_months",
])
const interaction_limit = z
  .object({ limit: interaction_group, expiry: interaction_expiry.optional() })
  .passthrough()
const orgs_create_invitation_Body = z
  .object({
    invitee_id: z.number().int(),
    email: z.string(),
    role: z
      .enum(["admin", "direct_member", "billing_manager", "reinstate"])
      .default("direct_member"),
    team_ids: z.array(z.number()),
  })
  .partial()
  .passthrough()
const org_membership = z
  .object({
    url: z.string().url(),
    state: z.enum(["active", "pending"]),
    role: z.enum(["admin", "member", "billing_manager"]),
    organization_url: z.string().url(),
    organization: organization_simple,
    user: nullable_simple_user.nullable(),
    permissions: z
      .object({ can_create_repository: z.boolean() })
      .passthrough()
      .optional(),
  })
  .passthrough()
const orgs_set_membership_for_user_Body = z
  .object({ role: z.enum(["admin", "member"]).default("member") })
  .partial()
  .passthrough()
const migration = z
  .object({
    id: z.number().int(),
    owner: nullable_simple_user.nullable(),
    guid: z.string(),
    state: z.string(),
    lock_repositories: z.boolean(),
    exclude_metadata: z.boolean(),
    exclude_git_data: z.boolean(),
    exclude_attachments: z.boolean(),
    exclude_releases: z.boolean(),
    exclude_owner_projects: z.boolean(),
    org_metadata_only: z.boolean(),
    repositories: z.array(repository),
    url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    node_id: z.string(),
    archive_url: z.string().url().optional(),
    exclude: z.array(z.string()).optional(),
  })
  .passthrough()
const migrations_start_for_org_Body = z
  .object({
    repositories: z.array(z.string()),
    lock_repositories: z.boolean().optional(),
    exclude_metadata: z.boolean().optional(),
    exclude_git_data: z.boolean().optional(),
    exclude_attachments: z.boolean().optional(),
    exclude_releases: z.boolean().optional(),
    exclude_owner_projects: z.boolean().optional(),
    org_metadata_only: z.boolean().optional(),
    exclude: z.array(z.literal("repositories")).optional(),
  })
  .passthrough()
const organization_fine_grained_permission = z
  .object({ name: z.string(), description: z.string() })
  .passthrough()
const organization_role = z
  .object({
    id: z.number().int(),
    name: z.string(),
    description: z.string().nullish(),
    permissions: z.array(z.string()),
    organization: nullable_simple_user.nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const orgs_create_custom_organization_role_Body = z
  .object({
    name: z.string(),
    description: z.string().optional(),
    permissions: z.array(z.string()),
  })
  .passthrough()
const orgs_patch_custom_organization_role_Body = z
  .object({
    name: z.string(),
    description: z.string(),
    permissions: z.array(z.string()),
  })
  .partial()
  .passthrough()
const package_version = z
  .object({
    id: z.number().int(),
    name: z.string(),
    url: z.string(),
    package_html_url: z.string(),
    html_url: z.string().optional(),
    license: z.string().optional(),
    description: z.string().optional(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    deleted_at: z.string().datetime({ offset: true }).optional(),
    metadata: z
      .object({
        package_type: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
        container: z
          .object({ tags: z.array(z.string()) })
          .passthrough()
          .optional(),
        docker: z
          .object({ tag: z.array(z.string()).optional() })
          .passthrough()
          .optional(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const organization_programmatic_access_grant_request = z
  .object({
    id: z.number().int(),
    reason: z.string().nullable(),
    owner: simple_user,
    repository_selection: z.enum(["none", "all", "subset"]),
    repositories_url: z.string(),
    permissions: z
      .object({
        organization: z.record(z.string()),
        repository: z.record(z.string()),
        other: z.record(z.string()),
      })
      .partial()
      .passthrough(),
    created_at: z.string(),
    token_expired: z.boolean(),
    token_expires_at: z.string().nullable(),
    token_last_used_at: z.string().nullable(),
  })
  .passthrough()
const orgs_review_pat_grant_requests_in_bulk_Body = z
  .object({
    pat_request_ids: z.array(z.number()).min(1).max(100).optional(),
    action: z.enum(["approve", "deny"]),
    reason: z.string().max(1024).nullish(),
  })
  .passthrough()
const orgs_review_pat_grant_request_Body = z
  .object({
    action: z.enum(["approve", "deny"]),
    reason: z.string().max(1024).nullish(),
  })
  .passthrough()
const organization_programmatic_access_grant = z
  .object({
    id: z.number().int(),
    owner: simple_user,
    repository_selection: z.enum(["none", "all", "subset"]),
    repositories_url: z.string(),
    permissions: z
      .object({
        organization: z.record(z.string()),
        repository: z.record(z.string()),
        other: z.record(z.string()),
      })
      .partial()
      .passthrough(),
    access_granted_at: z.string(),
    token_expired: z.boolean(),
    token_expires_at: z.string().nullable(),
    token_last_used_at: z.string().nullable(),
  })
  .passthrough()
const orgs_update_pat_accesses_Body = z
  .object({
    action: z.literal("revoke"),
    pat_ids: z.array(z.number()).min(1).max(100),
  })
  .passthrough()
const orgs_update_pat_access_Body = z
  .object({ action: z.literal("revoke") })
  .passthrough()
const project = z
  .object({
    owner_url: z.string().url(),
    url: z.string().url(),
    html_url: z.string().url(),
    columns_url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    body: z.string().nullable(),
    number: z.number().int(),
    state: z.string(),
    creator: nullable_simple_user.nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    organization_permission: z
      .enum(["read", "write", "admin", "none"])
      .optional(),
    private: z.boolean().optional(),
  })
  .passthrough()
const projects_create_for_org_Body = z
  .object({ name: z.string(), body: z.string().optional() })
  .passthrough()
const org_custom_property = z
  .object({
    property_name: z.string(),
    value_type: z.enum(["string", "single_select"]),
    required: z.boolean().optional(),
    default_value: z.string().nullish(),
    description: z.string().nullish(),
    allowed_values: z.array(z.string()).max(200).nullish(),
    values_editable_by: z.enum(["org_actors", "org_and_repo_actors"]).nullish(),
  })
  .passthrough()
const orgs_create_or_update_custom_properties_Body = z
  .object({ properties: z.array(org_custom_property).min(1).max(100) })
  .passthrough()
const orgs_create_or_update_custom_property_Body = z
  .object({
    value_type: z.enum(["string", "single_select"]),
    required: z.boolean().optional(),
    default_value: z.string().nullish(),
    description: z.string().nullish(),
    allowed_values: z.array(z.string()).max(200).nullish(),
  })
  .passthrough()
const custom_property_value = z
  .object({
    property_name: z.string(),
    value: z.union([z.string(), z.array(z.string())]).nullable(),
  })
  .passthrough()
const org_repo_custom_property_values = z
  .object({
    repository_id: z.number().int(),
    repository_name: z.string(),
    repository_full_name: z.string(),
    properties: z.array(custom_property_value),
  })
  .passthrough()
const orgs_create_or_update_custom_properties_values_for_repos_Body = z
  .object({
    repository_names: z.array(z.string()).min(1).max(30),
    properties: z.array(custom_property_value),
  })
  .passthrough()
const repos_create_in_org_Body = z
  .object({
    name: z.string(),
    description: z.string().optional(),
    homepage: z.string().optional(),
    private: z.boolean().optional(),
    visibility: z.enum(["public", "private"]).optional(),
    has_issues: z.boolean().optional().default(true),
    has_projects: z.boolean().optional().default(true),
    has_wiki: z.boolean().optional().default(true),
    has_downloads: z.boolean().optional().default(true),
    is_template: z.boolean().optional(),
    team_id: z.number().int().optional(),
    auto_init: z.boolean().optional(),
    gitignore_template: z.string().optional(),
    license_template: z.string().optional(),
    allow_squash_merge: z.boolean().optional().default(true),
    allow_merge_commit: z.boolean().optional().default(true),
    allow_rebase_merge: z.boolean().optional().default(true),
    allow_auto_merge: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    use_squash_pr_title_as_default: z.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    custom_properties: z.object({}).partial().passthrough().optional(),
  })
  .passthrough()
const nullable_repository = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    license: nullable_license_simple.nullable(),
    forks: z.number().int(),
    permissions: z
      .object({
        admin: z.boolean(),
        pull: z.boolean(),
        triage: z.boolean().optional(),
        push: z.boolean(),
        maintain: z.boolean().optional(),
      })
      .passthrough()
      .optional(),
    owner: simple_user,
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    archive_url: z.string(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string().url(),
    deployments_url: z.string().url(),
    downloads_url: z.string().url(),
    events_url: z.string().url(),
    forks_url: z.string().url(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    languages_url: z.string().url(),
    merges_url: z.string().url(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    pulls_url: z.string(),
    releases_url: z.string(),
    ssh_url: z.string(),
    stargazers_url: z.string().url(),
    statuses_url: z.string(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    tags_url: z.string().url(),
    teams_url: z.string().url(),
    trees_url: z.string(),
    clone_url: z.string(),
    mirror_url: z.string().url().nullable(),
    hooks_url: z.string().url(),
    svn_url: z.string().url(),
    homepage: z.string().url().nullable(),
    language: z.string().nullable(),
    forks_count: z.number().int(),
    stargazers_count: z.number().int(),
    watchers_count: z.number().int(),
    size: z.number().int(),
    default_branch: z.string(),
    open_issues_count: z.number().int(),
    is_template: z.boolean().optional(),
    topics: z.array(z.string()).optional(),
    has_issues: z.boolean().default(true),
    has_projects: z.boolean().default(true),
    has_wiki: z.boolean().default(true),
    has_pages: z.boolean(),
    has_downloads: z.boolean().default(true),
    has_discussions: z.boolean().optional(),
    archived: z.boolean(),
    disabled: z.boolean(),
    visibility: z.string().optional().default("public"),
    pushed_at: z.string().datetime({ offset: true }).nullable(),
    created_at: z.string().datetime({ offset: true }).nullable(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    allow_rebase_merge: z.boolean().optional().default(true),
    temp_clone_token: z.string().optional(),
    allow_squash_merge: z.boolean().optional().default(true),
    allow_auto_merge: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    allow_update_branch: z.boolean().optional(),
    use_squash_pr_title_as_default: z.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    allow_merge_commit: z.boolean().optional().default(true),
    allow_forking: z.boolean().optional(),
    web_commit_signoff_required: z.boolean().optional(),
    open_issues: z.number().int(),
    watchers: z.number().int(),
    master_branch: z.string().optional(),
    starred_at: z.string().optional(),
    anonymous_access_enabled: z.boolean().optional(),
  })
  .passthrough()
const code_of_conduct_simple = z
  .object({
    url: z.string().url(),
    key: z.string(),
    name: z.string(),
    html_url: z.string().url().nullable(),
  })
  .passthrough()
const full_repository = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    owner: simple_user,
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    archive_url: z.string(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string().url(),
    deployments_url: z.string().url(),
    downloads_url: z.string().url(),
    events_url: z.string().url(),
    forks_url: z.string().url(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    languages_url: z.string().url(),
    merges_url: z.string().url(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    pulls_url: z.string(),
    releases_url: z.string(),
    ssh_url: z.string(),
    stargazers_url: z.string().url(),
    statuses_url: z.string(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    tags_url: z.string().url(),
    teams_url: z.string().url(),
    trees_url: z.string(),
    clone_url: z.string(),
    mirror_url: z.string().url().nullable(),
    hooks_url: z.string().url(),
    svn_url: z.string().url(),
    homepage: z.string().url().nullable(),
    language: z.string().nullable(),
    forks_count: z.number().int(),
    stargazers_count: z.number().int(),
    watchers_count: z.number().int(),
    size: z.number().int(),
    default_branch: z.string(),
    open_issues_count: z.number().int(),
    is_template: z.boolean().optional(),
    topics: z.array(z.string()).optional(),
    has_issues: z.boolean(),
    has_projects: z.boolean(),
    has_wiki: z.boolean(),
    has_pages: z.boolean(),
    has_downloads: z.boolean().optional(),
    has_discussions: z.boolean(),
    archived: z.boolean(),
    disabled: z.boolean(),
    visibility: z.string().optional(),
    pushed_at: z.string().datetime({ offset: true }),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    permissions: z
      .object({
        admin: z.boolean(),
        maintain: z.boolean().optional(),
        push: z.boolean(),
        triage: z.boolean().optional(),
        pull: z.boolean(),
      })
      .passthrough()
      .optional(),
    allow_rebase_merge: z.boolean().optional(),
    template_repository: nullable_repository.nullish(),
    temp_clone_token: z.string().nullish(),
    allow_squash_merge: z.boolean().optional(),
    allow_auto_merge: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    allow_merge_commit: z.boolean().optional(),
    allow_update_branch: z.boolean().optional(),
    use_squash_pr_title_as_default: z.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    allow_forking: z.boolean().optional(),
    web_commit_signoff_required: z.boolean().optional(),
    subscribers_count: z.number().int(),
    network_count: z.number().int(),
    license: nullable_license_simple.nullable(),
    organization: nullable_simple_user.nullish(),
    parent: repository.optional(),
    source: repository.optional(),
    forks: z.number().int(),
    master_branch: z.string().optional(),
    open_issues: z.number().int(),
    watchers: z.number().int(),
    anonymous_access_enabled: z.boolean().optional().default(true),
    code_of_conduct: code_of_conduct_simple.optional(),
    security_and_analysis: security_and_analysis.nullish(),
    custom_properties: z.object({}).partial().passthrough().optional(),
  })
  .passthrough()
const repository_rule_enforcement = z.enum(["disabled", "active", "evaluate"])
const repository_ruleset_bypass_actor = z
  .object({
    actor_id: z.number().int(),
    actor_type: z.enum([
      "RepositoryRole",
      "Team",
      "Integration",
      "OrganizationAdmin",
    ]),
    bypass_mode: z.enum(["always", "pull_request"]),
  })
  .passthrough()
const repository_ruleset_conditions = z
  .object({
    ref_name: z
      .object({ include: z.array(z.string()), exclude: z.array(z.string()) })
      .partial()
      .passthrough(),
  })
  .partial()
  .passthrough()
const repository_ruleset_conditions_repository_name_target = z
  .object({
    repository_name: z
      .object({
        include: z.array(z.string()),
        exclude: z.array(z.string()),
        protected: z.boolean(),
      })
      .partial()
      .passthrough(),
  })
  .passthrough()
const repository_ruleset_conditions_repository_id_target = z
  .object({
    repository_id: z
      .object({ repository_ids: z.array(z.number()) })
      .partial()
      .passthrough(),
  })
  .passthrough()
const repository_ruleset_conditions_repository_property_spec = z
  .object({ name: z.string(), property_values: z.array(z.string()) })
  .passthrough()
const repository_ruleset_conditions_repository_property_target = z
  .object({
    repository_property: z
      .object({
        include: z.array(
          repository_ruleset_conditions_repository_property_spec,
        ),
        exclude: z.array(
          repository_ruleset_conditions_repository_property_spec,
        ),
      })
      .partial()
      .passthrough(),
  })
  .passthrough()
const org_ruleset_conditions = z.union([
  repository_ruleset_conditions.and(
    repository_ruleset_conditions_repository_name_target,
  ),
  repository_ruleset_conditions.and(
    repository_ruleset_conditions_repository_id_target,
  ),
  repository_ruleset_conditions.and(
    repository_ruleset_conditions_repository_property_target,
  ),
])
const repository_rule_creation = z
  .object({ type: z.literal("creation") })
  .passthrough()
const repository_rule_update = z
  .object({
    type: z.literal("update"),
    parameters: z
      .object({ update_allows_fetch_and_merge: z.boolean() })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_deletion = z
  .object({ type: z.literal("deletion") })
  .passthrough()
const repository_rule_required_linear_history = z
  .object({ type: z.literal("required_linear_history") })
  .passthrough()
const repository_rule_required_deployments = z
  .object({
    type: z.literal("required_deployments"),
    parameters: z
      .object({ required_deployment_environments: z.array(z.string()) })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_required_signatures = z
  .object({ type: z.literal("required_signatures") })
  .passthrough()
const repository_rule_pull_request = z
  .object({
    type: z.literal("pull_request"),
    parameters: z
      .object({
        dismiss_stale_reviews_on_push: z.boolean(),
        require_code_owner_review: z.boolean(),
        require_last_push_approval: z.boolean(),
        required_approving_review_count: z.number().int().gte(0).lte(10),
        required_review_thread_resolution: z.boolean(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_params_status_check_configuration = z
  .object({ context: z.string(), integration_id: z.number().int().optional() })
  .passthrough()
const repository_rule_required_status_checks = z
  .object({
    type: z.literal("required_status_checks"),
    parameters: z
      .object({
        required_status_checks: z.array(
          repository_rule_params_status_check_configuration,
        ),
        strict_required_status_checks_policy: z.boolean(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_non_fast_forward = z
  .object({ type: z.literal("non_fast_forward") })
  .passthrough()
const repository_rule_commit_message_pattern = z
  .object({
    type: z.literal("commit_message_pattern"),
    parameters: z
      .object({
        name: z.string().optional(),
        negate: z.boolean().optional(),
        operator: z.enum(["starts_with", "ends_with", "contains", "regex"]),
        pattern: z.string(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_commit_author_email_pattern = z
  .object({
    type: z.literal("commit_author_email_pattern"),
    parameters: z
      .object({
        name: z.string().optional(),
        negate: z.boolean().optional(),
        operator: z.enum(["starts_with", "ends_with", "contains", "regex"]),
        pattern: z.string(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_committer_email_pattern = z
  .object({
    type: z.literal("committer_email_pattern"),
    parameters: z
      .object({
        name: z.string().optional(),
        negate: z.boolean().optional(),
        operator: z.enum(["starts_with", "ends_with", "contains", "regex"]),
        pattern: z.string(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_branch_name_pattern = z
  .object({
    type: z.literal("branch_name_pattern"),
    parameters: z
      .object({
        name: z.string().optional(),
        negate: z.boolean().optional(),
        operator: z.enum(["starts_with", "ends_with", "contains", "regex"]),
        pattern: z.string(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_tag_name_pattern = z
  .object({
    type: z.literal("tag_name_pattern"),
    parameters: z
      .object({
        name: z.string().optional(),
        negate: z.boolean().optional(),
        operator: z.enum(["starts_with", "ends_with", "contains", "regex"]),
        pattern: z.string(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule_params_workflow_file_reference = z
  .object({
    path: z.string(),
    ref: z.string().optional(),
    repository_id: z.number().int(),
    sha: z.string().optional(),
  })
  .passthrough()
const repository_rule_workflows = z
  .object({
    type: z.literal("workflows"),
    parameters: z
      .object({
        workflows: z.array(repository_rule_params_workflow_file_reference),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const repository_rule = z.union([
  repository_rule_creation,
  repository_rule_update,
  repository_rule_deletion,
  repository_rule_required_linear_history,
  repository_rule_required_deployments,
  repository_rule_required_signatures,
  repository_rule_pull_request,
  repository_rule_required_status_checks,
  repository_rule_non_fast_forward,
  repository_rule_commit_message_pattern,
  repository_rule_commit_author_email_pattern,
  repository_rule_committer_email_pattern,
  repository_rule_branch_name_pattern,
  repository_rule_tag_name_pattern,
  repository_rule_workflows,
])
const repository_ruleset = z
  .object({
    id: z.number().int(),
    name: z.string(),
    target: z.enum(["branch", "tag"]).optional(),
    source_type: z.enum(["Repository", "Organization"]).optional(),
    source: z.string(),
    enforcement: repository_rule_enforcement,
    bypass_actors: z.array(repository_ruleset_bypass_actor).optional(),
    current_user_can_bypass: z
      .enum(["always", "pull_requests_only", "never"])
      .optional(),
    node_id: z.string().optional(),
    _links: z
      .object({
        self: z.object({ href: z.string() }).partial().passthrough(),
        html: z.object({ href: z.string() }).partial().passthrough(),
      })
      .partial()
      .passthrough()
      .optional(),
    conditions: z
      .union([repository_ruleset_conditions, org_ruleset_conditions])
      .nullish(),
    rules: z.array(repository_rule).optional(),
    created_at: z.string().datetime({ offset: true }).optional(),
    updated_at: z.string().datetime({ offset: true }).optional(),
  })
  .passthrough()
const repos_create_org_ruleset_Body = z
  .object({
    name: z.string(),
    target: z.enum(["branch", "tag"]).optional(),
    enforcement: repository_rule_enforcement,
    bypass_actors: z.array(repository_ruleset_bypass_actor).optional(),
    conditions: org_ruleset_conditions.optional(),
    rules: z.array(repository_rule).optional(),
  })
  .passthrough()
const rule_suites = z.array(
  z
    .object({
      id: z.number().int(),
      actor_id: z.number().int(),
      actor_name: z.string(),
      before_sha: z.string(),
      after_sha: z.string(),
      ref: z.string(),
      repository_id: z.number().int(),
      repository_name: z.string(),
      pushed_at: z.string().datetime({ offset: true }),
      result: z.enum(["pass", "fail", "bypass"]),
      evaluation_result: z.enum(["pass", "fail"]),
    })
    .partial()
    .passthrough(),
)
const rule_suite = z
  .object({
    id: z.number().int(),
    actor_id: z.number().int().nullable(),
    actor_name: z.string().nullable(),
    before_sha: z.string(),
    after_sha: z.string(),
    ref: z.string(),
    repository_id: z.number().int(),
    repository_name: z.string(),
    pushed_at: z.string().datetime({ offset: true }),
    result: z.enum(["pass", "fail", "bypass"]),
    evaluation_result: z.enum(["pass", "fail"]),
    rule_evaluations: z.array(
      z
        .object({
          rule_source: z
            .object({
              type: z.string(),
              id: z.number().int().nullable(),
              name: z.string().nullable(),
            })
            .partial()
            .passthrough(),
          enforcement: z.enum(["active", "evaluate", "deleted ruleset"]),
          result: z.enum(["pass", "fail"]),
          rule_type: z.string(),
          details: z.string(),
        })
        .partial()
        .passthrough(),
    ),
  })
  .partial()
  .passthrough()
const repos_update_org_ruleset_Body = z
  .object({
    name: z.string(),
    target: z.enum(["branch", "tag"]),
    enforcement: repository_rule_enforcement,
    bypass_actors: z.array(repository_ruleset_bypass_actor),
    conditions: org_ruleset_conditions,
    rules: z.array(repository_rule),
  })
  .partial()
  .passthrough()
const repository_advisory_vulnerability = z.object({
  package: z
    .object({
      ecosystem: security_advisory_ecosystems,
      name: z.string().nullable(),
    })
    .passthrough()
    .nullable(),
  vulnerable_version_range: z.string().nullable(),
  patched_versions: z.string().nullable(),
  vulnerable_functions: z.array(z.string()).nullable(),
})
const repository_advisory_credit = z.object({
  user: simple_user,
  type: security_advisory_credit_types,
  state: z.enum(["accepted", "declined", "pending"]),
})
const repository_advisory = z.object({
  ghsa_id: z.string(),
  cve_id: z.string().nullable(),
  url: z.string().url(),
  html_url: z.string().url(),
  summary: z.string().max(1024),
  description: z.string().max(65535).nullable(),
  severity: z.enum(["critical", "high", "medium", "low"]).nullable(),
  author: simple_user.nullable(),
  publisher: simple_user.nullable(),
  identifiers: z.array(
    z
      .object({ type: z.enum(["CVE", "GHSA"]), value: z.string() })
      .passthrough(),
  ),
  state: z.enum(["published", "closed", "withdrawn", "draft", "triage"]),
  created_at: z.string().datetime({ offset: true }).nullable(),
  updated_at: z.string().datetime({ offset: true }).nullable(),
  published_at: z.string().datetime({ offset: true }).nullable(),
  closed_at: z.string().datetime({ offset: true }).nullable(),
  withdrawn_at: z.string().datetime({ offset: true }).nullable(),
  submission: z.object({ accepted: z.boolean() }).passthrough().nullable(),
  vulnerabilities: z.array(repository_advisory_vulnerability).nullable(),
  cvss: z
    .object({
      vector_string: z.string().nullable(),
      score: z.number().gte(0).lte(10).nullable(),
    })
    .passthrough()
    .nullable(),
  cwes: z
    .array(z.object({ cwe_id: z.string(), name: z.string() }).passthrough())
    .nullable(),
  cwe_ids: z.array(z.string()).nullable(),
  credits: z
    .array(
      z
        .object({ login: z.string(), type: security_advisory_credit_types })
        .partial()
        .passthrough(),
    )
    .nullable(),
  credits_detailed: z.array(repository_advisory_credit).nullable(),
  collaborating_users: z.array(simple_user).nullable(),
  collaborating_teams: z.array(team).nullable(),
  private_fork: simple_repository.nullable(),
})
const team_simple = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    members_url: z.string(),
    name: z.string(),
    description: z.string().nullable(),
    permission: z.string(),
    privacy: z.string().optional(),
    notification_setting: z.string().optional(),
    html_url: z.string().url(),
    repositories_url: z.string().url(),
    slug: z.string(),
    ldap_dn: z.string().optional(),
  })
  .passthrough()
const actions_billing_usage = z
  .object({
    total_minutes_used: z.number().int(),
    total_paid_minutes_used: z.number().int(),
    included_minutes: z.number().int(),
    minutes_used_breakdown: z
      .object({
        UBUNTU: z.number().int(),
        MACOS: z.number().int(),
        WINDOWS: z.number().int(),
        ubuntu_4_core: z.number().int(),
        ubuntu_8_core: z.number().int(),
        ubuntu_16_core: z.number().int(),
        ubuntu_32_core: z.number().int(),
        ubuntu_64_core: z.number().int(),
        windows_4_core: z.number().int(),
        windows_8_core: z.number().int(),
        windows_16_core: z.number().int(),
        windows_32_core: z.number().int(),
        windows_64_core: z.number().int(),
        macos_12_core: z.number().int(),
        total: z.number().int(),
      })
      .partial()
      .passthrough(),
  })
  .passthrough()
const packages_billing_usage = z
  .object({
    total_gigabytes_bandwidth_used: z.number().int(),
    total_paid_gigabytes_bandwidth_used: z.number().int(),
    included_gigabytes_bandwidth: z.number().int(),
  })
  .passthrough()
const combined_billing_usage = z
  .object({
    days_left_in_billing_cycle: z.number().int(),
    estimated_paid_storage_for_month: z.number().int(),
    estimated_storage_for_month: z.number().int(),
  })
  .passthrough()
const teams_create_Body = z
  .object({
    name: z.string(),
    description: z.string().optional(),
    maintainers: z.array(z.string()).optional(),
    repo_names: z.array(z.string()).optional(),
    privacy: z.enum(["secret", "closed"]).optional(),
    notification_setting: z
      .enum(["notifications_enabled", "notifications_disabled"])
      .optional(),
    permission: z.enum(["pull", "push"]).optional().default("pull"),
    parent_team_id: z.number().int().optional(),
  })
  .passthrough()
const team_organization = z
  .object({
    login: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string().url(),
    hooks_url: z.string(),
    issues_url: z.string(),
    members_url: z.string(),
    public_members_url: z.string(),
    avatar_url: z.string(),
    description: z.string().nullable(),
    name: z.string().optional(),
    company: z.string().optional(),
    blog: z.string().url().optional(),
    location: z.string().optional(),
    email: z.string().email().optional(),
    twitter_username: z.string().nullish(),
    is_verified: z.boolean().optional(),
    has_organization_projects: z.boolean(),
    has_repository_projects: z.boolean(),
    public_repos: z.number().int(),
    public_gists: z.number().int(),
    followers: z.number().int(),
    following: z.number().int(),
    html_url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    type: z.string(),
    total_private_repos: z.number().int().optional(),
    owned_private_repos: z.number().int().optional(),
    private_gists: z.number().int().nullish(),
    disk_usage: z.number().int().nullish(),
    collaborators: z.number().int().nullish(),
    billing_email: z.string().email().nullish(),
    plan: z
      .object({
        name: z.string(),
        space: z.number().int(),
        private_repos: z.number().int(),
        filled_seats: z.number().int().optional(),
        seats: z.number().int().optional(),
      })
      .passthrough()
      .optional(),
    default_repository_permission: z.string().nullish(),
    members_can_create_repositories: z.boolean().nullish(),
    two_factor_requirement_enabled: z.boolean().nullish(),
    members_allowed_repository_creation_type: z.string().optional(),
    members_can_create_public_repositories: z.boolean().optional(),
    members_can_create_private_repositories: z.boolean().optional(),
    members_can_create_internal_repositories: z.boolean().optional(),
    members_can_create_pages: z.boolean().optional(),
    members_can_create_public_pages: z.boolean().optional(),
    members_can_create_private_pages: z.boolean().optional(),
    members_can_fork_private_repositories: z.boolean().nullish(),
    web_commit_signoff_required: z.boolean().optional(),
    updated_at: z.string().datetime({ offset: true }),
    archived_at: z.string().datetime({ offset: true }).nullable(),
  })
  .passthrough()
const team_full = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    html_url: z.string().url(),
    name: z.string(),
    slug: z.string(),
    description: z.string().nullable(),
    privacy: z.enum(["closed", "secret"]).optional(),
    notification_setting: z
      .enum(["notifications_enabled", "notifications_disabled"])
      .optional(),
    permission: z.string(),
    members_url: z.string(),
    repositories_url: z.string().url(),
    parent: nullable_team_simple.nullish(),
    members_count: z.number().int(),
    repos_count: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    organization: team_organization,
    ldap_dn: z.string().optional(),
  })
  .passthrough()
const teams_update_in_org_Body = z
  .object({
    name: z.string(),
    description: z.string(),
    privacy: z.enum(["secret", "closed"]),
    notification_setting: z.enum([
      "notifications_enabled",
      "notifications_disabled",
    ]),
    permission: z.enum(["pull", "push", "admin"]).default("pull"),
    parent_team_id: z.number().int().nullable(),
  })
  .partial()
  .passthrough()
const team_discussion = z
  .object({
    author: nullable_simple_user.nullable(),
    body: z.string(),
    body_html: z.string(),
    body_version: z.string(),
    comments_count: z.number().int(),
    comments_url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    last_edited_at: z.string().datetime({ offset: true }).nullable(),
    html_url: z.string().url(),
    node_id: z.string(),
    number: z.number().int(),
    pinned: z.boolean(),
    private: z.boolean(),
    team_url: z.string().url(),
    title: z.string(),
    updated_at: z.string().datetime({ offset: true }),
    url: z.string().url(),
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const teams_create_discussion_in_org_Body = z
  .object({
    title: z.string(),
    body: z.string(),
    private: z.boolean().optional(),
  })
  .passthrough()
const teams_update_discussion_in_org_Body = z
  .object({ title: z.string(), body: z.string() })
  .partial()
  .passthrough()
const team_discussion_comment = z
  .object({
    author: nullable_simple_user.nullable(),
    body: z.string(),
    body_html: z.string(),
    body_version: z.string(),
    created_at: z.string().datetime({ offset: true }),
    last_edited_at: z.string().datetime({ offset: true }).nullable(),
    discussion_url: z.string().url(),
    html_url: z.string().url(),
    node_id: z.string(),
    number: z.number().int(),
    updated_at: z.string().datetime({ offset: true }),
    url: z.string().url(),
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const reaction = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    user: nullable_simple_user.nullable(),
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
    created_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const reactions_create_for_team_discussion_comment_in_org_Body = z
  .object({
    content: z.enum([
      "+1",
      "-1",
      "laugh",
      "confused",
      "heart",
      "hooray",
      "rocket",
      "eyes",
    ]),
  })
  .passthrough()
const team_membership = z
  .object({
    url: z.string().url(),
    role: z.enum(["member", "maintainer"]).default("member"),
    state: z.enum(["active", "pending"]),
  })
  .passthrough()
const teams_add_or_update_membership_for_user_in_org_Body = z
  .object({ role: z.enum(["member", "maintainer"]).default("member") })
  .partial()
  .passthrough()
const team_project = z
  .object({
    owner_url: z.string(),
    url: z.string(),
    html_url: z.string(),
    columns_url: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    body: z.string().nullable(),
    number: z.number().int(),
    state: z.string(),
    creator: simple_user,
    created_at: z.string(),
    updated_at: z.string(),
    organization_permission: z.string().optional(),
    private: z.boolean().optional(),
    permissions: z
      .object({ read: z.boolean(), write: z.boolean(), admin: z.boolean() })
      .passthrough(),
  })
  .passthrough()
const teams_add_or_update_project_permissions_in_org_Body = z
  .object({ permission: z.enum(["read", "write", "admin"]) })
  .partial()
  .passthrough()
const team_repository = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    license: nullable_license_simple.nullable(),
    forks: z.number().int(),
    permissions: z
      .object({
        admin: z.boolean(),
        pull: z.boolean(),
        triage: z.boolean().optional(),
        push: z.boolean(),
        maintain: z.boolean().optional(),
      })
      .passthrough()
      .optional(),
    role_name: z.string().optional(),
    owner: nullable_simple_user.nullable(),
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    archive_url: z.string(),
    assignees_url: z.string(),
    blobs_url: z.string(),
    branches_url: z.string(),
    collaborators_url: z.string(),
    comments_url: z.string(),
    commits_url: z.string(),
    compare_url: z.string(),
    contents_url: z.string(),
    contributors_url: z.string().url(),
    deployments_url: z.string().url(),
    downloads_url: z.string().url(),
    events_url: z.string().url(),
    forks_url: z.string().url(),
    git_commits_url: z.string(),
    git_refs_url: z.string(),
    git_tags_url: z.string(),
    git_url: z.string(),
    issue_comment_url: z.string(),
    issue_events_url: z.string(),
    issues_url: z.string(),
    keys_url: z.string(),
    labels_url: z.string(),
    languages_url: z.string().url(),
    merges_url: z.string().url(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    pulls_url: z.string(),
    releases_url: z.string(),
    ssh_url: z.string(),
    stargazers_url: z.string().url(),
    statuses_url: z.string(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    tags_url: z.string().url(),
    teams_url: z.string().url(),
    trees_url: z.string(),
    clone_url: z.string(),
    mirror_url: z.string().url().nullable(),
    hooks_url: z.string().url(),
    svn_url: z.string().url(),
    homepage: z.string().url().nullable(),
    language: z.string().nullable(),
    forks_count: z.number().int(),
    stargazers_count: z.number().int(),
    watchers_count: z.number().int(),
    size: z.number().int(),
    default_branch: z.string(),
    open_issues_count: z.number().int(),
    is_template: z.boolean().optional(),
    topics: z.array(z.string()).optional(),
    has_issues: z.boolean().default(true),
    has_projects: z.boolean().default(true),
    has_wiki: z.boolean().default(true),
    has_pages: z.boolean(),
    has_downloads: z.boolean().default(true),
    archived: z.boolean(),
    disabled: z.boolean(),
    visibility: z.string().optional().default("public"),
    pushed_at: z.string().datetime({ offset: true }).nullable(),
    created_at: z.string().datetime({ offset: true }).nullable(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    allow_rebase_merge: z.boolean().optional().default(true),
    temp_clone_token: z.string().optional(),
    allow_squash_merge: z.boolean().optional().default(true),
    allow_auto_merge: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    allow_merge_commit: z.boolean().optional().default(true),
    allow_forking: z.boolean().optional(),
    web_commit_signoff_required: z.boolean().optional(),
    subscribers_count: z.number().int().optional(),
    network_count: z.number().int().optional(),
    open_issues: z.number().int(),
    watchers: z.number().int(),
    master_branch: z.string().optional(),
  })
  .passthrough()
const project_card = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    note: z.string().nullable(),
    creator: nullable_simple_user.nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    archived: z.boolean().optional(),
    column_name: z.string().optional(),
    project_id: z.string().optional(),
    column_url: z.string().url(),
    content_url: z.string().url().optional(),
    project_url: z.string().url(),
  })
  .passthrough()
const projects_update_card_Body = z
  .object({ note: z.string().nullable(), archived: z.boolean() })
  .partial()
  .passthrough()
const projects_move_card_Body = z
  .object({
    position: z.string().regex(/^(?:top|bottom|after:\d+)$/),
    column_id: z.number().int().optional(),
  })
  .passthrough()
const project_column = z
  .object({
    url: z.string().url(),
    project_url: z.string().url(),
    cards_url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const projects_create_card_Body = z.union([
  z.object({ note: z.string().nullable() }).passthrough(),
  z
    .object({ content_id: z.number().int(), content_type: z.string() })
    .passthrough(),
])
const projects_update_Body = z
  .object({
    name: z.string(),
    body: z.string().nullable(),
    state: z.string(),
    organization_permission: z.enum(["read", "write", "admin", "none"]),
    private: z.boolean(),
  })
  .partial()
  .passthrough()
const projects_add_collaborator_Body = z
  .object({ permission: z.enum(["read", "write", "admin"]).default("write") })
  .partial()
  .passthrough()
const project_collaborator_permission = z
  .object({ permission: z.string(), user: nullable_simple_user.nullable() })
  .passthrough()
const rate_limit = z
  .object({
    limit: z.number().int(),
    remaining: z.number().int(),
    reset: z.number().int(),
    used: z.number().int(),
  })
  .passthrough()
const rate_limit_overview = z
  .object({
    resources: z
      .object({
        core: rate_limit,
        graphql: rate_limit.optional(),
        search: rate_limit,
        code_search: rate_limit.optional(),
        source_import: rate_limit.optional(),
        integration_manifest: rate_limit.optional(),
        code_scanning_upload: rate_limit.optional(),
        actions_runner_registration: rate_limit.optional(),
        scim: rate_limit.optional(),
        dependency_snapshots: rate_limit.optional(),
      })
      .passthrough(),
    rate: rate_limit,
  })
  .passthrough()
const repos_update_Body = z
  .object({
    name: z.string(),
    description: z.string(),
    homepage: z.string(),
    private: z.boolean(),
    visibility: z.enum(["public", "private"]),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.string() })
          .partial()
          .passthrough(),
        secret_scanning: z
          .object({ status: z.string() })
          .partial()
          .passthrough(),
        secret_scanning_push_protection: z
          .object({ status: z.string() })
          .partial()
          .passthrough(),
      })
      .partial()
      .passthrough()
      .nullable(),
    has_issues: z.boolean().default(true),
    has_projects: z.boolean().default(true),
    has_wiki: z.boolean().default(true),
    is_template: z.boolean(),
    default_branch: z.string(),
    allow_squash_merge: z.boolean().default(true),
    allow_merge_commit: z.boolean().default(true),
    allow_rebase_merge: z.boolean().default(true),
    allow_auto_merge: z.boolean(),
    delete_branch_on_merge: z.boolean(),
    allow_update_branch: z.boolean(),
    use_squash_pr_title_as_default: z.boolean(),
    squash_merge_commit_title: z.enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"]),
    squash_merge_commit_message: z.enum([
      "PR_BODY",
      "COMMIT_MESSAGES",
      "BLANK",
    ]),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]),
    archived: z.boolean(),
    allow_forking: z.boolean(),
    web_commit_signoff_required: z.boolean(),
  })
  .partial()
  .passthrough()
const artifact = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    size_in_bytes: z.number().int(),
    url: z.string(),
    archive_download_url: z.string(),
    expired: z.boolean(),
    created_at: z.string().datetime({ offset: true }).nullable(),
    expires_at: z.string().datetime({ offset: true }).nullable(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    workflow_run: z
      .object({
        id: z.number().int(),
        repository_id: z.number().int(),
        head_repository_id: z.number().int(),
        head_branch: z.string(),
        head_sha: z.string(),
      })
      .partial()
      .passthrough()
      .nullish(),
  })
  .passthrough()
const actions_cache_list = z
  .object({
    total_count: z.number().int(),
    actions_caches: z.array(
      z
        .object({
          id: z.number().int(),
          ref: z.string(),
          key: z.string(),
          version: z.string(),
          last_accessed_at: z.string().datetime({ offset: true }),
          created_at: z.string().datetime({ offset: true }),
          size_in_bytes: z.number().int(),
        })
        .partial()
        .passthrough(),
    ),
  })
  .passthrough()
const job = z
  .object({
    id: z.number().int(),
    run_id: z.number().int(),
    run_url: z.string(),
    run_attempt: z.number().int().optional(),
    node_id: z.string(),
    head_sha: z.string(),
    url: z.string(),
    html_url: z.string().nullable(),
    status: z.enum([
      "queued",
      "in_progress",
      "completed",
      "waiting",
      "requested",
      "pending",
    ]),
    conclusion: z
      .enum([
        "success",
        "failure",
        "neutral",
        "cancelled",
        "skipped",
        "timed_out",
        "action_required",
      ])
      .nullable(),
    created_at: z.string().datetime({ offset: true }),
    started_at: z.string().datetime({ offset: true }),
    completed_at: z.string().datetime({ offset: true }).nullable(),
    name: z.string(),
    steps: z
      .array(
        z
          .object({
            status: z.enum(["queued", "in_progress", "completed"]),
            conclusion: z.string().nullable(),
            name: z.string(),
            number: z.number().int(),
            started_at: z.string().datetime({ offset: true }).nullish(),
            completed_at: z.string().datetime({ offset: true }).nullish(),
          })
          .passthrough(),
      )
      .optional(),
    check_run_url: z.string(),
    labels: z.array(z.string()),
    runner_id: z.number().int().nullable(),
    runner_name: z.string().nullable(),
    runner_group_id: z.number().int().nullable(),
    runner_group_name: z.string().nullable(),
    workflow_name: z.string().nullable(),
    head_branch: z.string().nullable(),
  })
  .passthrough()
const oidc_custom_sub_repo = z
  .object({
    use_default: z.boolean(),
    include_claim_keys: z.array(z.string()).optional(),
  })
  .passthrough()
const actions_set_custom_oidc_sub_claim_for_repo_Body = z
  .object({
    use_default: z.boolean(),
    include_claim_keys: z.array(z.string()).optional(),
  })
  .passthrough()
const actions_secret = z
  .object({
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const actions_variable = z
  .object({
    name: z.string(),
    value: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const actions_enabled = z.boolean()
const actions_repository_permissions = z
  .object({
    enabled: actions_enabled,
    allowed_actions: allowed_actions.optional(),
    selected_actions_url: selected_actions_url.optional(),
  })
  .passthrough()
const actions_set_github_actions_permissions_repository_Body = z
  .object({
    enabled: actions_enabled,
    allowed_actions: allowed_actions.optional(),
  })
  .passthrough()
const actions_workflow_access_to_repository = z
  .object({ access_level: z.enum(["none", "user", "organization"]) })
  .passthrough()
const referenced_workflow = z
  .object({ path: z.string(), sha: z.string(), ref: z.string().optional() })
  .passthrough()
const pull_request_minimal = z
  .object({
    id: z.number().int(),
    number: z.number().int(),
    url: z.string(),
    head: z
      .object({
        ref: z.string(),
        sha: z.string(),
        repo: z
          .object({ id: z.number().int(), url: z.string(), name: z.string() })
          .passthrough(),
      })
      .passthrough(),
    base: z
      .object({
        ref: z.string(),
        sha: z.string(),
        repo: z
          .object({ id: z.number().int(), url: z.string(), name: z.string() })
          .passthrough(),
      })
      .passthrough(),
  })
  .passthrough()
const nullable_simple_commit = z
  .object({
    id: z.string(),
    tree_id: z.string(),
    message: z.string(),
    timestamp: z.string().datetime({ offset: true }),
    author: z
      .object({ name: z.string(), email: z.string().email() })
      .passthrough()
      .nullable(),
    committer: z
      .object({ name: z.string(), email: z.string().email() })
      .passthrough()
      .nullable(),
  })
  .passthrough()
const workflow_run = z
  .object({
    id: z.number().int(),
    name: z.string().nullish(),
    node_id: z.string(),
    check_suite_id: z.number().int().optional(),
    check_suite_node_id: z.string().optional(),
    head_branch: z.string().nullable(),
    head_sha: z.string(),
    path: z.string(),
    run_number: z.number().int(),
    run_attempt: z.number().int().optional(),
    referenced_workflows: z.array(referenced_workflow).nullish(),
    event: z.string(),
    status: z.string().nullable(),
    conclusion: z.string().nullable(),
    workflow_id: z.number().int(),
    url: z.string(),
    html_url: z.string(),
    pull_requests: z.array(pull_request_minimal).nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    actor: simple_user.optional(),
    triggering_actor: simple_user.optional(),
    run_started_at: z.string().datetime({ offset: true }).optional(),
    jobs_url: z.string(),
    logs_url: z.string(),
    check_suite_url: z.string(),
    artifacts_url: z.string(),
    cancel_url: z.string(),
    rerun_url: z.string(),
    previous_attempt_url: z.string().nullish(),
    workflow_url: z.string(),
    head_commit: nullable_simple_commit.nullable(),
    repository: minimal_repository,
    head_repository: minimal_repository,
    head_repository_id: z.number().int().optional(),
    display_title: z.string(),
  })
  .passthrough()
const environment_approvals = z
  .object({
    environments: z.array(
      z
        .object({
          id: z.number().int(),
          node_id: z.string(),
          name: z.string(),
          url: z.string(),
          html_url: z.string(),
          created_at: z.string().datetime({ offset: true }),
          updated_at: z.string().datetime({ offset: true }),
        })
        .partial()
        .passthrough(),
    ),
    state: z.enum(["approved", "rejected", "pending"]),
    user: simple_user,
    comment: z.string(),
  })
  .passthrough()
const review_custom_gates_comment_required = z
  .object({ environment_name: z.string(), comment: z.string() })
  .passthrough()
const review_custom_gates_state_required = z
  .object({
    environment_name: z.string(),
    state: z.enum(["approved", "rejected"]),
    comment: z.string().optional(),
  })
  .passthrough()
const actions_review_custom_gates_for_run_Body = z.union([
  review_custom_gates_comment_required,
  review_custom_gates_state_required,
])
const deployment_reviewer_type = z.enum(["User", "Team"])
const pending_deployment = z
  .object({
    environment: z
      .object({
        id: z.number().int(),
        node_id: z.string(),
        name: z.string(),
        url: z.string(),
        html_url: z.string(),
      })
      .partial()
      .passthrough(),
    wait_timer: z.number().int(),
    wait_timer_started_at: z.string().datetime({ offset: true }).nullable(),
    current_user_can_approve: z.boolean(),
    reviewers: z.array(
      z
        .object({
          type: deployment_reviewer_type,
          reviewer: z.union([simple_user, team]),
        })
        .partial()
        .passthrough(),
    ),
  })
  .passthrough()
const actions_review_pending_deployments_for_run_Body = z
  .object({
    environment_ids: z.array(z.number()),
    state: z.enum(["approved", "rejected"]),
    comment: z.string(),
  })
  .passthrough()
const deployment = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    sha: z.string(),
    ref: z.string(),
    task: z.string(),
    payload: z.union([z.object({}).partial().passthrough(), z.string()]),
    original_environment: z.string().optional(),
    environment: z.string(),
    description: z.string().nullable(),
    creator: nullable_simple_user.nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    statuses_url: z.string().url(),
    repository_url: z.string().url(),
    transient_environment: z.boolean().optional(),
    production_environment: z.boolean().optional(),
    performed_via_github_app: nullable_integration.nullish(),
  })
  .passthrough()
const workflow_run_usage = z
  .object({
    billable: z
      .object({
        UBUNTU: z
          .object({
            total_ms: z.number().int(),
            jobs: z.number().int(),
            job_runs: z
              .array(
                z
                  .object({
                    job_id: z.number().int(),
                    duration_ms: z.number().int(),
                  })
                  .passthrough(),
              )
              .optional(),
          })
          .passthrough(),
        MACOS: z
          .object({
            total_ms: z.number().int(),
            jobs: z.number().int(),
            job_runs: z
              .array(
                z
                  .object({
                    job_id: z.number().int(),
                    duration_ms: z.number().int(),
                  })
                  .passthrough(),
              )
              .optional(),
          })
          .passthrough(),
        WINDOWS: z
          .object({
            total_ms: z.number().int(),
            jobs: z.number().int(),
            job_runs: z
              .array(
                z
                  .object({
                    job_id: z.number().int(),
                    duration_ms: z.number().int(),
                  })
                  .passthrough(),
              )
              .optional(),
          })
          .passthrough(),
      })
      .partial()
      .passthrough(),
    run_duration_ms: z.number().int().optional(),
  })
  .passthrough()
const actions_create_or_update_repo_secret_Body = z
  .object({
    encrypted_value: z
      .string()
      .regex(
        /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/,
      ),
    key_id: z.string(),
  })
  .partial()
  .passthrough()
const actions_create_repo_variable_Body = z
  .object({ name: z.string(), value: z.string() })
  .passthrough()
const actions_update_repo_variable_Body = z
  .object({ name: z.string(), value: z.string() })
  .partial()
  .passthrough()
const workflow = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    path: z.string(),
    state: z.enum([
      "active",
      "deleted",
      "disabled_fork",
      "disabled_inactivity",
      "disabled_manually",
    ]),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    url: z.string(),
    html_url: z.string(),
    badge_url: z.string(),
    deleted_at: z.string().datetime({ offset: true }).optional(),
  })
  .passthrough()
const workflow_id = z.union([z.number(), z.string()])
const actions_create_workflow_dispatch_Body = z
  .object({
    ref: z.string(),
    inputs: z.object({}).partial().passthrough().optional(),
  })
  .passthrough()
const workflow_usage = z
  .object({
    billable: z
      .object({
        UBUNTU: z
          .object({ total_ms: z.number().int() })
          .partial()
          .passthrough(),
        MACOS: z.object({ total_ms: z.number().int() }).partial().passthrough(),
        WINDOWS: z
          .object({ total_ms: z.number().int() })
          .partial()
          .passthrough(),
      })
      .partial()
      .passthrough(),
  })
  .passthrough()
const activity = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    before: z.string(),
    after: z.string(),
    ref: z.string(),
    timestamp: z.string().datetime({ offset: true }),
    activity_type: z.enum([
      "push",
      "force_push",
      "branch_deletion",
      "branch_creation",
      "pr_merge",
      "merge_queue_merge",
    ]),
    actor: nullable_simple_user.nullable(),
  })
  .passthrough()
const autolink = z
  .object({
    id: z.number().int(),
    key_prefix: z.string(),
    url_template: z.string(),
    is_alphanumeric: z.boolean(),
  })
  .passthrough()
const repos_create_autolink_Body = z
  .object({
    key_prefix: z.string(),
    url_template: z.string(),
    is_alphanumeric: z.boolean().optional().default(true),
  })
  .passthrough()
const check_automated_security_fixes = z
  .object({ enabled: z.boolean(), paused: z.boolean() })
  .passthrough()
const protected_branch_required_status_check = z
  .object({
    url: z.string().optional(),
    enforcement_level: z.string().optional(),
    contexts: z.array(z.string()),
    checks: z.array(
      z
        .object({ context: z.string(), app_id: z.number().int().nullable() })
        .passthrough(),
    ),
    contexts_url: z.string().optional(),
    strict: z.boolean().optional(),
  })
  .passthrough()
const protected_branch_admin_enforced = z
  .object({ url: z.string().url(), enabled: z.boolean() })
  .passthrough()
const protected_branch_pull_request_review = z
  .object({
    url: z.string().url().optional(),
    dismissal_restrictions: z
      .object({
        users: z.array(simple_user),
        teams: z.array(team),
        apps: z.array(integration),
        url: z.string(),
        users_url: z.string(),
        teams_url: z.string(),
      })
      .partial()
      .passthrough()
      .optional(),
    bypass_pull_request_allowances: z
      .object({
        users: z.array(simple_user),
        teams: z.array(team),
        apps: z.array(integration),
      })
      .partial()
      .passthrough()
      .optional(),
    dismiss_stale_reviews: z.boolean(),
    require_code_owner_reviews: z.boolean(),
    required_approving_review_count: z.number().int().gte(0).lte(6).optional(),
    require_last_push_approval: z.boolean().optional(),
  })
  .passthrough()
const branch_restriction_policy = z
  .object({
    url: z.string().url(),
    users_url: z.string().url(),
    teams_url: z.string().url(),
    apps_url: z.string().url(),
    users: z.array(
      z
        .object({
          login: z.string(),
          id: z.number().int(),
          node_id: z.string(),
          avatar_url: z.string(),
          gravatar_id: z.string(),
          url: z.string(),
          html_url: z.string(),
          followers_url: z.string(),
          following_url: z.string(),
          gists_url: z.string(),
          starred_url: z.string(),
          subscriptions_url: z.string(),
          organizations_url: z.string(),
          repos_url: z.string(),
          events_url: z.string(),
          received_events_url: z.string(),
          type: z.string(),
          site_admin: z.boolean(),
        })
        .partial()
        .passthrough(),
    ),
    teams: z.array(
      z
        .object({
          id: z.number().int(),
          node_id: z.string(),
          url: z.string(),
          html_url: z.string(),
          name: z.string(),
          slug: z.string(),
          description: z.string().nullable(),
          privacy: z.string(),
          notification_setting: z.string(),
          permission: z.string(),
          members_url: z.string(),
          repositories_url: z.string(),
          parent: z.string().nullable(),
        })
        .partial()
        .passthrough(),
    ),
    apps: z.array(
      z
        .object({
          id: z.number().int(),
          slug: z.string(),
          node_id: z.string(),
          owner: z
            .object({
              login: z.string(),
              id: z.number().int(),
              node_id: z.string(),
              url: z.string(),
              repos_url: z.string(),
              events_url: z.string(),
              hooks_url: z.string(),
              issues_url: z.string(),
              members_url: z.string(),
              public_members_url: z.string(),
              avatar_url: z.string(),
              description: z.string(),
              gravatar_id: z.string(),
              html_url: z.string(),
              followers_url: z.string(),
              following_url: z.string(),
              gists_url: z.string(),
              starred_url: z.string(),
              subscriptions_url: z.string(),
              organizations_url: z.string(),
              received_events_url: z.string(),
              type: z.string(),
              site_admin: z.boolean(),
            })
            .partial()
            .passthrough(),
          name: z.string(),
          description: z.string(),
          external_url: z.string(),
          html_url: z.string(),
          created_at: z.string(),
          updated_at: z.string(),
          permissions: z
            .object({
              metadata: z.string(),
              contents: z.string(),
              issues: z.string(),
              single_file: z.string(),
            })
            .partial()
            .passthrough(),
          events: z.array(z.string()),
        })
        .partial()
        .passthrough(),
    ),
  })
  .passthrough()
const branch_protection = z
  .object({
    url: z.string(),
    enabled: z.boolean(),
    required_status_checks: protected_branch_required_status_check,
    enforce_admins: protected_branch_admin_enforced,
    required_pull_request_reviews: protected_branch_pull_request_review,
    restrictions: branch_restriction_policy,
    required_linear_history: z
      .object({ enabled: z.boolean() })
      .partial()
      .passthrough(),
    allow_force_pushes: z
      .object({ enabled: z.boolean() })
      .partial()
      .passthrough(),
    allow_deletions: z.object({ enabled: z.boolean() }).partial().passthrough(),
    block_creations: z.object({ enabled: z.boolean() }).partial().passthrough(),
    required_conversation_resolution: z
      .object({ enabled: z.boolean() })
      .partial()
      .passthrough(),
    name: z.string(),
    protection_url: z.string(),
    required_signatures: z
      .object({ url: z.string().url(), enabled: z.boolean() })
      .passthrough(),
    lock_branch: z.object({ enabled: z.boolean() }).partial().passthrough(),
    allow_fork_syncing: z
      .object({ enabled: z.boolean() })
      .partial()
      .passthrough(),
  })
  .partial()
  .passthrough()
const short_branch = z
  .object({
    name: z.string(),
    commit: z.object({ sha: z.string(), url: z.string().url() }).passthrough(),
    protected: z.boolean(),
    protection: branch_protection.optional(),
    protection_url: z.string().url().optional(),
  })
  .passthrough()
const nullable_git_user = z
  .object({ name: z.string(), email: z.string(), date: z.string() })
  .partial()
  .passthrough()
const verification = z
  .object({
    verified: z.boolean(),
    reason: z.string(),
    payload: z.string().nullable(),
    signature: z.string().nullable(),
  })
  .passthrough()
const diff_entry = z
  .object({
    sha: z.string(),
    filename: z.string(),
    status: z.enum([
      "added",
      "removed",
      "modified",
      "renamed",
      "copied",
      "changed",
      "unchanged",
    ]),
    additions: z.number().int(),
    deletions: z.number().int(),
    changes: z.number().int(),
    blob_url: z.string().url(),
    raw_url: z.string().url(),
    contents_url: z.string().url(),
    patch: z.string().optional(),
    previous_filename: z.string().optional(),
  })
  .passthrough()
const commit = z
  .object({
    url: z.string().url(),
    sha: z.string(),
    node_id: z.string(),
    html_url: z.string().url(),
    comments_url: z.string().url(),
    commit: z
      .object({
        url: z.string().url(),
        author: nullable_git_user.nullable(),
        committer: nullable_git_user.nullable(),
        message: z.string(),
        comment_count: z.number().int(),
        tree: z
          .object({ sha: z.string(), url: z.string().url() })
          .passthrough(),
        verification: verification.optional(),
      })
      .passthrough(),
    author: nullable_simple_user.nullable(),
    committer: nullable_simple_user.nullable(),
    parents: z.array(
      z
        .object({
          sha: z.string(),
          url: z.string().url(),
          html_url: z.string().url().optional(),
        })
        .passthrough(),
    ),
    stats: z
      .object({
        additions: z.number().int(),
        deletions: z.number().int(),
        total: z.number().int(),
      })
      .partial()
      .passthrough()
      .optional(),
    files: z.array(diff_entry).optional(),
  })
  .passthrough()
const branch_with_protection = z
  .object({
    name: z.string(),
    commit: commit,
    _links: z
      .object({ html: z.string(), self: z.string().url() })
      .passthrough(),
    protected: z.boolean(),
    protection: branch_protection,
    protection_url: z.string().url(),
    pattern: z.string().optional(),
    required_approving_review_count: z.number().int().optional(),
  })
  .passthrough()
const repos_update_branch_protection_Body = z
  .object({
    required_status_checks: z
      .object({
        strict: z.boolean(),
        contexts: z.array(z.string()),
        checks: z
          .array(
            z
              .object({
                context: z.string(),
                app_id: z.number().int().optional(),
              })
              .passthrough(),
          )
          .optional(),
      })
      .passthrough()
      .nullable(),
    enforce_admins: z.boolean().nullable(),
    required_pull_request_reviews: z
      .object({
        dismissal_restrictions: z
          .object({
            users: z.array(z.string()),
            teams: z.array(z.string()),
            apps: z.array(z.string()),
          })
          .partial()
          .passthrough(),
        dismiss_stale_reviews: z.boolean(),
        require_code_owner_reviews: z.boolean(),
        required_approving_review_count: z.number().int(),
        require_last_push_approval: z.boolean(),
        bypass_pull_request_allowances: z
          .object({
            users: z.array(z.string()),
            teams: z.array(z.string()),
            apps: z.array(z.string()),
          })
          .partial()
          .passthrough(),
      })
      .partial()
      .passthrough()
      .nullable(),
    restrictions: z
      .object({
        users: z.array(z.string()),
        teams: z.array(z.string()),
        apps: z.array(z.string()).optional(),
      })
      .passthrough()
      .nullable(),
    required_linear_history: z.boolean().optional(),
    allow_force_pushes: z.boolean().nullish(),
    allow_deletions: z.boolean().optional(),
    block_creations: z.boolean().optional(),
    required_conversation_resolution: z.boolean().optional(),
    lock_branch: z.boolean().optional(),
    allow_fork_syncing: z.boolean().optional(),
  })
  .passthrough()
const status_check_policy = z
  .object({
    url: z.string().url(),
    strict: z.boolean(),
    contexts: z.array(z.string()),
    checks: z.array(
      z
        .object({ context: z.string(), app_id: z.number().int().nullable() })
        .passthrough(),
    ),
    contexts_url: z.string().url(),
  })
  .passthrough()
const protected_branch = z
  .object({
    url: z.string().url(),
    required_status_checks: status_check_policy.optional(),
    required_pull_request_reviews: z
      .object({
        url: z.string().url(),
        dismiss_stale_reviews: z.boolean().optional(),
        require_code_owner_reviews: z.boolean().optional(),
        required_approving_review_count: z.number().int().optional(),
        require_last_push_approval: z.boolean().optional(),
        dismissal_restrictions: z
          .object({
            url: z.string().url(),
            users_url: z.string().url(),
            teams_url: z.string().url(),
            users: z.array(simple_user),
            teams: z.array(team),
            apps: z.array(integration).optional(),
          })
          .passthrough()
          .optional(),
        bypass_pull_request_allowances: z
          .object({
            users: z.array(simple_user),
            teams: z.array(team),
            apps: z.array(integration).optional(),
          })
          .passthrough()
          .optional(),
      })
      .passthrough()
      .optional(),
    required_signatures: z
      .object({ url: z.string().url(), enabled: z.boolean() })
      .passthrough()
      .optional(),
    enforce_admins: z
      .object({ url: z.string().url(), enabled: z.boolean() })
      .optional(),
    required_linear_history: z.object({ enabled: z.boolean() }).optional(),
    allow_force_pushes: z.object({ enabled: z.boolean() }).optional(),
    allow_deletions: z.object({ enabled: z.boolean() }).optional(),
    restrictions: branch_restriction_policy.optional(),
    required_conversation_resolution: z
      .object({ enabled: z.boolean() })
      .partial()
      .optional(),
    block_creations: z.object({ enabled: z.boolean() }).optional(),
    lock_branch: z.object({ enabled: z.boolean() }).partial().optional(),
    allow_fork_syncing: z.object({ enabled: z.boolean() }).partial().optional(),
  })
  .passthrough()
const repos_update_pull_request_review_protection_Body = z
  .object({
    dismissal_restrictions: z
      .object({
        users: z.array(z.string()),
        teams: z.array(z.string()),
        apps: z.array(z.string()),
      })
      .partial()
      .passthrough(),
    dismiss_stale_reviews: z.boolean(),
    require_code_owner_reviews: z.boolean(),
    required_approving_review_count: z.number().int(),
    require_last_push_approval: z.boolean(),
    bypass_pull_request_allowances: z
      .object({
        users: z.array(z.string()),
        teams: z.array(z.string()),
        apps: z.array(z.string()),
      })
      .partial()
      .passthrough(),
  })
  .partial()
  .passthrough()
const repos_update_status_check_protection_Body = z
  .object({
    strict: z.boolean(),
    contexts: z.array(z.string()),
    checks: z.array(
      z
        .object({ context: z.string(), app_id: z.number().int().optional() })
        .passthrough(),
    ),
  })
  .partial()
  .passthrough()
const repos_add_status_check_contexts_Body = z.union([
  z.object({ contexts: z.array(z.string()) }).passthrough(),
  z.array(z.string()),
])
const repos_add_app_access_restrictions_Body = z.union([
  z.object({ apps: z.array(z.string()) }).passthrough(),
  z.array(z.string()),
])
const repos_add_team_access_restrictions_Body = z.union([
  z.object({ teams: z.array(z.string()) }).passthrough(),
  z.array(z.string()),
])
const repos_add_user_access_restrictions_Body = z.union([
  z.object({ users: z.array(z.string()) }).passthrough(),
  z.array(z.string()),
])
const deployment_simple = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    task: z.string(),
    original_environment: z.string().optional(),
    environment: z.string(),
    description: z.string().nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    statuses_url: z.string().url(),
    repository_url: z.string().url(),
    transient_environment: z.boolean().optional(),
    production_environment: z.boolean().optional(),
    performed_via_github_app: nullable_integration.nullish(),
  })
  .passthrough()
const check_run = z
  .object({
    id: z.number().int(),
    head_sha: z.string(),
    node_id: z.string(),
    external_id: z.string().nullable(),
    url: z.string(),
    html_url: z.string().nullable(),
    details_url: z.string().nullable(),
    status: z.enum([
      "queued",
      "in_progress",
      "completed",
      "waiting",
      "requested",
      "pending",
    ]),
    conclusion: z
      .enum([
        "success",
        "failure",
        "neutral",
        "cancelled",
        "skipped",
        "timed_out",
        "action_required",
      ])
      .nullable(),
    started_at: z.string().datetime({ offset: true }).nullable(),
    completed_at: z.string().datetime({ offset: true }).nullable(),
    output: z
      .object({
        title: z.string().nullable(),
        summary: z.string().nullable(),
        text: z.string().nullable(),
        annotations_count: z.number().int(),
        annotations_url: z.string().url(),
      })
      .passthrough(),
    name: z.string(),
    check_suite: z.object({ id: z.number().int() }).passthrough().nullable(),
    app: nullable_integration.nullable(),
    pull_requests: z.array(pull_request_minimal),
    deployment: deployment_simple.optional(),
  })
  .passthrough()
const check_annotation = z
  .object({
    path: z.string(),
    start_line: z.number().int(),
    end_line: z.number().int(),
    start_column: z.number().int().nullable(),
    end_column: z.number().int().nullable(),
    annotation_level: z.string().nullable(),
    title: z.string().nullable(),
    message: z.string().nullable(),
    raw_details: z.string().nullable(),
    blob_href: z.string(),
  })
  .passthrough()
const simple_commit = z
  .object({
    id: z.string(),
    tree_id: z.string(),
    message: z.string(),
    timestamp: z.string().datetime({ offset: true }),
    author: z
      .object({ name: z.string(), email: z.string().email() })
      .passthrough()
      .nullable(),
    committer: z
      .object({ name: z.string(), email: z.string().email() })
      .passthrough()
      .nullable(),
  })
  .passthrough()
const check_suite = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    head_branch: z.string().nullable(),
    head_sha: z.string(),
    status: z
      .enum([
        "queued",
        "in_progress",
        "completed",
        "waiting",
        "requested",
        "pending",
      ])
      .nullable(),
    conclusion: z
      .enum([
        "success",
        "failure",
        "neutral",
        "cancelled",
        "skipped",
        "timed_out",
        "action_required",
        "startup_failure",
        "stale",
        null,
      ])
      .nullable(),
    url: z.string().nullable(),
    before: z.string().nullable(),
    after: z.string().nullable(),
    pull_requests: z.array(pull_request_minimal).nullable(),
    app: nullable_integration.nullable(),
    repository: minimal_repository,
    created_at: z.string().datetime({ offset: true }).nullable(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    head_commit: simple_commit,
    latest_check_runs_count: z.number().int(),
    check_runs_url: z.string(),
    rerequestable: z.boolean().optional(),
    runs_rerequestable: z.boolean().optional(),
  })
  .passthrough()
const checks_set_suites_preferences_Body = z
  .object({
    auto_trigger_checks: z.array(
      z
        .object({
          app_id: z.number().int(),
          setting: z.boolean().default(true),
        })
        .passthrough(),
    ),
  })
  .partial()
  .passthrough()
const check_suite_preference = z
  .object({
    preferences: z
      .object({
        auto_trigger_checks: z.array(
          z
            .object({ app_id: z.number().int(), setting: z.boolean() })
            .passthrough(),
        ),
      })
      .partial()
      .passthrough(),
    repository: minimal_repository,
  })
  .passthrough()
const code_scanning_alert_items = z
  .object({
    number: alert_number.int(),
    created_at: alert_created_at.datetime({ offset: true }),
    updated_at: alert_updated_at.datetime({ offset: true }).optional(),
    url: alert_url.url(),
    html_url: alert_html_url.url(),
    instances_url: alert_instances_url.url(),
    state: code_scanning_alert_state,
    fixed_at: alert_fixed_at.datetime({ offset: true }).nullish(),
    dismissed_by: nullable_simple_user.nullable(),
    dismissed_at: alert_dismissed_at.datetime({ offset: true }).nullable(),
    dismissed_reason: code_scanning_alert_dismissed_reason.nullable(),
    dismissed_comment: code_scanning_alert_dismissed_comment.max(280).nullish(),
    rule: code_scanning_alert_rule_summary,
    tool: code_scanning_analysis_tool,
    most_recent_instance: code_scanning_alert_instance,
  })
  .passthrough()
const code_scanning_alert_rule = z
  .object({
    id: z.string().nullable(),
    name: z.string(),
    severity: z.enum(["none", "note", "warning", "error"]).nullable(),
    security_severity_level: z
      .enum(["low", "medium", "high", "critical"])
      .nullable(),
    description: z.string(),
    full_description: z.string(),
    tags: z.array(z.string()).nullable(),
    help: z.string().nullable(),
    help_uri: z.string().nullable(),
  })
  .partial()
  .passthrough()
const code_scanning_alert = z
  .object({
    number: alert_number.int(),
    created_at: alert_created_at.datetime({ offset: true }),
    updated_at: alert_updated_at.datetime({ offset: true }).optional(),
    url: alert_url.url(),
    html_url: alert_html_url.url(),
    instances_url: alert_instances_url.url(),
    state: code_scanning_alert_state,
    fixed_at: alert_fixed_at.datetime({ offset: true }).nullish(),
    dismissed_by: nullable_simple_user.nullable(),
    dismissed_at: alert_dismissed_at.datetime({ offset: true }).nullable(),
    dismissed_reason: code_scanning_alert_dismissed_reason.nullable(),
    dismissed_comment: code_scanning_alert_dismissed_comment.max(280).nullish(),
    rule: code_scanning_alert_rule,
    tool: code_scanning_analysis_tool,
    most_recent_instance: code_scanning_alert_instance,
  })
  .passthrough()
const code_scanning_alert_set_state = z.enum(["open", "dismissed"])
const code_scanning_update_alert_Body = z
  .object({
    state: code_scanning_alert_set_state,
    dismissed_reason: code_scanning_alert_dismissed_reason.nullish(),
    dismissed_comment: code_scanning_alert_dismissed_comment.max(280).nullish(),
  })
  .passthrough()
const code_scanning_analysis_commit_sha = z.string()
const code_scanning_analysis_environment = z.string()
const code_scanning_analysis_created_at = z.string()
const code_scanning_analysis_url = z.string()
const code_scanning_analysis_sarif_id = z.string()
const code_scanning_analysis = z
  .object({
    ref: code_scanning_ref,
    commit_sha: code_scanning_analysis_commit_sha
      .min(40)
      .max(40)
      .regex(/^[0-9a-fA-F]+$/),
    analysis_key: code_scanning_analysis_analysis_key,
    environment: code_scanning_analysis_environment,
    category: code_scanning_analysis_category.optional(),
    error: z.string(),
    created_at: code_scanning_analysis_created_at.datetime({ offset: true }),
    results_count: z.number().int(),
    rules_count: z.number().int(),
    id: z.number().int(),
    url: code_scanning_analysis_url.url(),
    sarif_id: code_scanning_analysis_sarif_id,
    tool: code_scanning_analysis_tool,
    deletable: z.boolean(),
    warning: z.string(),
  })
  .passthrough()
const code_scanning_analysis_deletion = z
  .object({
    next_analysis_url: z.string().url().nullable(),
    confirm_delete_url: z.string().url().nullable(),
  })
  .passthrough()
const code_scanning_codeql_database = z
  .object({
    id: z.number().int(),
    name: z.string(),
    language: z.string(),
    uploader: simple_user,
    content_type: z.string(),
    size: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    url: z.string().url(),
    commit_oid: z.string().nullish(),
  })
  .passthrough()
const code_scanning_default_setup = z
  .object({
    state: z.enum(["configured", "not-configured"]),
    languages: z.array(
      z.enum([
        "c-cpp",
        "csharp",
        "go",
        "java-kotlin",
        "javascript-typescript",
        "javascript",
        "python",
        "ruby",
        "typescript",
        "swift",
      ]),
    ),
    query_suite: z.enum(["default", "extended"]),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    schedule: z.literal("weekly").nullable(),
  })
  .partial()
  .passthrough()
const code_scanning_default_setup_update = z
  .object({
    state: z.enum(["configured", "not-configured"]),
    query_suite: z.enum(["default", "extended"]),
    languages: z.array(
      z.enum([
        "c-cpp",
        "csharp",
        "go",
        "java-kotlin",
        "javascript-typescript",
        "python",
        "ruby",
        "swift",
      ]),
    ),
  })
  .partial()
const code_scanning_default_setup_update_response = z
  .object({ run_id: z.number().int(), run_url: z.string() })
  .partial()
  .passthrough()
const code_scanning_ref_full = z.string()
const code_scanning_analysis_sarif_file = z.string()
const code_scanning_upload_sarif_Body = z.object({
  commit_sha: code_scanning_analysis_commit_sha
    .min(40)
    .max(40)
    .regex(/^[0-9a-fA-F]+$/),
  ref: code_scanning_ref_full,
  sarif: code_scanning_analysis_sarif_file,
  checkout_uri: z.string().url().optional(),
  started_at: z.string().datetime({ offset: true }).optional(),
  tool_name: z.string().optional(),
  validate: z.boolean().optional(),
})
const code_scanning_sarifs_receipt = z
  .object({ id: code_scanning_analysis_sarif_id, url: z.string().url() })
  .partial()
  .passthrough()
const code_scanning_sarifs_status = z
  .object({
    processing_status: z.enum(["pending", "complete", "failed"]),
    analyses_url: z.string().url().nullable(),
    errors: z.array(z.string()).nullable(),
  })
  .partial()
  .passthrough()
const codeowners_errors = z
  .object({
    errors: z.array(
      z
        .object({
          line: z.number().int(),
          column: z.number().int(),
          source: z.string().optional(),
          kind: z.string(),
          suggestion: z.string().nullish(),
          message: z.string(),
          path: z.string(),
        })
        .passthrough(),
    ),
  })
  .passthrough()
const codespaces_create_with_repo_for_authenticated_user_Body = z
  .object({
    ref: z.string(),
    location: z.string(),
    geo: z.enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]),
    client_ip: z.string(),
    machine: z.string(),
    devcontainer_path: z.string(),
    multi_repo_permissions_opt_out: z.boolean(),
    working_directory: z.string(),
    idle_timeout_minutes: z.number().int(),
    display_name: z.string(),
    retention_period_minutes: z.number().int(),
  })
  .partial()
  .passthrough()
const codespace_machine = z
  .object({
    name: z.string(),
    display_name: z.string(),
    operating_system: z.string(),
    storage_in_bytes: z.number().int(),
    memory_in_bytes: z.number().int(),
    cpus: z.number().int(),
    prebuild_availability: z.enum(["none", "ready", "in_progress"]).nullable(),
  })
  .passthrough()
const codespaces_permissions_check_for_devcontainer = z
  .object({ accepted: z.boolean() })
  .passthrough()
const repo_codespaces_secret = z
  .object({
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const collaborator = z
  .object({
    login: z.string(),
    id: z.number().int(),
    email: z.string().nullish(),
    name: z.string().nullish(),
    node_id: z.string(),
    avatar_url: z.string().url(),
    gravatar_id: z.string().nullable(),
    url: z.string().url(),
    html_url: z.string().url(),
    followers_url: z.string().url(),
    following_url: z.string(),
    gists_url: z.string(),
    starred_url: z.string(),
    subscriptions_url: z.string().url(),
    organizations_url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string(),
    received_events_url: z.string().url(),
    type: z.string(),
    site_admin: z.boolean(),
    permissions: z
      .object({
        pull: z.boolean(),
        triage: z.boolean().optional(),
        push: z.boolean(),
        maintain: z.boolean().optional(),
        admin: z.boolean(),
      })
      .passthrough()
      .optional(),
    role_name: z.string(),
  })
  .passthrough()
const repository_invitation = z
  .object({
    id: z.number().int(),
    repository: minimal_repository,
    invitee: nullable_simple_user.nullable(),
    inviter: nullable_simple_user.nullable(),
    permissions: z.enum(["read", "write", "admin", "triage", "maintain"]),
    created_at: z.string().datetime({ offset: true }),
    expired: z.boolean().optional(),
    url: z.string(),
    html_url: z.string(),
    node_id: z.string(),
  })
  .passthrough()
const nullable_collaborator = z
  .object({
    login: z.string(),
    id: z.number().int(),
    email: z.string().nullish(),
    name: z.string().nullish(),
    node_id: z.string(),
    avatar_url: z.string().url(),
    gravatar_id: z.string().nullable(),
    url: z.string().url(),
    html_url: z.string().url(),
    followers_url: z.string().url(),
    following_url: z.string(),
    gists_url: z.string(),
    starred_url: z.string(),
    subscriptions_url: z.string().url(),
    organizations_url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string(),
    received_events_url: z.string().url(),
    type: z.string(),
    site_admin: z.boolean(),
    permissions: z
      .object({
        pull: z.boolean(),
        triage: z.boolean().optional(),
        push: z.boolean(),
        maintain: z.boolean().optional(),
        admin: z.boolean(),
      })
      .passthrough()
      .optional(),
    role_name: z.string(),
  })
  .passthrough()
const repository_collaborator_permission = z
  .object({
    permission: z.string(),
    role_name: z.string(),
    user: nullable_collaborator.nullable(),
  })
  .passthrough()
const commit_comment = z
  .object({
    html_url: z.string().url(),
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    body: z.string(),
    path: z.string().nullable(),
    position: z.number().int().nullable(),
    line: z.number().int().nullable(),
    commit_id: z.string(),
    user: nullable_simple_user.nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    author_association: author_association,
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const branch_short = z
  .object({
    name: z.string(),
    commit: z.object({ sha: z.string(), url: z.string() }).passthrough(),
    protected: z.boolean(),
  })
  .passthrough()
const repos_create_commit_comment_Body = z
  .object({
    body: z.string(),
    path: z.string().optional(),
    position: z.number().int().optional(),
    line: z.number().int().optional(),
  })
  .passthrough()
const link = z.object({ href: z.string() }).passthrough()
const auto_merge = z
  .object({
    enabled_by: simple_user,
    merge_method: z.enum(["merge", "squash", "rebase"]),
    commit_title: z.string(),
    commit_message: z.string(),
  })
  .passthrough()
const pull_request_simple = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    html_url: z.string().url(),
    diff_url: z.string().url(),
    patch_url: z.string().url(),
    issue_url: z.string().url(),
    commits_url: z.string().url(),
    review_comments_url: z.string().url(),
    review_comment_url: z.string(),
    comments_url: z.string().url(),
    statuses_url: z.string().url(),
    number: z.number().int(),
    state: z.string(),
    locked: z.boolean(),
    title: z.string(),
    user: nullable_simple_user.nullable(),
    body: z.string().nullable(),
    labels: z.array(
      z
        .object({
          id: z.number().int(),
          node_id: z.string(),
          url: z.string(),
          name: z.string(),
          description: z.string(),
          color: z.string(),
          default: z.boolean(),
        })
        .passthrough(),
    ),
    milestone: nullable_milestone.nullable(),
    active_lock_reason: z.string().nullish(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    closed_at: z.string().datetime({ offset: true }).nullable(),
    merged_at: z.string().datetime({ offset: true }).nullable(),
    merge_commit_sha: z.string().nullable(),
    assignee: nullable_simple_user.nullable(),
    assignees: z.array(simple_user).nullish(),
    requested_reviewers: z.array(simple_user).nullish(),
    requested_teams: z.array(team).nullish(),
    head: z
      .object({
        label: z.string(),
        ref: z.string(),
        repo: repository,
        sha: z.string(),
        user: nullable_simple_user.nullable(),
      })
      .passthrough(),
    base: z
      .object({
        label: z.string(),
        ref: z.string(),
        repo: repository,
        sha: z.string(),
        user: nullable_simple_user.nullable(),
      })
      .passthrough(),
    _links: z
      .object({
        comments: link,
        commits: link,
        statuses: link,
        html: link,
        issue: link,
        review_comments: link,
        review_comment: link,
        self: link,
      })
      .passthrough(),
    author_association: author_association,
    auto_merge: auto_merge.nullable(),
    draft: z.boolean().optional(),
  })
  .passthrough()
const simple_commit_status = z
  .object({
    description: z.string().nullable(),
    id: z.number().int(),
    node_id: z.string(),
    state: z.string(),
    context: z.string(),
    target_url: z.string().url().nullable(),
    required: z.boolean().nullish(),
    avatar_url: z.string().url().nullable(),
    url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const combined_commit_status = z
  .object({
    state: z.string(),
    statuses: z.array(simple_commit_status),
    sha: z.string(),
    total_count: z.number().int(),
    repository: minimal_repository,
    commit_url: z.string().url(),
    url: z.string().url(),
  })
  .passthrough()
const status = z
  .object({
    url: z.string(),
    avatar_url: z.string().nullable(),
    id: z.number().int(),
    node_id: z.string(),
    state: z.string(),
    description: z.string().nullable(),
    target_url: z.string().nullable(),
    context: z.string(),
    created_at: z.string(),
    updated_at: z.string(),
    creator: nullable_simple_user.nullable(),
  })
  .passthrough()
const nullable_code_of_conduct_simple = z
  .object({
    url: z.string().url(),
    key: z.string(),
    name: z.string(),
    html_url: z.string().url().nullable(),
  })
  .passthrough()
const nullable_community_health_file = z
  .object({ url: z.string().url(), html_url: z.string().url() })
  .passthrough()
const community_profile = z
  .object({
    health_percentage: z.number().int(),
    description: z.string().nullable(),
    documentation: z.string().nullable(),
    files: z
      .object({
        code_of_conduct: nullable_code_of_conduct_simple.nullable(),
        code_of_conduct_file: nullable_community_health_file.nullable(),
        license: nullable_license_simple.nullable(),
        contributing: nullable_community_health_file.nullable(),
        readme: nullable_community_health_file.nullable(),
        issue_template: nullable_community_health_file.nullable(),
        pull_request_template: nullable_community_health_file.nullable(),
      })
      .passthrough(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    content_reports_enabled: z.boolean().optional(),
  })
  .passthrough()
const commit_comparison = z
  .object({
    url: z.string().url(),
    html_url: z.string().url(),
    permalink_url: z.string().url(),
    diff_url: z.string().url(),
    patch_url: z.string().url(),
    base_commit: commit,
    merge_base_commit: commit,
    status: z.enum(["diverged", "ahead", "behind", "identical"]),
    ahead_by: z.number().int(),
    behind_by: z.number().int(),
    total_commits: z.number().int(),
    commits: z.array(commit),
    files: z.array(diff_entry).optional(),
  })
  .passthrough()
const content_directory = z.array(
  z
    .object({
      type: z.enum(["dir", "file", "submodule", "symlink"]),
      size: z.number().int(),
      name: z.string(),
      path: z.string(),
      content: z.string().optional(),
      sha: z.string(),
      url: z.string().url(),
      git_url: z.string().url().nullable(),
      html_url: z.string().url().nullable(),
      download_url: z.string().url().nullable(),
      _links: z
        .object({
          git: z.string().url().nullable(),
          html: z.string().url().nullable(),
          self: z.string().url(),
        })
        .passthrough(),
    })
    .passthrough(),
)
const content_file = z
  .object({
    type: z.literal("file"),
    encoding: z.string(),
    size: z.number().int(),
    name: z.string(),
    path: z.string(),
    content: z.string(),
    sha: z.string(),
    url: z.string().url(),
    git_url: z.string().url().nullable(),
    html_url: z.string().url().nullable(),
    download_url: z.string().url().nullable(),
    _links: z
      .object({
        git: z.string().url().nullable(),
        html: z.string().url().nullable(),
        self: z.string().url(),
      })
      .passthrough(),
    target: z.string().optional(),
    submodule_git_url: z.string().optional(),
  })
  .passthrough()
const content_symlink = z
  .object({
    type: z.literal("symlink"),
    target: z.string(),
    size: z.number().int(),
    name: z.string(),
    path: z.string(),
    sha: z.string(),
    url: z.string().url(),
    git_url: z.string().url().nullable(),
    html_url: z.string().url().nullable(),
    download_url: z.string().url().nullable(),
    _links: z
      .object({
        git: z.string().url().nullable(),
        html: z.string().url().nullable(),
        self: z.string().url(),
      })
      .passthrough(),
  })
  .passthrough()
const content_submodule = z
  .object({
    type: z.literal("submodule"),
    submodule_git_url: z.string().url(),
    size: z.number().int(),
    name: z.string(),
    path: z.string(),
    sha: z.string(),
    url: z.string().url(),
    git_url: z.string().url().nullable(),
    html_url: z.string().url().nullable(),
    download_url: z.string().url().nullable(),
    _links: z
      .object({
        git: z.string().url().nullable(),
        html: z.string().url().nullable(),
        self: z.string().url(),
      })
      .passthrough(),
  })
  .passthrough()
const repos_create_or_update_file_contents_Body = z
  .object({
    message: z.string(),
    content: z.string(),
    sha: z.string().optional(),
    branch: z.string().optional(),
    committer: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().optional(),
      })
      .passthrough()
      .optional(),
    author: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().optional(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const file_commit = z
  .object({
    content: z
      .object({
        name: z.string(),
        path: z.string(),
        sha: z.string(),
        size: z.number().int(),
        url: z.string(),
        html_url: z.string(),
        git_url: z.string(),
        download_url: z.string(),
        type: z.string(),
        _links: z
          .object({ self: z.string(), git: z.string(), html: z.string() })
          .partial()
          .passthrough(),
      })
      .partial()
      .passthrough()
      .nullable(),
    commit: z
      .object({
        sha: z.string(),
        node_id: z.string(),
        url: z.string(),
        html_url: z.string(),
        author: z
          .object({ date: z.string(), name: z.string(), email: z.string() })
          .partial()
          .passthrough(),
        committer: z
          .object({ date: z.string(), name: z.string(), email: z.string() })
          .partial()
          .passthrough(),
        message: z.string(),
        tree: z
          .object({ url: z.string(), sha: z.string() })
          .partial()
          .passthrough(),
        parents: z.array(
          z
            .object({ url: z.string(), html_url: z.string(), sha: z.string() })
            .partial()
            .passthrough(),
        ),
        verification: z
          .object({
            verified: z.boolean(),
            reason: z.string(),
            signature: z.string().nullable(),
            payload: z.string().nullable(),
          })
          .partial()
          .passthrough(),
      })
      .partial()
      .passthrough(),
  })
  .passthrough()
const repos_delete_file_Body = z
  .object({
    message: z.string(),
    sha: z.string(),
    branch: z.string().optional(),
    committer: z
      .object({ name: z.string(), email: z.string() })
      .partial()
      .passthrough()
      .optional(),
    author: z
      .object({ name: z.string(), email: z.string() })
      .partial()
      .passthrough()
      .optional(),
  })
  .passthrough()
const contributor = z
  .object({
    login: z.string().optional(),
    id: z.number().int().optional(),
    node_id: z.string().optional(),
    avatar_url: z.string().url().optional(),
    gravatar_id: z.string().nullish(),
    url: z.string().url().optional(),
    html_url: z.string().url().optional(),
    followers_url: z.string().url().optional(),
    following_url: z.string().optional(),
    gists_url: z.string().optional(),
    starred_url: z.string().optional(),
    subscriptions_url: z.string().url().optional(),
    organizations_url: z.string().url().optional(),
    repos_url: z.string().url().optional(),
    events_url: z.string().optional(),
    received_events_url: z.string().url().optional(),
    type: z.string(),
    site_admin: z.boolean().optional(),
    contributions: z.number().int(),
    email: z.string().optional(),
    name: z.string().optional(),
  })
  .passthrough()
const dependabot_alert = z.object({
  number: alert_number.int(),
  state: z.enum(["auto_dismissed", "dismissed", "fixed", "open"]),
  dependency: z
    .object({
      package: dependabot_alert_package,
      manifest_path: z.string(),
      scope: z.enum(["development", "runtime"]).nullable(),
    })
    .partial()
    .passthrough(),
  security_advisory: dependabot_alert_security_advisory,
  security_vulnerability: dependabot_alert_security_vulnerability,
  url: alert_url.url(),
  html_url: alert_html_url.url(),
  created_at: alert_created_at.datetime({ offset: true }),
  updated_at: alert_updated_at.datetime({ offset: true }),
  dismissed_at: alert_dismissed_at.datetime({ offset: true }).nullable(),
  dismissed_by: nullable_simple_user.nullable(),
  dismissed_reason: z
    .enum([
      "fix_started",
      "inaccurate",
      "no_bandwidth",
      "not_used",
      "tolerable_risk",
    ])
    .nullable(),
  dismissed_comment: z.string().max(280).nullable(),
  fixed_at: alert_fixed_at.datetime({ offset: true }).nullable(),
  auto_dismissed_at: alert_auto_dismissed_at
    .datetime({ offset: true })
    .nullish(),
})
const dependabot_update_alert_Body = z.object({
  state: z.enum(["dismissed", "open"]),
  dismissed_reason: z
    .enum([
      "fix_started",
      "inaccurate",
      "no_bandwidth",
      "not_used",
      "tolerable_risk",
    ])
    .optional(),
  dismissed_comment: z.string().max(280).optional(),
})
const dependabot_secret = z
  .object({
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const dependency_graph_diff = z.array(
  z
    .object({
      change_type: z.enum(["added", "removed"]),
      manifest: z.string(),
      ecosystem: z.string(),
      name: z.string(),
      version: z.string(),
      package_url: z.string().nullable(),
      license: z.string().nullable(),
      source_repository_url: z.string().nullable(),
      vulnerabilities: z.array(
        z
          .object({
            severity: z.string(),
            advisory_ghsa_id: z.string(),
            advisory_summary: z.string(),
            advisory_url: z.string(),
          })
          .passthrough(),
      ),
      scope: z.enum(["unknown", "runtime", "development"]),
    })
    .passthrough(),
)
const dependency_graph_spdx_sbom = z
  .object({
    sbom: z
      .object({
        SPDXID: z.string(),
        spdxVersion: z.string(),
        creationInfo: z
          .object({ created: z.string(), creators: z.array(z.string()) })
          .passthrough(),
        name: z.string(),
        dataLicense: z.string(),
        documentDescribes: z.array(z.string()),
        documentNamespace: z.string(),
        packages: z.array(
          z
            .object({
              SPDXID: z.string(),
              name: z.string(),
              versionInfo: z.string(),
              downloadLocation: z.string(),
              filesAnalyzed: z.boolean(),
              licenseConcluded: z.string(),
              licenseDeclared: z.string(),
              supplier: z.string(),
              externalRefs: z.array(
                z
                  .object({
                    referenceCategory: z.string(),
                    referenceLocator: z.string(),
                    referenceType: z.string(),
                  })
                  .passthrough(),
              ),
            })
            .partial()
            .passthrough(),
        ),
      })
      .passthrough(),
  })
  .passthrough()
const metadata = z.record(
  z.union([z.string(), z.number(), z.boolean()]).nullable(),
)
const dependency = z
  .object({
    package_url: z.string().regex(/^pkg/),
    metadata: metadata,
    relationship: z.enum(["direct", "indirect"]),
    scope: z.enum(["runtime", "development"]),
    dependencies: z.array(z.string()),
  })
  .partial()
const manifest = z.object({
  name: z.string(),
  file: z.object({ source_location: z.string() }).partial().optional(),
  metadata: metadata.optional(),
  resolved: z.record(dependency).optional(),
})
const snapshot = z.object({
  version: z.number().int(),
  job: z.object({
    id: z.string(),
    correlator: z.string(),
    html_url: z.string().optional(),
  }),
  sha: z.string().min(40).max(40),
  ref: z.string(),
  detector: z.object({
    name: z.string(),
    version: z.string(),
    url: z.string(),
  }),
  metadata: metadata.optional(),
  manifests: z.record(manifest).optional(),
  scanned: z.string().datetime({ offset: true }),
})
const repos_create_deployment_Body = z
  .object({
    ref: z.string(),
    task: z.string().optional().default("deploy"),
    auto_merge: z.boolean().optional().default(true),
    required_contexts: z.array(z.string()).optional(),
    payload: z
      .union([z.object({}).partial().passthrough(), z.string()])
      .optional(),
    environment: z.string().optional().default("production"),
    description: z.string().nullish(),
    transient_environment: z.boolean().optional(),
    production_environment: z.boolean().optional(),
  })
  .passthrough()
const deployment_status = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    state: z.enum([
      "error",
      "failure",
      "inactive",
      "pending",
      "success",
      "queued",
      "in_progress",
    ]),
    creator: nullable_simple_user.nullable(),
    description: z.string().max(140),
    environment: z.string().optional(),
    target_url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    deployment_url: z.string().url(),
    repository_url: z.string().url(),
    environment_url: z.string().url().optional(),
    log_url: z.string().url().optional(),
    performed_via_github_app: nullable_integration.nullish(),
  })
  .passthrough()
const repos_create_deployment_status_Body = z
  .object({
    state: z.enum([
      "error",
      "failure",
      "inactive",
      "in_progress",
      "queued",
      "pending",
      "success",
    ]),
    target_url: z.string().optional(),
    log_url: z.string().optional(),
    description: z.string().optional(),
    environment: z.string().optional(),
    environment_url: z.string().optional(),
    auto_inactive: z.boolean().optional(),
  })
  .passthrough()
const repos_create_dispatch_event_Body = z
  .object({
    event_type: z.string().min(1).max(100),
    client_payload: z.object({}).partial().passthrough().optional(),
  })
  .passthrough()
const wait_timer = z.number()
const deployment_branch_policy_settings = z
  .object({
    protected_branches: z.boolean(),
    custom_branch_policies: z.boolean(),
  })
  .passthrough()
const environment = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    url: z.string(),
    html_url: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    protection_rules: z
      .array(
        z.union([
          z
            .object({
              id: z.number().int(),
              node_id: z.string(),
              type: z.string(),
              wait_timer: wait_timer.int().optional(),
            })
            .passthrough(),
          z
            .object({
              id: z.number().int(),
              node_id: z.string(),
              prevent_self_review: z.boolean().optional(),
              type: z.string(),
              reviewers: z
                .array(
                  z
                    .object({
                      type: deployment_reviewer_type,
                      reviewer: z.union([simple_user, team]),
                    })
                    .partial()
                    .passthrough(),
                )
                .optional(),
            })
            .passthrough(),
          z
            .object({
              id: z.number().int(),
              node_id: z.string(),
              type: z.string(),
            })
            .passthrough(),
        ]),
      )
      .optional(),
    deployment_branch_policy: deployment_branch_policy_settings.nullish(),
  })
  .passthrough()
const prevent_self_review = z.boolean()
const repos_create_or_update_environment_Body = z
  .object({
    wait_timer: wait_timer.int(),
    prevent_self_review: prevent_self_review,
    reviewers: z
      .array(
        z
          .object({ type: deployment_reviewer_type, id: z.number().int() })
          .partial()
          .passthrough(),
      )
      .nullable(),
    deployment_branch_policy: deployment_branch_policy_settings.nullable(),
  })
  .partial()
const deployment_branch_policy = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    type: z.enum(["branch", "tag"]),
  })
  .partial()
  .passthrough()
const deployment_branch_policy_name_pattern_with_type = z
  .object({ name: z.string(), type: z.enum(["branch", "tag"]).optional() })
  .passthrough()
const deployment_branch_policy_name_pattern = z
  .object({ name: z.string() })
  .passthrough()
const custom_deployment_rule_app = z
  .object({
    id: z.number().int(),
    slug: z.string(),
    integration_url: z.string(),
    node_id: z.string(),
  })
  .passthrough()
const deployment_protection_rule = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    enabled: z.boolean(),
    app: custom_deployment_rule_app,
  })
  .passthrough()
const actions_create_or_update_environment_secret_Body = z
  .object({
    encrypted_value: z
      .string()
      .regex(
        /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/,
      ),
    key_id: z.string(),
  })
  .passthrough()
const repos_create_fork_Body = z
  .object({
    organization: z.string(),
    name: z.string(),
    default_branch_only: z.boolean(),
  })
  .partial()
  .passthrough()
const git_create_blob_Body = z
  .object({
    content: z.string(),
    encoding: z.string().optional().default("utf-8"),
  })
  .passthrough()
const short_blob = z.object({ url: z.string(), sha: z.string() }).passthrough()
const blob = z
  .object({
    content: z.string(),
    encoding: z.string(),
    url: z.string().url(),
    sha: z.string(),
    size: z.number().int().nullable(),
    node_id: z.string(),
    highlighted_content: z.string().optional(),
  })
  .passthrough()
const git_create_commit_Body = z
  .object({
    message: z.string(),
    tree: z.string(),
    parents: z.array(z.string()).optional(),
    author: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .passthrough()
      .optional(),
    committer: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().datetime({ offset: true }),
      })
      .partial()
      .passthrough()
      .optional(),
    signature: z.string().optional(),
  })
  .passthrough()
const git_commit = z
  .object({
    sha: z.string(),
    node_id: z.string(),
    url: z.string().url(),
    author: z
      .object({
        date: z.string().datetime({ offset: true }),
        email: z.string(),
        name: z.string(),
      })
      .passthrough(),
    committer: z
      .object({
        date: z.string().datetime({ offset: true }),
        email: z.string(),
        name: z.string(),
      })
      .passthrough(),
    message: z.string(),
    tree: z.object({ sha: z.string(), url: z.string().url() }).passthrough(),
    parents: z.array(
      z
        .object({
          sha: z.string(),
          url: z.string().url(),
          html_url: z.string().url(),
        })
        .passthrough(),
    ),
    verification: z
      .object({
        verified: z.boolean(),
        reason: z.string(),
        signature: z.string().nullable(),
        payload: z.string().nullable(),
      })
      .passthrough(),
    html_url: z.string().url(),
  })
  .passthrough()
const git_ref = z
  .object({
    ref: z.string(),
    node_id: z.string(),
    url: z.string().url(),
    object: z
      .object({
        type: z.string(),
        sha: z.string().min(40).max(40),
        url: z.string().url(),
      })
      .passthrough(),
  })
  .passthrough()
const git_create_ref_Body = z
  .object({ ref: z.string(), sha: z.string() })
  .passthrough()
const git_update_ref_Body = z
  .object({ sha: z.string(), force: z.boolean().optional() })
  .passthrough()
const git_create_tag_Body = z
  .object({
    tag: z.string(),
    message: z.string(),
    object: z.string(),
    type: z.enum(["commit", "tree", "blob"]),
    tagger: z
      .object({
        name: z.string(),
        email: z.string(),
        date: z.string().datetime({ offset: true }).optional(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const git_tag = z
  .object({
    node_id: z.string(),
    tag: z.string(),
    sha: z.string(),
    url: z.string().url(),
    message: z.string(),
    tagger: z
      .object({ date: z.string(), email: z.string(), name: z.string() })
      .passthrough(),
    object: z
      .object({ sha: z.string(), type: z.string(), url: z.string().url() })
      .passthrough(),
    verification: verification.optional(),
  })
  .passthrough()
const git_create_tree_Body = z
  .object({
    tree: z.array(
      z
        .object({
          path: z.string(),
          mode: z.enum(["100644", "100755", "040000", "160000", "120000"]),
          type: z.enum(["blob", "tree", "commit"]),
          sha: z.string().nullable(),
          content: z.string(),
        })
        .partial()
        .passthrough(),
    ),
    base_tree: z.string().optional(),
  })
  .passthrough()
const git_tree = z
  .object({
    sha: z.string(),
    url: z.string().url(),
    truncated: z.boolean(),
    tree: z.array(
      z
        .object({
          path: z.string(),
          mode: z.string(),
          type: z.string(),
          sha: z.string(),
          size: z.number().int(),
          url: z.string(),
        })
        .partial()
        .passthrough(),
    ),
  })
  .passthrough()
const hook_response = z
  .object({
    code: z.number().int().nullable(),
    status: z.string().nullable(),
    message: z.string().nullable(),
  })
  .passthrough()
const hook = z
  .object({
    type: z.string(),
    id: z.number().int(),
    name: z.string(),
    active: z.boolean(),
    events: z.array(z.string()),
    config: webhook_config,
    updated_at: z.string().datetime({ offset: true }),
    created_at: z.string().datetime({ offset: true }),
    url: z.string().url(),
    test_url: z.string().url(),
    ping_url: z.string().url(),
    deliveries_url: z.string().url().optional(),
    last_response: hook_response,
  })
  .passthrough()
const repos_create_webhook_Body = z
  .object({
    name: z.string(),
    config: z
      .object({
        url: webhook_config_url.url(),
        content_type: webhook_config_content_type,
        secret: webhook_config_secret,
        insecure_ssl: webhook_config_insecure_ssl,
      })
      .partial()
      .passthrough(),
    events: z.array(z.string()).default(["push"]),
    active: z.boolean().default(true),
  })
  .partial()
const repos_update_webhook_Body = z
  .object({
    config: webhook_config,
    events: z.array(z.string()).default(["push"]),
    add_events: z.array(z.string()),
    remove_events: z.array(z.string()),
    active: z.boolean().default(true),
  })
  .partial()
  .passthrough()
const repos_update_webhook_config_for_repo_Body = z
  .object({
    url: webhook_config_url.url(),
    content_type: webhook_config_content_type,
    secret: webhook_config_secret,
    insecure_ssl: webhook_config_insecure_ssl,
  })
  .partial()
const repos_update_invitation_Body = z
  .object({
    permissions: z.enum(["read", "write", "maintain", "triage", "admin"]),
  })
  .partial()
  .passthrough()
const issues_create_Body = z
  .object({
    title: z.union([z.string(), z.number()]),
    body: z.string().optional(),
    assignee: z.string().nullish(),
    milestone: z.union([z.string(), z.number()]).nullish(),
    labels: z
      .array(
        z.union([
          z.string(),
          z
            .object({
              id: z.number().int(),
              name: z.string(),
              description: z.string().nullable(),
              color: z.string().nullable(),
            })
            .partial()
            .passthrough(),
        ]),
      )
      .optional(),
    assignees: z.array(z.string()).optional(),
  })
  .passthrough()
const nullable_issue = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    repository_url: z.string().url(),
    labels_url: z.string(),
    comments_url: z.string().url(),
    events_url: z.string().url(),
    html_url: z.string().url(),
    number: z.number().int(),
    state: z.string(),
    state_reason: z.enum(["completed", "reopened", "not_planned"]).nullish(),
    title: z.string(),
    body: z.string().nullish(),
    user: nullable_simple_user.nullable(),
    labels: z.array(
      z.union([
        z.string(),
        z
          .object({
            id: z.number().int(),
            node_id: z.string(),
            url: z.string().url(),
            name: z.string(),
            description: z.string().nullable(),
            color: z.string().nullable(),
            default: z.boolean(),
          })
          .partial()
          .passthrough(),
      ]),
    ),
    assignee: nullable_simple_user.nullable(),
    assignees: z.array(simple_user).nullish(),
    milestone: nullable_milestone.nullable(),
    locked: z.boolean(),
    active_lock_reason: z.string().nullish(),
    comments: z.number().int(),
    pull_request: z
      .object({
        merged_at: z.string().datetime({ offset: true }).nullish(),
        diff_url: z.string().url().nullable(),
        html_url: z.string().url().nullable(),
        patch_url: z.string().url().nullable(),
        url: z.string().url().nullable(),
      })
      .passthrough()
      .optional(),
    closed_at: z.string().datetime({ offset: true }).nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    draft: z.boolean().optional(),
    closed_by: nullable_simple_user.nullish(),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
    timeline_url: z.string().url().optional(),
    repository: repository.optional(),
    performed_via_github_app: nullable_integration.nullish(),
    author_association: author_association,
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const issue_event_label = z
  .object({ name: z.string().nullable(), color: z.string().nullable() })
  .passthrough()
const issue_event_dismissed_review = z
  .object({
    state: z.string(),
    review_id: z.number().int(),
    dismissal_message: z.string().nullable(),
    dismissal_commit_id: z.string().nullish(),
  })
  .passthrough()
const issue_event_milestone = z.object({ title: z.string() }).passthrough()
const issue_event_project_card = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    project_url: z.string().url(),
    project_id: z.number().int(),
    column_name: z.string(),
    previous_column_name: z.string().optional(),
  })
  .passthrough()
const issue_event_rename = z
  .object({ from: z.string(), to: z.string() })
  .passthrough()
const issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    actor: nullable_simple_user.nullable(),
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string().datetime({ offset: true }),
    issue: nullable_issue.nullish(),
    label: issue_event_label.optional(),
    assignee: nullable_simple_user.nullish(),
    assigner: nullable_simple_user.nullish(),
    review_requester: nullable_simple_user.nullish(),
    requested_reviewer: nullable_simple_user.nullish(),
    requested_team: team.optional(),
    dismissed_review: issue_event_dismissed_review.optional(),
    milestone: issue_event_milestone.optional(),
    project_card: issue_event_project_card.optional(),
    rename: issue_event_rename.optional(),
    author_association: author_association.optional(),
    lock_reason: z.string().nullish(),
    performed_via_github_app: nullable_integration.nullish(),
  })
  .passthrough()
const issues_update_Body = z
  .object({
    title: z.union([z.string(), z.number()]).nullable(),
    body: z.string().nullable(),
    assignee: z.string().nullable(),
    state: z.enum(["open", "closed"]),
    state_reason: z.enum(["completed", "not_planned", "reopened"]).nullable(),
    milestone: z.union([z.string(), z.number()]).nullable(),
    labels: z.array(
      z.union([
        z.string(),
        z
          .object({
            id: z.number().int(),
            name: z.string(),
            description: z.string().nullable(),
            color: z.string().nullable(),
          })
          .partial()
          .passthrough(),
      ]),
    ),
    assignees: z.array(z.string()),
  })
  .partial()
  .passthrough()
const issues_add_assignees_Body = z
  .object({ assignees: z.array(z.string()) })
  .partial()
  .passthrough()
const labeled_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    label: z.object({ name: z.string(), color: z.string() }).passthrough(),
  })
  .passthrough()
const unlabeled_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    label: z.object({ name: z.string(), color: z.string() }).passthrough(),
  })
  .passthrough()
const assigned_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: integration,
    assignee: simple_user,
    assigner: simple_user,
  })
  .passthrough()
const unassigned_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    assignee: simple_user,
    assigner: simple_user,
  })
  .passthrough()
const milestoned_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    milestone: z.object({ title: z.string() }).passthrough(),
  })
  .passthrough()
const demilestoned_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    milestone: z.object({ title: z.string() }).passthrough(),
  })
  .passthrough()
const renamed_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    rename: z.object({ from: z.string(), to: z.string() }).passthrough(),
  })
  .passthrough()
const review_requested_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    review_requester: simple_user,
    requested_team: team.optional(),
    requested_reviewer: simple_user.optional(),
  })
  .passthrough()
const review_request_removed_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    review_requester: simple_user,
    requested_team: team.optional(),
    requested_reviewer: simple_user.optional(),
  })
  .passthrough()
const review_dismissed_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    dismissed_review: z
      .object({
        state: z.string(),
        review_id: z.number().int(),
        dismissal_message: z.string().nullable(),
        dismissal_commit_id: z.string().optional(),
      })
      .passthrough(),
  })
  .passthrough()
const locked_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    lock_reason: z.string().nullable(),
  })
  .passthrough()
const added_to_project_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    project_card: z
      .object({
        id: z.number().int(),
        url: z.string().url(),
        project_id: z.number().int(),
        project_url: z.string().url(),
        column_name: z.string(),
        previous_column_name: z.string().optional(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const moved_column_in_project_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    project_card: z
      .object({
        id: z.number().int(),
        url: z.string().url(),
        project_id: z.number().int(),
        project_url: z.string().url(),
        column_name: z.string(),
        previous_column_name: z.string().optional(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const removed_from_project_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    project_card: z
      .object({
        id: z.number().int(),
        url: z.string().url(),
        project_id: z.number().int(),
        project_url: z.string().url(),
        column_name: z.string(),
        previous_column_name: z.string().optional(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const converted_note_to_issue_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: integration,
    project_card: z
      .object({
        id: z.number().int(),
        url: z.string().url(),
        project_id: z.number().int(),
        project_url: z.string().url(),
        column_name: z.string(),
        previous_column_name: z.string().optional(),
      })
      .passthrough()
      .optional(),
  })
  .passthrough()
const issue_event_for_issue = z.union([
  labeled_issue_event,
  unlabeled_issue_event,
  assigned_issue_event,
  unassigned_issue_event,
  milestoned_issue_event,
  demilestoned_issue_event,
  renamed_issue_event,
  review_requested_issue_event,
  review_request_removed_issue_event,
  review_dismissed_issue_event,
  locked_issue_event,
  added_to_project_issue_event,
  moved_column_in_project_issue_event,
  removed_from_project_issue_event,
  converted_note_to_issue_issue_event,
])
const label = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    name: z.string(),
    description: z.string().nullable(),
    color: z.string(),
    default: z.boolean(),
  })
  .passthrough()
const issues_add_labels_Body = z.union([
  z
    .object({ labels: z.array(z.string()).min(1) })
    .partial()
    .passthrough(),
  z.array(z.string()),
  z
    .object({
      labels: z.array(z.object({ name: z.string() }).passthrough()).min(1),
    })
    .partial()
    .passthrough(),
  z.array(z.object({ name: z.string() }).passthrough()),
  z.string(),
])
const issues_lock_Body = z
  .object({
    lock_reason: z.enum(["off-topic", "too heated", "resolved", "spam"]),
  })
  .partial()
  .passthrough()
const timeline_comment_event = z
  .object({
    event: z.string(),
    actor: simple_user,
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    body: z.string().optional(),
    body_text: z.string().optional(),
    body_html: z.string().optional(),
    html_url: z.string().url(),
    user: simple_user,
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    issue_url: z.string().url(),
    author_association: author_association,
    performed_via_github_app: nullable_integration.nullish(),
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const timeline_cross_referenced_event = z
  .object({
    event: z.string(),
    actor: simple_user.optional(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    source: z
      .object({ type: z.string(), issue: issue })
      .partial()
      .passthrough(),
  })
  .passthrough()
const timeline_committed_event = z
  .object({
    event: z.string().optional(),
    sha: z.string(),
    node_id: z.string(),
    url: z.string().url(),
    author: z
      .object({
        date: z.string().datetime({ offset: true }),
        email: z.string(),
        name: z.string(),
      })
      .passthrough(),
    committer: z
      .object({
        date: z.string().datetime({ offset: true }),
        email: z.string(),
        name: z.string(),
      })
      .passthrough(),
    message: z.string(),
    tree: z.object({ sha: z.string(), url: z.string().url() }).passthrough(),
    parents: z.array(
      z
        .object({
          sha: z.string(),
          url: z.string().url(),
          html_url: z.string().url(),
        })
        .passthrough(),
    ),
    verification: z
      .object({
        verified: z.boolean(),
        reason: z.string(),
        signature: z.string().nullable(),
        payload: z.string().nullable(),
      })
      .passthrough(),
    html_url: z.string().url(),
  })
  .passthrough()
const timeline_reviewed_event = z
  .object({
    event: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    user: simple_user,
    body: z.string().nullable(),
    state: z.string(),
    html_url: z.string().url(),
    pull_request_url: z.string().url(),
    _links: z
      .object({
        html: z.object({ href: z.string() }).passthrough(),
        pull_request: z.object({ href: z.string() }).passthrough(),
      })
      .passthrough(),
    submitted_at: z.string().datetime({ offset: true }).optional(),
    commit_id: z.string(),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
    author_association: author_association,
  })
  .passthrough()
const pull_request_review_comment = z
  .object({
    url: z.string(),
    pull_request_review_id: z.number().int().nullable(),
    id: z.number().int(),
    node_id: z.string(),
    diff_hunk: z.string(),
    path: z.string(),
    position: z.number().int().optional(),
    original_position: z.number().int().optional(),
    commit_id: z.string(),
    original_commit_id: z.string(),
    in_reply_to_id: z.number().int().optional(),
    user: simple_user,
    body: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    html_url: z.string().url(),
    pull_request_url: z.string().url(),
    author_association: author_association,
    _links: z
      .object({
        self: z.object({ href: z.string().url() }).passthrough(),
        html: z.object({ href: z.string().url() }).passthrough(),
        pull_request: z.object({ href: z.string().url() }).passthrough(),
      })
      .passthrough(),
    start_line: z.number().int().nullish(),
    original_start_line: z.number().int().nullish(),
    start_side: z.enum(["LEFT", "RIGHT"]).nullish().default("RIGHT"),
    line: z.number().int().optional(),
    original_line: z.number().int().optional(),
    side: z.enum(["LEFT", "RIGHT"]).optional().default("RIGHT"),
    subject_type: z.enum(["line", "file"]).optional(),
    reactions: reaction_rollup.optional(),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
  })
  .passthrough()
const timeline_line_commented_event = z
  .object({
    event: z.string(),
    node_id: z.string(),
    comments: z.array(pull_request_review_comment),
  })
  .partial()
  .passthrough()
const timeline_commit_commented_event = z
  .object({
    event: z.string(),
    node_id: z.string(),
    commit_id: z.string(),
    comments: z.array(commit_comment),
  })
  .partial()
  .passthrough()
const timeline_assigned_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    assignee: simple_user,
  })
  .passthrough()
const timeline_unassigned_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    assignee: simple_user,
  })
  .passthrough()
const state_change_issue_event = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string(),
    actor: simple_user,
    event: z.string(),
    commit_id: z.string().nullable(),
    commit_url: z.string().nullable(),
    created_at: z.string(),
    performed_via_github_app: nullable_integration.nullable(),
    state_reason: z.string().nullish(),
  })
  .passthrough()
const timeline_issue_events = z.union([
  labeled_issue_event,
  unlabeled_issue_event,
  milestoned_issue_event,
  demilestoned_issue_event,
  renamed_issue_event,
  review_requested_issue_event,
  review_request_removed_issue_event,
  review_dismissed_issue_event,
  locked_issue_event,
  added_to_project_issue_event,
  moved_column_in_project_issue_event,
  removed_from_project_issue_event,
  converted_note_to_issue_issue_event,
  timeline_comment_event,
  timeline_cross_referenced_event,
  timeline_committed_event,
  timeline_reviewed_event,
  timeline_line_commented_event,
  timeline_commit_commented_event,
  timeline_assigned_issue_event,
  timeline_unassigned_issue_event,
  state_change_issue_event,
])
const deploy_key = z
  .object({
    id: z.number().int(),
    key: z.string(),
    url: z.string(),
    title: z.string(),
    verified: z.boolean(),
    created_at: z.string(),
    read_only: z.boolean(),
    added_by: z.string().nullish(),
    last_used: z.string().nullish(),
  })
  .passthrough()
const repos_create_deploy_key_Body = z
  .object({
    title: z.string().optional(),
    key: z.string(),
    read_only: z.boolean().optional(),
  })
  .passthrough()
const issues_create_label_Body = z
  .object({
    name: z.string(),
    color: z.string().optional(),
    description: z.string().optional(),
  })
  .passthrough()
const issues_update_label_Body = z
  .object({ new_name: z.string(), color: z.string(), description: z.string() })
  .partial()
  .passthrough()
const language = z.record(z.number().int())
const license_content = z
  .object({
    name: z.string(),
    path: z.string(),
    sha: z.string(),
    size: z.number().int(),
    url: z.string().url(),
    html_url: z.string().url().nullable(),
    git_url: z.string().url().nullable(),
    download_url: z.string().url().nullable(),
    type: z.string(),
    content: z.string(),
    encoding: z.string(),
    _links: z
      .object({
        git: z.string().url().nullable(),
        html: z.string().url().nullable(),
        self: z.string().url(),
      })
      .passthrough(),
    license: nullable_license_simple.nullable(),
  })
  .passthrough()
const merged_upstream = z
  .object({
    message: z.string(),
    merge_type: z.enum(["merge", "fast-forward", "none"]),
    base_branch: z.string(),
  })
  .partial()
  .passthrough()
const repos_merge_Body = z
  .object({
    base: z.string(),
    head: z.string(),
    commit_message: z.string().optional(),
  })
  .passthrough()
const milestone = z
  .object({
    url: z.string().url(),
    html_url: z.string().url(),
    labels_url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    number: z.number().int(),
    state: z.enum(["open", "closed"]).default("open"),
    title: z.string(),
    description: z.string().nullable(),
    creator: nullable_simple_user.nullable(),
    open_issues: z.number().int(),
    closed_issues: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    closed_at: z.string().datetime({ offset: true }).nullable(),
    due_on: z.string().datetime({ offset: true }).nullable(),
  })
  .passthrough()
const issues_create_milestone_Body = z
  .object({
    title: z.string(),
    state: z.enum(["open", "closed"]).optional().default("open"),
    description: z.string().optional(),
    due_on: z.string().datetime({ offset: true }).optional(),
  })
  .passthrough()
const issues_update_milestone_Body = z
  .object({
    title: z.string(),
    state: z.enum(["open", "closed"]).default("open"),
    description: z.string(),
    due_on: z.string().datetime({ offset: true }),
  })
  .partial()
  .passthrough()
const pages_source_hash = z
  .object({ branch: z.string(), path: z.string() })
  .passthrough()
const pages_https_certificate = z
  .object({
    state: z.enum([
      "new",
      "authorization_created",
      "authorization_pending",
      "authorized",
      "authorization_revoked",
      "issued",
      "uploaded",
      "approved",
      "errored",
      "bad_authz",
      "destroy_pending",
      "dns_changed",
    ]),
    description: z.string(),
    domains: z.array(z.string()),
    expires_at: z.string().optional(),
  })
  .passthrough()
const page = z
  .object({
    url: z.string().url(),
    status: z.enum(["built", "building", "errored"]).nullable(),
    cname: z.string().nullable(),
    protected_domain_state: z
      .enum(["pending", "verified", "unverified"])
      .nullish(),
    pending_domain_unverified_at: z
      .string()
      .datetime({ offset: true })
      .nullish(),
    custom_404: z.boolean(),
    html_url: z.string().url().optional(),
    build_type: z.enum(["legacy", "workflow"]).nullish(),
    source: pages_source_hash.optional(),
    public: z.boolean(),
    https_certificate: pages_https_certificate.optional(),
    https_enforced: z.boolean().optional(),
  })
  .passthrough()
const page_build = z
  .object({
    url: z.string().url(),
    status: z.string(),
    error: z.object({ message: z.string().nullable() }).passthrough(),
    pusher: nullable_simple_user.nullable(),
    commit: z.string(),
    duration: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const page_build_status = z
  .object({ url: z.string().url(), status: z.string() })
  .passthrough()
const repos_create_pages_deployment_Body = z
  .object({
    artifact_id: z.number().optional(),
    artifact_url: z.string().optional(),
    environment: z.string().optional().default("github-pages"),
    pages_build_version: z.string().default("GITHUB_SHA"),
    oidc_token: z.string(),
  })
  .passthrough()
const page_deployment = z
  .object({
    id: z.union([z.number(), z.string()]),
    status_url: z.string().url(),
    page_url: z.string().url(),
    preview_url: z.string().url().optional(),
  })
  .passthrough()
const pages_deployment_status = z
  .object({
    status: z.enum([
      "deployment_in_progress",
      "syncing_files",
      "finished_file_sync",
      "updating_pages",
      "purging_cdn",
      "deployment_cancelled",
      "deployment_failed",
      "deployment_content_failed",
      "deployment_attempt_error",
      "deployment_lost",
      "succeed",
    ]),
  })
  .partial()
  .passthrough()
const pages_health_check = z
  .object({
    domain: z
      .object({
        host: z.string(),
        uri: z.string(),
        nameservers: z.string(),
        dns_resolves: z.boolean(),
        is_proxied: z.boolean().nullable(),
        is_cloudflare_ip: z.boolean().nullable(),
        is_fastly_ip: z.boolean().nullable(),
        is_old_ip_address: z.boolean().nullable(),
        is_a_record: z.boolean().nullable(),
        has_cname_record: z.boolean().nullable(),
        has_mx_records_present: z.boolean().nullable(),
        is_valid_domain: z.boolean(),
        is_apex_domain: z.boolean(),
        should_be_a_record: z.boolean().nullable(),
        is_cname_to_github_user_domain: z.boolean().nullable(),
        is_cname_to_pages_dot_github_dot_com: z.boolean().nullable(),
        is_cname_to_fastly: z.boolean().nullable(),
        is_pointed_to_github_pages_ip: z.boolean().nullable(),
        is_non_github_pages_ip_present: z.boolean().nullable(),
        is_pages_domain: z.boolean(),
        is_served_by_pages: z.boolean().nullable(),
        is_valid: z.boolean(),
        reason: z.string().nullable(),
        responds_to_https: z.boolean(),
        enforces_https: z.boolean(),
        https_error: z.string().nullable(),
        is_https_eligible: z.boolean().nullable(),
        caa_error: z.string().nullable(),
      })
      .partial()
      .passthrough(),
    alt_domain: z
      .object({
        host: z.string(),
        uri: z.string(),
        nameservers: z.string(),
        dns_resolves: z.boolean(),
        is_proxied: z.boolean().nullable(),
        is_cloudflare_ip: z.boolean().nullable(),
        is_fastly_ip: z.boolean().nullable(),
        is_old_ip_address: z.boolean().nullable(),
        is_a_record: z.boolean().nullable(),
        has_cname_record: z.boolean().nullable(),
        has_mx_records_present: z.boolean().nullable(),
        is_valid_domain: z.boolean(),
        is_apex_domain: z.boolean(),
        should_be_a_record: z.boolean().nullable(),
        is_cname_to_github_user_domain: z.boolean().nullable(),
        is_cname_to_pages_dot_github_dot_com: z.boolean().nullable(),
        is_cname_to_fastly: z.boolean().nullable(),
        is_pointed_to_github_pages_ip: z.boolean().nullable(),
        is_non_github_pages_ip_present: z.boolean().nullable(),
        is_pages_domain: z.boolean(),
        is_served_by_pages: z.boolean().nullable(),
        is_valid: z.boolean(),
        reason: z.string().nullable(),
        responds_to_https: z.boolean(),
        enforces_https: z.boolean(),
        https_error: z.string().nullable(),
        is_https_eligible: z.boolean().nullable(),
        caa_error: z.string().nullable(),
      })
      .partial()
      .passthrough()
      .nullable(),
  })
  .partial()
  .passthrough()
const repos_create_or_update_custom_properties_values_Body = z
  .object({ properties: z.array(custom_property_value) })
  .passthrough()
const pulls_create_Body = z
  .object({
    title: z.string().optional(),
    head: z.string(),
    head_repo: z.string().optional(),
    base: z.string(),
    body: z.string().optional(),
    maintainer_can_modify: z.boolean().optional(),
    draft: z.boolean().optional(),
    issue: z.number().int().optional(),
  })
  .passthrough()
const pull_request = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    html_url: z.string().url(),
    diff_url: z.string().url(),
    patch_url: z.string().url(),
    issue_url: z.string().url(),
    commits_url: z.string().url(),
    review_comments_url: z.string().url(),
    review_comment_url: z.string(),
    comments_url: z.string().url(),
    statuses_url: z.string().url(),
    number: z.number().int(),
    state: z.enum(["open", "closed"]),
    locked: z.boolean(),
    title: z.string(),
    user: simple_user,
    body: z.string().nullable(),
    labels: z.array(
      z
        .object({
          id: z.number().int(),
          node_id: z.string(),
          url: z.string(),
          name: z.string(),
          description: z.string().nullable(),
          color: z.string(),
          default: z.boolean(),
        })
        .passthrough(),
    ),
    milestone: nullable_milestone.nullable(),
    active_lock_reason: z.string().nullish(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    closed_at: z.string().datetime({ offset: true }).nullable(),
    merged_at: z.string().datetime({ offset: true }).nullable(),
    merge_commit_sha: z.string().nullable(),
    assignee: nullable_simple_user.nullable(),
    assignees: z.array(simple_user).nullish(),
    requested_reviewers: z.array(simple_user).nullish(),
    requested_teams: z.array(team_simple).nullish(),
    head: z
      .object({
        label: z.string(),
        ref: z.string(),
        repo: z
          .object({
            archive_url: z.string(),
            assignees_url: z.string(),
            blobs_url: z.string(),
            branches_url: z.string(),
            collaborators_url: z.string(),
            comments_url: z.string(),
            commits_url: z.string(),
            compare_url: z.string(),
            contents_url: z.string(),
            contributors_url: z.string().url(),
            deployments_url: z.string().url(),
            description: z.string().nullable(),
            downloads_url: z.string().url(),
            events_url: z.string().url(),
            fork: z.boolean(),
            forks_url: z.string().url(),
            full_name: z.string(),
            git_commits_url: z.string(),
            git_refs_url: z.string(),
            git_tags_url: z.string(),
            hooks_url: z.string().url(),
            html_url: z.string().url(),
            id: z.number().int(),
            node_id: z.string(),
            issue_comment_url: z.string(),
            issue_events_url: z.string(),
            issues_url: z.string(),
            keys_url: z.string(),
            labels_url: z.string(),
            languages_url: z.string().url(),
            merges_url: z.string().url(),
            milestones_url: z.string(),
            name: z.string(),
            notifications_url: z.string(),
            owner: z
              .object({
                avatar_url: z.string().url(),
                events_url: z.string(),
                followers_url: z.string().url(),
                following_url: z.string(),
                gists_url: z.string(),
                gravatar_id: z.string().nullable(),
                html_url: z.string().url(),
                id: z.number().int(),
                node_id: z.string(),
                login: z.string(),
                organizations_url: z.string().url(),
                received_events_url: z.string().url(),
                repos_url: z.string().url(),
                site_admin: z.boolean(),
                starred_url: z.string(),
                subscriptions_url: z.string().url(),
                type: z.string(),
                url: z.string().url(),
              })
              .passthrough(),
            private: z.boolean(),
            pulls_url: z.string(),
            releases_url: z.string(),
            stargazers_url: z.string().url(),
            statuses_url: z.string(),
            subscribers_url: z.string().url(),
            subscription_url: z.string().url(),
            tags_url: z.string().url(),
            teams_url: z.string().url(),
            trees_url: z.string(),
            url: z.string().url(),
            clone_url: z.string(),
            default_branch: z.string(),
            forks: z.number().int(),
            forks_count: z.number().int(),
            git_url: z.string(),
            has_downloads: z.boolean(),
            has_issues: z.boolean(),
            has_projects: z.boolean(),
            has_wiki: z.boolean(),
            has_pages: z.boolean(),
            has_discussions: z.boolean(),
            homepage: z.string().url().nullable(),
            language: z.string().nullable(),
            master_branch: z.string().optional(),
            archived: z.boolean(),
            disabled: z.boolean(),
            visibility: z.string().optional(),
            mirror_url: z.string().url().nullable(),
            open_issues: z.number().int(),
            open_issues_count: z.number().int(),
            permissions: z
              .object({
                admin: z.boolean(),
                maintain: z.boolean().optional(),
                push: z.boolean(),
                triage: z.boolean().optional(),
                pull: z.boolean(),
              })
              .passthrough()
              .optional(),
            temp_clone_token: z.string().optional(),
            allow_merge_commit: z.boolean().optional(),
            allow_squash_merge: z.boolean().optional(),
            allow_rebase_merge: z.boolean().optional(),
            license: z
              .object({
                key: z.string(),
                name: z.string(),
                url: z.string().url().nullable(),
                spdx_id: z.string().nullable(),
                node_id: z.string(),
              })
              .passthrough()
              .nullable(),
            pushed_at: z.string().datetime({ offset: true }),
            size: z.number().int(),
            ssh_url: z.string(),
            stargazers_count: z.number().int(),
            svn_url: z.string().url(),
            topics: z.array(z.string()).optional(),
            watchers: z.number().int(),
            watchers_count: z.number().int(),
            created_at: z.string().datetime({ offset: true }),
            updated_at: z.string().datetime({ offset: true }),
            allow_forking: z.boolean().optional(),
            is_template: z.boolean().optional(),
            web_commit_signoff_required: z.boolean().optional(),
          })
          .passthrough()
          .nullable(),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().url(),
            events_url: z.string(),
            followers_url: z.string().url(),
            following_url: z.string(),
            gists_url: z.string(),
            gravatar_id: z.string().nullable(),
            html_url: z.string().url(),
            id: z.number().int(),
            node_id: z.string(),
            login: z.string(),
            organizations_url: z.string().url(),
            received_events_url: z.string().url(),
            repos_url: z.string().url(),
            site_admin: z.boolean(),
            starred_url: z.string(),
            subscriptions_url: z.string().url(),
            type: z.string(),
            url: z.string().url(),
          })
          .passthrough(),
      })
      .passthrough(),
    base: z
      .object({
        label: z.string(),
        ref: z.string(),
        repo: z
          .object({
            archive_url: z.string(),
            assignees_url: z.string(),
            blobs_url: z.string(),
            branches_url: z.string(),
            collaborators_url: z.string(),
            comments_url: z.string(),
            commits_url: z.string(),
            compare_url: z.string(),
            contents_url: z.string(),
            contributors_url: z.string().url(),
            deployments_url: z.string().url(),
            description: z.string().nullable(),
            downloads_url: z.string().url(),
            events_url: z.string().url(),
            fork: z.boolean(),
            forks_url: z.string().url(),
            full_name: z.string(),
            git_commits_url: z.string(),
            git_refs_url: z.string(),
            git_tags_url: z.string(),
            hooks_url: z.string().url(),
            html_url: z.string().url(),
            id: z.number().int(),
            is_template: z.boolean().optional(),
            node_id: z.string(),
            issue_comment_url: z.string(),
            issue_events_url: z.string(),
            issues_url: z.string(),
            keys_url: z.string(),
            labels_url: z.string(),
            languages_url: z.string().url(),
            merges_url: z.string().url(),
            milestones_url: z.string(),
            name: z.string(),
            notifications_url: z.string(),
            owner: z
              .object({
                avatar_url: z.string().url(),
                events_url: z.string(),
                followers_url: z.string().url(),
                following_url: z.string(),
                gists_url: z.string(),
                gravatar_id: z.string().nullable(),
                html_url: z.string().url(),
                id: z.number().int(),
                node_id: z.string(),
                login: z.string(),
                organizations_url: z.string().url(),
                received_events_url: z.string().url(),
                repos_url: z.string().url(),
                site_admin: z.boolean(),
                starred_url: z.string(),
                subscriptions_url: z.string().url(),
                type: z.string(),
                url: z.string().url(),
              })
              .passthrough(),
            private: z.boolean(),
            pulls_url: z.string(),
            releases_url: z.string(),
            stargazers_url: z.string().url(),
            statuses_url: z.string(),
            subscribers_url: z.string().url(),
            subscription_url: z.string().url(),
            tags_url: z.string().url(),
            teams_url: z.string().url(),
            trees_url: z.string(),
            url: z.string().url(),
            clone_url: z.string(),
            default_branch: z.string(),
            forks: z.number().int(),
            forks_count: z.number().int(),
            git_url: z.string(),
            has_downloads: z.boolean(),
            has_issues: z.boolean(),
            has_projects: z.boolean(),
            has_wiki: z.boolean(),
            has_pages: z.boolean(),
            has_discussions: z.boolean(),
            homepage: z.string().url().nullable(),
            language: z.string().nullable(),
            master_branch: z.string().optional(),
            archived: z.boolean(),
            disabled: z.boolean(),
            visibility: z.string().optional(),
            mirror_url: z.string().url().nullable(),
            open_issues: z.number().int(),
            open_issues_count: z.number().int(),
            permissions: z
              .object({
                admin: z.boolean(),
                maintain: z.boolean().optional(),
                push: z.boolean(),
                triage: z.boolean().optional(),
                pull: z.boolean(),
              })
              .passthrough()
              .optional(),
            temp_clone_token: z.string().optional(),
            allow_merge_commit: z.boolean().optional(),
            allow_squash_merge: z.boolean().optional(),
            allow_rebase_merge: z.boolean().optional(),
            license: nullable_license_simple.nullable(),
            pushed_at: z.string().datetime({ offset: true }),
            size: z.number().int(),
            ssh_url: z.string(),
            stargazers_count: z.number().int(),
            svn_url: z.string().url(),
            topics: z.array(z.string()).optional(),
            watchers: z.number().int(),
            watchers_count: z.number().int(),
            created_at: z.string().datetime({ offset: true }),
            updated_at: z.string().datetime({ offset: true }),
            allow_forking: z.boolean().optional(),
            web_commit_signoff_required: z.boolean().optional(),
          })
          .passthrough(),
        sha: z.string(),
        user: z
          .object({
            avatar_url: z.string().url(),
            events_url: z.string(),
            followers_url: z.string().url(),
            following_url: z.string(),
            gists_url: z.string(),
            gravatar_id: z.string().nullable(),
            html_url: z.string().url(),
            id: z.number().int(),
            node_id: z.string(),
            login: z.string(),
            organizations_url: z.string().url(),
            received_events_url: z.string().url(),
            repos_url: z.string().url(),
            site_admin: z.boolean(),
            starred_url: z.string(),
            subscriptions_url: z.string().url(),
            type: z.string(),
            url: z.string().url(),
          })
          .passthrough(),
      })
      .passthrough(),
    _links: z
      .object({
        comments: link,
        commits: link,
        statuses: link,
        html: link,
        issue: link,
        review_comments: link,
        review_comment: link,
        self: link,
      })
      .passthrough(),
    author_association: author_association,
    auto_merge: auto_merge.nullable(),
    draft: z.boolean().optional(),
    merged: z.boolean(),
    mergeable: z.boolean().nullable(),
    rebaseable: z.boolean().nullish(),
    mergeable_state: z.string(),
    merged_by: nullable_simple_user.nullable(),
    comments: z.number().int(),
    review_comments: z.number().int(),
    maintainer_can_modify: z.boolean(),
    commits: z.number().int(),
    additions: z.number().int(),
    deletions: z.number().int(),
    changed_files: z.number().int(),
  })
  .passthrough()
const pulls_update_Body = z
  .object({
    title: z.string(),
    body: z.string(),
    state: z.enum(["open", "closed"]),
    base: z.string(),
    maintainer_can_modify: z.boolean(),
  })
  .partial()
  .passthrough()
const codespaces_create_with_pr_for_authenticated_user_Body = z
  .object({
    location: z.string(),
    geo: z.enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"]),
    client_ip: z.string(),
    machine: z.string(),
    devcontainer_path: z.string(),
    multi_repo_permissions_opt_out: z.boolean(),
    working_directory: z.string(),
    idle_timeout_minutes: z.number().int(),
    display_name: z.string(),
    retention_period_minutes: z.number().int(),
  })
  .partial()
  .passthrough()
const pulls_create_review_comment_Body = z
  .object({
    body: z.string(),
    commit_id: z.string(),
    path: z.string(),
    position: z.number().int().optional(),
    side: z.enum(["LEFT", "RIGHT"]).optional(),
    line: z.number().int().optional(),
    start_line: z.number().int().optional(),
    start_side: z.enum(["LEFT", "RIGHT", "side"]).optional(),
    in_reply_to: z.number().int().optional(),
    subject_type: z.enum(["line", "file"]).optional(),
  })
  .passthrough()
const pulls_merge_Body = z
  .object({
    commit_title: z.string(),
    commit_message: z.string(),
    sha: z.string(),
    merge_method: z.enum(["merge", "squash", "rebase"]),
  })
  .partial()
  .passthrough()
const pull_request_merge_result = z
  .object({ sha: z.string(), merged: z.boolean(), message: z.string() })
  .passthrough()
const pull_request_review_request = z
  .object({ users: z.array(simple_user), teams: z.array(team) })
  .passthrough()
const pulls_remove_requested_reviewers_Body = z
  .object({
    reviewers: z.array(z.string()),
    team_reviewers: z.array(z.string()).optional(),
  })
  .passthrough()
const pull_request_review = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    user: nullable_simple_user.nullable(),
    body: z.string(),
    state: z.string(),
    html_url: z.string().url(),
    pull_request_url: z.string().url(),
    _links: z
      .object({
        html: z.object({ href: z.string() }).passthrough(),
        pull_request: z.object({ href: z.string() }).passthrough(),
      })
      .passthrough(),
    submitted_at: z.string().datetime({ offset: true }).optional(),
    commit_id: z.string().nullable(),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
    author_association: author_association,
  })
  .passthrough()
const pulls_create_review_Body = z
  .object({
    commit_id: z.string(),
    body: z.string(),
    event: z.enum(["APPROVE", "REQUEST_CHANGES", "COMMENT"]),
    comments: z.array(
      z
        .object({
          path: z.string(),
          position: z.number().int().optional(),
          body: z.string(),
          line: z.number().int().optional(),
          side: z.string().optional(),
          start_line: z.number().int().optional(),
          start_side: z.string().optional(),
        })
        .passthrough(),
    ),
  })
  .partial()
  .passthrough()
const review_comment = z
  .object({
    url: z.string().url(),
    pull_request_review_id: z.number().int().nullable(),
    id: z.number().int(),
    node_id: z.string(),
    diff_hunk: z.string(),
    path: z.string(),
    position: z.number().int().nullable(),
    original_position: z.number().int(),
    commit_id: z.string(),
    original_commit_id: z.string(),
    in_reply_to_id: z.number().int().optional(),
    user: nullable_simple_user.nullable(),
    body: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    html_url: z.string().url(),
    pull_request_url: z.string().url(),
    author_association: author_association,
    _links: z
      .object({ self: link, html: link, pull_request: link })
      .passthrough(),
    body_text: z.string().optional(),
    body_html: z.string().optional(),
    reactions: reaction_rollup.optional(),
    side: z.enum(["LEFT", "RIGHT"]).optional().default("RIGHT"),
    start_side: z.enum(["LEFT", "RIGHT"]).nullish().default("RIGHT"),
    line: z.number().int().optional(),
    original_line: z.number().int().optional(),
    start_line: z.number().int().nullish(),
    original_start_line: z.number().int().nullish(),
  })
  .passthrough()
const pulls_dismiss_review_Body = z
  .object({ message: z.string(), event: z.literal("DISMISS").optional() })
  .passthrough()
const pulls_submit_review_Body = z
  .object({
    body: z.string().optional(),
    event: z.enum(["APPROVE", "REQUEST_CHANGES", "COMMENT"]),
  })
  .passthrough()
const release_asset = z
  .object({
    url: z.string().url(),
    browser_download_url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    label: z.string().nullable(),
    state: z.enum(["uploaded", "open"]),
    content_type: z.string(),
    size: z.number().int(),
    download_count: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    uploader: nullable_simple_user.nullable(),
  })
  .passthrough()
const release = z
  .object({
    url: z.string().url(),
    html_url: z.string().url(),
    assets_url: z.string().url(),
    upload_url: z.string(),
    tarball_url: z.string().url().nullable(),
    zipball_url: z.string().url().nullable(),
    id: z.number().int(),
    node_id: z.string(),
    tag_name: z.string(),
    target_commitish: z.string(),
    name: z.string().nullable(),
    body: z.string().nullish(),
    draft: z.boolean(),
    prerelease: z.boolean(),
    created_at: z.string().datetime({ offset: true }),
    published_at: z.string().datetime({ offset: true }).nullable(),
    author: simple_user,
    assets: z.array(release_asset),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
    mentions_count: z.number().int().optional(),
    discussion_url: z.string().url().optional(),
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const repos_create_release_Body = z
  .object({
    tag_name: z.string(),
    target_commitish: z.string().optional(),
    name: z.string().optional(),
    body: z.string().optional(),
    draft: z.boolean().optional(),
    prerelease: z.boolean().optional(),
    discussion_category_name: z.string().optional(),
    generate_release_notes: z.boolean().optional(),
    make_latest: z.enum(["true", "false", "legacy"]).optional().default(true),
  })
  .passthrough()
const repos_update_release_asset_Body = z
  .object({ name: z.string(), label: z.string(), state: z.string() })
  .partial()
  .passthrough()
const repos_generate_release_notes_Body = z
  .object({
    tag_name: z.string(),
    target_commitish: z.string().optional(),
    previous_tag_name: z.string().optional(),
    configuration_file_path: z.string().optional(),
  })
  .passthrough()
const release_notes_content = z
  .object({ name: z.string(), body: z.string() })
  .passthrough()
const repos_update_release_Body = z
  .object({
    tag_name: z.string(),
    target_commitish: z.string(),
    name: z.string(),
    body: z.string(),
    draft: z.boolean(),
    prerelease: z.boolean(),
    make_latest: z.enum(["true", "false", "legacy"]).default(true),
    discussion_category_name: z.string(),
  })
  .partial()
  .passthrough()
const reactions_create_for_release_Body = z
  .object({
    content: z.enum(["+1", "laugh", "heart", "hooray", "rocket", "eyes"]),
  })
  .passthrough()
const repository_rule_ruleset_info = z
  .object({
    ruleset_source_type: z.enum(["Repository", "Organization"]),
    ruleset_source: z.string(),
    ruleset_id: z.number().int(),
  })
  .partial()
  .passthrough()
const repository_rule_detailed = z.union([
  repository_rule_creation.and(repository_rule_ruleset_info),
  repository_rule_update.and(repository_rule_ruleset_info),
  repository_rule_deletion.and(repository_rule_ruleset_info),
  repository_rule_required_linear_history.and(repository_rule_ruleset_info),
  repository_rule_required_deployments.and(repository_rule_ruleset_info),
  repository_rule_required_signatures.and(repository_rule_ruleset_info),
  repository_rule_pull_request.and(repository_rule_ruleset_info),
  repository_rule_required_status_checks.and(repository_rule_ruleset_info),
  repository_rule_non_fast_forward.and(repository_rule_ruleset_info),
  repository_rule_commit_message_pattern.and(repository_rule_ruleset_info),
  repository_rule_commit_author_email_pattern.and(repository_rule_ruleset_info),
  repository_rule_committer_email_pattern.and(repository_rule_ruleset_info),
  repository_rule_branch_name_pattern.and(repository_rule_ruleset_info),
  repository_rule_tag_name_pattern.and(repository_rule_ruleset_info),
  repository_rule_workflows.and(repository_rule_ruleset_info),
])
const repos_create_repo_ruleset_Body = z
  .object({
    name: z.string(),
    target: z.enum(["branch", "tag"]).optional(),
    enforcement: repository_rule_enforcement,
    bypass_actors: z.array(repository_ruleset_bypass_actor).optional(),
    conditions: repository_ruleset_conditions.optional(),
    rules: z.array(repository_rule).optional(),
  })
  .passthrough()
const repos_update_repo_ruleset_Body = z
  .object({
    name: z.string(),
    target: z.enum(["branch", "tag"]),
    enforcement: repository_rule_enforcement,
    bypass_actors: z.array(repository_ruleset_bypass_actor),
    conditions: repository_ruleset_conditions,
    rules: z.array(repository_rule),
  })
  .partial()
  .passthrough()
const secret_scanning_alert = z
  .object({
    number: alert_number.int(),
    created_at: alert_created_at.datetime({ offset: true }),
    updated_at: nullable_alert_updated_at.datetime({ offset: true }).nullable(),
    url: alert_url.url(),
    html_url: alert_html_url.url(),
    locations_url: z.string().url(),
    state: secret_scanning_alert_state,
    resolution: secret_scanning_alert_resolution.nullable(),
    resolved_at: z.string().datetime({ offset: true }).nullable(),
    resolved_by: nullable_simple_user.nullable(),
    resolution_comment: z.string().nullable(),
    secret_type: z.string(),
    secret_type_display_name: z.string(),
    secret: z.string(),
    push_protection_bypassed: z.boolean().nullable(),
    push_protection_bypassed_by: nullable_simple_user.nullable(),
    push_protection_bypassed_at: z
      .string()
      .datetime({ offset: true })
      .nullable(),
    validity: z.enum(["active", "inactive", "unknown"]),
  })
  .partial()
  .passthrough()
const secret_scanning_alert_resolution_comment = z.string()
const secret_scanning_update_alert_Body = z
  .object({
    state: secret_scanning_alert_state,
    resolution: secret_scanning_alert_resolution.nullish(),
    resolution_comment: secret_scanning_alert_resolution_comment.nullish(),
  })
  .passthrough()
const secret_scanning_location_commit = z
  .object({
    path: z.string(),
    start_line: z.number(),
    end_line: z.number(),
    start_column: z.number(),
    end_column: z.number(),
    blob_sha: z.string(),
    blob_url: z.string(),
    commit_sha: z.string(),
    commit_url: z.string(),
  })
  .passthrough()
const secret_scanning_location_issue_title = z
  .object({ issue_title_url: z.string().url() })
  .passthrough()
const secret_scanning_location_issue_body = z
  .object({ issue_body_url: z.string().url() })
  .passthrough()
const secret_scanning_location_issue_comment = z
  .object({ issue_comment_url: z.string().url() })
  .passthrough()
const secret_scanning_location_discussion_title = z
  .object({ discussion_title_url: z.string().url() })
  .passthrough()
const secret_scanning_location_discussion_body = z
  .object({ discussion_body_url: z.string().url() })
  .passthrough()
const secret_scanning_location_discussion_comment = z
  .object({ discussion_comment_url: z.string().url() })
  .passthrough()
const secret_scanning_location_pull_request_title = z
  .object({ pull_request_title_url: z.string().url() })
  .passthrough()
const secret_scanning_location_pull_request_body = z
  .object({ pull_request_body_url: z.string().url() })
  .passthrough()
const secret_scanning_location_pull_request_comment = z
  .object({ pull_request_comment_url: z.string().url() })
  .passthrough()
const secret_scanning_location_pull_request_review = z
  .object({ pull_request_review_url: z.string().url() })
  .passthrough()
const secret_scanning_location_pull_request_review_comment = z
  .object({ pull_request_review_comment_url: z.string().url() })
  .passthrough()
const secret_scanning_location = z
  .object({
    type: z.enum([
      "commit",
      "issue_title",
      "issue_body",
      "issue_comment",
      "discussion_title",
      "discussion_body",
      "discussion_comment",
      "pull_request_title",
      "pull_request_body",
      "pull_request_comment",
      "pull_request_review",
      "pull_request_review_comment",
    ]),
    details: z.union([
      secret_scanning_location_commit,
      secret_scanning_location_issue_title,
      secret_scanning_location_issue_body,
      secret_scanning_location_issue_comment,
      secret_scanning_location_discussion_title,
      secret_scanning_location_discussion_body,
      secret_scanning_location_discussion_comment,
      secret_scanning_location_pull_request_title,
      secret_scanning_location_pull_request_body,
      secret_scanning_location_pull_request_comment,
      secret_scanning_location_pull_request_review,
      secret_scanning_location_pull_request_review_comment,
    ]),
  })
  .passthrough()
const repository_advisory_create = z.object({
  summary: z.string().max(1024),
  description: z.string().max(65535),
  cve_id: z.string().nullish(),
  vulnerabilities: z.array(
    z.object({
      package: z
        .object({
          ecosystem: security_advisory_ecosystems,
          name: z.string().nullish(),
        })
        .passthrough(),
      vulnerable_version_range: z.string().nullish(),
      patched_versions: z.string().nullish(),
      vulnerable_functions: z.array(z.string()).nullish(),
    }),
  ),
  cwe_ids: z.array(z.string()).nullish(),
  credits: z
    .array(
      z.object({ login: z.string(), type: security_advisory_credit_types }),
    )
    .nullish(),
  severity: z.enum(["critical", "high", "medium", "low"]).nullish(),
  cvss_vector_string: z.string().nullish(),
  start_private_fork: z.boolean().optional(),
})
const private_vulnerability_report_create = z.object({
  summary: z.string().max(1024),
  description: z.string().max(65535),
  vulnerabilities: z
    .array(
      z.object({
        package: z
          .object({
            ecosystem: security_advisory_ecosystems,
            name: z.string().nullish(),
          })
          .passthrough(),
        vulnerable_version_range: z.string().nullish(),
        patched_versions: z.string().nullish(),
        vulnerable_functions: z.array(z.string()).nullish(),
      }),
    )
    .nullish(),
  cwe_ids: z.array(z.string()).nullish(),
  severity: z.enum(["critical", "high", "medium", "low"]).nullish(),
  cvss_vector_string: z.string().nullish(),
  start_private_fork: z.boolean().optional(),
})
const repository_advisory_update = z
  .object({
    summary: z.string().max(1024),
    description: z.string().max(65535),
    cve_id: z.string().nullable(),
    vulnerabilities: z.array(
      z.object({
        package: z
          .object({
            ecosystem: security_advisory_ecosystems,
            name: z.string().nullish(),
          })
          .passthrough(),
        vulnerable_version_range: z.string().nullish(),
        patched_versions: z.string().nullish(),
        vulnerable_functions: z.array(z.string()).nullish(),
      }),
    ),
    cwe_ids: z.array(z.string()).nullable(),
    credits: z
      .array(
        z.object({ login: z.string(), type: security_advisory_credit_types }),
      )
      .nullable(),
    severity: z.enum(["critical", "high", "medium", "low"]).nullable(),
    cvss_vector_string: z.string().nullable(),
    state: z.enum(["published", "closed", "draft"]),
    collaborating_users: z.array(z.string()).nullable(),
    collaborating_teams: z.array(z.string()).nullable(),
  })
  .partial()
const stargazer = z
  .object({
    starred_at: z.string().datetime({ offset: true }),
    user: nullable_simple_user.nullable(),
  })
  .passthrough()
const code_frequency_stat = z.array(z.number())
const commit_activity = z
  .object({
    days: z.array(z.number()),
    total: z.number().int(),
    week: z.number().int(),
  })
  .passthrough()
const contributor_activity = z
  .object({
    author: nullable_simple_user.nullable(),
    total: z.number().int(),
    weeks: z.array(
      z
        .object({
          w: z.number().int(),
          a: z.number().int(),
          d: z.number().int(),
          c: z.number().int(),
        })
        .partial()
        .passthrough(),
    ),
  })
  .passthrough()
const participation_stats = z
  .object({ all: z.array(z.number()), owner: z.array(z.number()) })
  .passthrough()
const repos_create_commit_status_Body = z
  .object({
    state: z.enum(["error", "failure", "pending", "success"]),
    target_url: z.string().nullish(),
    description: z.string().nullish(),
    context: z.string().optional().default("default"),
  })
  .passthrough()
const repository_subscription = z
  .object({
    subscribed: z.boolean(),
    ignored: z.boolean(),
    reason: z.string().nullable(),
    created_at: z.string().datetime({ offset: true }),
    url: z.string().url(),
    repository_url: z.string().url(),
  })
  .passthrough()
const activity_set_repo_subscription_Body = z
  .object({ subscribed: z.boolean(), ignored: z.boolean() })
  .partial()
  .passthrough()
const tag = z
  .object({
    name: z.string(),
    commit: z.object({ sha: z.string(), url: z.string().url() }).passthrough(),
    zipball_url: z.string().url(),
    tarball_url: z.string().url(),
    node_id: z.string(),
  })
  .passthrough()
const tag_protection = z
  .object({
    id: z.number().int().optional(),
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
    enabled: z.boolean().optional(),
    pattern: z.string(),
  })
  .passthrough()
const topic = z.object({ names: z.array(z.string()) }).passthrough()
const repos_replace_all_topics_Body = z
  .object({ names: z.array(z.string()) })
  .passthrough()
const traffic = z
  .object({
    timestamp: z.string().datetime({ offset: true }),
    uniques: z.number().int(),
    count: z.number().int(),
  })
  .passthrough()
const clone_traffic = z
  .object({
    count: z.number().int(),
    uniques: z.number().int(),
    clones: z.array(traffic),
  })
  .passthrough()
const content_traffic = z
  .object({
    path: z.string(),
    title: z.string(),
    count: z.number().int(),
    uniques: z.number().int(),
  })
  .passthrough()
const referrer_traffic = z
  .object({
    referrer: z.string(),
    count: z.number().int(),
    uniques: z.number().int(),
  })
  .passthrough()
const view_traffic = z
  .object({
    count: z.number().int(),
    uniques: z.number().int(),
    views: z.array(traffic),
  })
  .passthrough()
const repos_transfer_Body = z
  .object({
    new_owner: z.string(),
    new_name: z.string().optional(),
    team_ids: z.array(z.number()).optional(),
  })
  .passthrough()
const repos_create_using_template_Body = z
  .object({
    owner: z.string().optional(),
    name: z.string(),
    description: z.string().optional(),
    include_all_branches: z.boolean().optional(),
    private: z.boolean().optional(),
  })
  .passthrough()
const search_result_text_matches = z.array(
  z
    .object({
      object_url: z.string(),
      object_type: z.string().nullable(),
      property: z.string(),
      fragment: z.string(),
      matches: z.array(
        z
          .object({ text: z.string(), indices: z.array(z.number()) })
          .partial()
          .passthrough(),
      ),
    })
    .partial()
    .passthrough(),
)
const code_search_result_item = z
  .object({
    name: z.string(),
    path: z.string(),
    sha: z.string(),
    url: z.string().url(),
    git_url: z.string().url(),
    html_url: z.string().url(),
    repository: minimal_repository,
    score: z.number(),
    file_size: z.number().int().optional(),
    language: z.string().nullish(),
    last_modified_at: z.string().datetime({ offset: true }).optional(),
    line_numbers: z.array(z.string()).optional(),
    text_matches: search_result_text_matches.optional(),
  })
  .passthrough()
const commit_search_result_item = z
  .object({
    url: z.string().url(),
    sha: z.string(),
    html_url: z.string().url(),
    comments_url: z.string().url(),
    commit: z
      .object({
        author: z
          .object({
            name: z.string(),
            email: z.string(),
            date: z.string().datetime({ offset: true }),
          })
          .passthrough(),
        committer: nullable_git_user.nullable(),
        comment_count: z.number().int(),
        message: z.string(),
        tree: z
          .object({ sha: z.string(), url: z.string().url() })
          .passthrough(),
        url: z.string().url(),
        verification: verification.optional(),
      })
      .passthrough(),
    author: nullable_simple_user.nullable(),
    committer: nullable_git_user.nullable(),
    parents: z.array(
      z
        .object({ url: z.string(), html_url: z.string(), sha: z.string() })
        .partial()
        .passthrough(),
    ),
    repository: minimal_repository,
    score: z.number(),
    node_id: z.string(),
    text_matches: search_result_text_matches.optional(),
  })
  .passthrough()
const issue_search_result_item = z
  .object({
    url: z.string().url(),
    repository_url: z.string().url(),
    labels_url: z.string(),
    comments_url: z.string().url(),
    events_url: z.string().url(),
    html_url: z.string().url(),
    id: z.number().int(),
    node_id: z.string(),
    number: z.number().int(),
    title: z.string(),
    locked: z.boolean(),
    active_lock_reason: z.string().nullish(),
    assignees: z.array(simple_user).nullish(),
    user: nullable_simple_user.nullable(),
    labels: z.array(
      z
        .object({
          id: z.number().int(),
          node_id: z.string(),
          url: z.string(),
          name: z.string(),
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
        })
        .partial()
        .passthrough(),
    ),
    state: z.string(),
    state_reason: z.string().nullish(),
    assignee: nullable_simple_user.nullable(),
    milestone: nullable_milestone.nullable(),
    comments: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    closed_at: z.string().datetime({ offset: true }).nullable(),
    text_matches: search_result_text_matches.optional(),
    pull_request: z
      .object({
        merged_at: z.string().datetime({ offset: true }).nullish(),
        diff_url: z.string().url().nullable(),
        html_url: z.string().url().nullable(),
        patch_url: z.string().url().nullable(),
        url: z.string().url().nullable(),
      })
      .passthrough()
      .optional(),
    body: z.string().optional(),
    score: z.number(),
    author_association: author_association,
    draft: z.boolean().optional(),
    repository: repository.optional(),
    body_html: z.string().optional(),
    body_text: z.string().optional(),
    timeline_url: z.string().url().optional(),
    performed_via_github_app: nullable_integration.nullish(),
    reactions: reaction_rollup.optional(),
  })
  .passthrough()
const label_search_result_item = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    url: z.string().url(),
    name: z.string(),
    color: z.string(),
    default: z.boolean(),
    description: z.string().nullable(),
    score: z.number(),
    text_matches: search_result_text_matches.optional(),
  })
  .passthrough()
const repo_search_result_item = z
  .object({
    id: z.number().int(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    owner: nullable_simple_user.nullable(),
    private: z.boolean(),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    pushed_at: z.string().datetime({ offset: true }),
    homepage: z.string().url().nullable(),
    size: z.number().int(),
    stargazers_count: z.number().int(),
    watchers_count: z.number().int(),
    language: z.string().nullable(),
    forks_count: z.number().int(),
    open_issues_count: z.number().int(),
    master_branch: z.string().optional(),
    default_branch: z.string(),
    score: z.number(),
    forks_url: z.string().url(),
    keys_url: z.string(),
    collaborators_url: z.string(),
    teams_url: z.string().url(),
    hooks_url: z.string().url(),
    issue_events_url: z.string(),
    events_url: z.string().url(),
    assignees_url: z.string(),
    branches_url: z.string(),
    tags_url: z.string().url(),
    blobs_url: z.string(),
    git_tags_url: z.string(),
    git_refs_url: z.string(),
    trees_url: z.string(),
    statuses_url: z.string(),
    languages_url: z.string().url(),
    stargazers_url: z.string().url(),
    contributors_url: z.string().url(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    commits_url: z.string(),
    git_commits_url: z.string(),
    comments_url: z.string(),
    issue_comment_url: z.string(),
    contents_url: z.string(),
    compare_url: z.string(),
    merges_url: z.string().url(),
    archive_url: z.string(),
    downloads_url: z.string().url(),
    issues_url: z.string(),
    pulls_url: z.string(),
    milestones_url: z.string(),
    notifications_url: z.string(),
    labels_url: z.string(),
    releases_url: z.string(),
    deployments_url: z.string().url(),
    git_url: z.string(),
    ssh_url: z.string(),
    clone_url: z.string(),
    svn_url: z.string().url(),
    forks: z.number().int(),
    open_issues: z.number().int(),
    watchers: z.number().int(),
    topics: z.array(z.string()).optional(),
    mirror_url: z.string().url().nullable(),
    has_issues: z.boolean(),
    has_projects: z.boolean(),
    has_pages: z.boolean(),
    has_wiki: z.boolean(),
    has_downloads: z.boolean(),
    has_discussions: z.boolean().optional(),
    archived: z.boolean(),
    disabled: z.boolean(),
    visibility: z.string().optional(),
    license: nullable_license_simple.nullable(),
    permissions: z
      .object({
        admin: z.boolean(),
        maintain: z.boolean().optional(),
        push: z.boolean(),
        triage: z.boolean().optional(),
        pull: z.boolean(),
      })
      .passthrough()
      .optional(),
    text_matches: search_result_text_matches.optional(),
    temp_clone_token: z.string().optional(),
    allow_merge_commit: z.boolean().optional(),
    allow_squash_merge: z.boolean().optional(),
    allow_rebase_merge: z.boolean().optional(),
    allow_auto_merge: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    allow_forking: z.boolean().optional(),
    is_template: z.boolean().optional(),
    web_commit_signoff_required: z.boolean().optional(),
  })
  .passthrough()
const topic_search_result_item = z
  .object({
    name: z.string(),
    display_name: z.string().nullable(),
    short_description: z.string().nullable(),
    description: z.string().nullable(),
    created_by: z.string().nullable(),
    released: z.string().nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    featured: z.boolean(),
    curated: z.boolean(),
    score: z.number(),
    repository_count: z.number().int().nullish(),
    logo_url: z.string().url().nullish(),
    text_matches: search_result_text_matches.optional(),
    related: z
      .array(
        z
          .object({
            topic_relation: z
              .object({
                id: z.number().int(),
                name: z.string(),
                topic_id: z.number().int(),
                relation_type: z.string(),
              })
              .partial()
              .passthrough(),
          })
          .partial()
          .passthrough(),
      )
      .nullish(),
    aliases: z
      .array(
        z
          .object({
            topic_relation: z
              .object({
                id: z.number().int(),
                name: z.string(),
                topic_id: z.number().int(),
                relation_type: z.string(),
              })
              .partial()
              .passthrough(),
          })
          .partial()
          .passthrough(),
      )
      .nullish(),
  })
  .passthrough()
const user_search_result_item = z
  .object({
    login: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    avatar_url: z.string().url(),
    gravatar_id: z.string().nullable(),
    url: z.string().url(),
    html_url: z.string().url(),
    followers_url: z.string().url(),
    subscriptions_url: z.string().url(),
    organizations_url: z.string().url(),
    repos_url: z.string().url(),
    received_events_url: z.string().url(),
    type: z.string(),
    score: z.number(),
    following_url: z.string(),
    gists_url: z.string(),
    starred_url: z.string(),
    events_url: z.string(),
    public_repos: z.number().int().optional(),
    public_gists: z.number().int().optional(),
    followers: z.number().int().optional(),
    following: z.number().int().optional(),
    created_at: z.string().datetime({ offset: true }).optional(),
    updated_at: z.string().datetime({ offset: true }).optional(),
    name: z.string().nullish(),
    bio: z.string().nullish(),
    email: z.string().email().nullish(),
    location: z.string().nullish(),
    site_admin: z.boolean(),
    hireable: z.boolean().nullish(),
    text_matches: search_result_text_matches.optional(),
    blog: z.string().nullish(),
    company: z.string().nullish(),
    suspended_at: z.string().datetime({ offset: true }).nullish(),
  })
  .passthrough()
const private_user = z
  .object({
    login: z.string(),
    id: z.number().int(),
    node_id: z.string(),
    avatar_url: z.string().url(),
    gravatar_id: z.string().nullable(),
    url: z.string().url(),
    html_url: z.string().url(),
    followers_url: z.string().url(),
    following_url: z.string(),
    gists_url: z.string(),
    starred_url: z.string(),
    subscriptions_url: z.string().url(),
    organizations_url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string(),
    received_events_url: z.string().url(),
    type: z.string(),
    site_admin: z.boolean(),
    name: z.string().nullable(),
    company: z.string().nullable(),
    blog: z.string().nullable(),
    location: z.string().nullable(),
    email: z.string().email().nullable(),
    hireable: z.boolean().nullable(),
    bio: z.string().nullable(),
    twitter_username: z.string().nullish(),
    public_repos: z.number().int(),
    public_gists: z.number().int(),
    followers: z.number().int(),
    following: z.number().int(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    private_gists: z.number().int(),
    total_private_repos: z.number().int(),
    owned_private_repos: z.number().int(),
    disk_usage: z.number().int(),
    collaborators: z.number().int(),
    two_factor_authentication: z.boolean(),
    plan: z
      .object({
        collaborators: z.number().int(),
        name: z.string(),
        space: z.number().int(),
        private_repos: z.number().int(),
      })
      .passthrough()
      .optional(),
    suspended_at: z.string().datetime({ offset: true }).nullish(),
    business_plus: z.boolean().optional(),
    ldap_dn: z.string().optional(),
  })
  .passthrough()
const users_update_authenticated_Body = z
  .object({
    name: z.string(),
    email: z.string(),
    blog: z.string(),
    twitter_username: z.string().nullable(),
    company: z.string(),
    location: z.string(),
    hireable: z.boolean(),
    bio: z.string(),
  })
  .partial()
  .passthrough()
const codespaces_create_for_authenticated_user_Body = z.union([
  z
    .object({
      repository_id: z.number().int(),
      ref: z.string().optional(),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      client_ip: z.string().optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      multi_repo_permissions_opt_out: z.boolean().optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.number().int().optional(),
      display_name: z.string().optional(),
      retention_period_minutes: z.number().int().optional(),
    })
    .passthrough(),
  z
    .object({
      pull_request: z
        .object({
          pull_request_number: z.number().int(),
          repository_id: z.number().int(),
        })
        .passthrough(),
      location: z.string().optional(),
      geo: z
        .enum(["EuropeWest", "SoutheastAsia", "UsEast", "UsWest"])
        .optional(),
      machine: z.string().optional(),
      devcontainer_path: z.string().optional(),
      working_directory: z.string().optional(),
      idle_timeout_minutes: z.number().int().optional(),
    })
    .passthrough(),
])
const codespaces_secret = z
  .object({
    name: z.string(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    visibility: z.enum(["all", "private", "selected"]),
    selected_repositories_url: z.string().url(),
  })
  .passthrough()
const codespaces_user_public_key = z
  .object({ key_id: z.string(), key: z.string() })
  .passthrough()
const codespaces_create_or_update_secret_for_authenticated_user_Body = z
  .object({
    encrypted_value: z
      .string()
      .regex(
        /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/,
      )
      .optional(),
    key_id: z.string(),
    selected_repository_ids: z
      .array(z.union([z.number(), z.string()]))
      .optional(),
  })
  .passthrough()
const codespaces_update_for_authenticated_user_Body = z
  .object({
    machine: z.string(),
    display_name: z.string(),
    recent_folders: z.array(z.string()),
  })
  .partial()
  .passthrough()
const codespace_export_details = z
  .object({
    state: z.string().nullable(),
    completed_at: z.string().datetime({ offset: true }).nullable(),
    branch: z.string().nullable(),
    sha: z.string().nullable(),
    id: z.string(),
    export_url: z.string(),
    html_url: z.string().nullable(),
  })
  .partial()
  .passthrough()
const codespaces_publish_for_authenticated_user_Body = z
  .object({ name: z.string(), private: z.boolean() })
  .partial()
  .passthrough()
const codespace_with_full_repository = z
  .object({
    id: z.number().int(),
    name: z.string(),
    display_name: z.string().nullish(),
    environment_id: z.string().nullable(),
    owner: simple_user,
    billable_owner: simple_user,
    repository: full_repository,
    machine: nullable_codespace_machine.nullable(),
    devcontainer_path: z.string().nullish(),
    prebuild: z.boolean().nullable(),
    created_at: z.string().datetime({ offset: true }),
    updated_at: z.string().datetime({ offset: true }),
    last_used_at: z.string().datetime({ offset: true }),
    state: z.enum([
      "Unknown",
      "Created",
      "Queued",
      "Provisioning",
      "Available",
      "Awaiting",
      "Unavailable",
      "Deleted",
      "Moved",
      "Shutdown",
      "Archived",
      "Starting",
      "ShuttingDown",
      "Failed",
      "Exporting",
      "Updating",
      "Rebuilding",
    ]),
    url: z.string().url(),
    git_status: z
      .object({
        ahead: z.number().int(),
        behind: z.number().int(),
        has_unpushed_changes: z.boolean(),
        has_uncommitted_changes: z.boolean(),
        ref: z.string(),
      })
      .partial()
      .passthrough(),
    location: z.enum(["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]),
    idle_timeout_minutes: z.number().int().nullable(),
    web_url: z.string().url(),
    machines_url: z.string().url(),
    start_url: z.string().url(),
    stop_url: z.string().url(),
    publish_url: z.string().url().nullish(),
    pulls_url: z.string().url().nullable(),
    recent_folders: z.array(z.string()),
    runtime_constraints: z
      .object({ allowed_port_privacy_settings: z.array(z.string()).nullable() })
      .partial()
      .passthrough()
      .optional(),
    pending_operation: z.boolean().nullish(),
    pending_operation_disabled_reason: z.string().nullish(),
    idle_timeout_notice: z.string().nullish(),
    retention_period_minutes: z.number().int().nullish(),
    retention_expires_at: z.string().datetime({ offset: true }).nullish(),
  })
  .passthrough()
const users_set_primary_email_visibility_for_authenticated_user_Body = z
  .object({ visibility: z.enum(["public", "private"]) })
  .passthrough()
const email = z
  .object({
    email: z.string().email(),
    primary: z.boolean(),
    verified: z.boolean(),
    visibility: z.string().nullable(),
  })
  .passthrough()
const users_add_email_for_authenticated_user_Body = z.union([
  z.object({ emails: z.array(z.string()) }).passthrough(),
  z.array(z.string()),
  z.string(),
])
const gpg_key = z
  .object({
    id: z.number().int(),
    name: z.string().nullish(),
    primary_key_id: z.number().int().nullable(),
    key_id: z.string(),
    public_key: z.string(),
    emails: z.array(
      z
        .object({ email: z.string(), verified: z.boolean() })
        .partial()
        .passthrough(),
    ),
    subkeys: z.array(
      z
        .object({
          id: z.number().int(),
          primary_key_id: z.number().int(),
          key_id: z.string(),
          public_key: z.string(),
          emails: z.array(
            z
              .object({ email: z.string(), verified: z.boolean() })
              .partial()
              .passthrough(),
          ),
          subkeys: z.array(z.unknown()),
          can_sign: z.boolean(),
          can_encrypt_comms: z.boolean(),
          can_encrypt_storage: z.boolean(),
          can_certify: z.boolean(),
          created_at: z.string(),
          expires_at: z.string().nullable(),
          raw_key: z.string().nullable(),
          revoked: z.boolean(),
        })
        .partial()
        .passthrough(),
    ),
    can_sign: z.boolean(),
    can_encrypt_comms: z.boolean(),
    can_encrypt_storage: z.boolean(),
    can_certify: z.boolean(),
    created_at: z.string().datetime({ offset: true }),
    expires_at: z.string().datetime({ offset: true }).nullable(),
    revoked: z.boolean(),
    raw_key: z.string().nullable(),
  })
  .passthrough()
const users_create_gpg_key_for_authenticated_user_Body = z
  .object({ name: z.string().optional(), armored_public_key: z.string() })
  .passthrough()
const key = z
  .object({
    key: z.string(),
    id: z.number().int(),
    url: z.string(),
    title: z.string(),
    created_at: z.string().datetime({ offset: true }),
    verified: z.boolean(),
    read_only: z.boolean(),
  })
  .passthrough()
const users_create_public_ssh_key_for_authenticated_user_Body = z
  .object({
    title: z.string().optional(),
    key: z
      .string()
      .regex(/^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) /),
  })
  .passthrough()
const marketplace_account = z
  .object({
    url: z.string().url(),
    id: z.number().int(),
    type: z.string(),
    node_id: z.string().optional(),
    login: z.string(),
    email: z.string().email().nullish(),
    organization_billing_email: z.string().email().nullish(),
  })
  .passthrough()
const user_marketplace_purchase = z
  .object({
    billing_cycle: z.string(),
    next_billing_date: z.string().datetime({ offset: true }).nullable(),
    unit_count: z.number().int().nullable(),
    on_free_trial: z.boolean(),
    free_trial_ends_on: z.string().datetime({ offset: true }).nullable(),
    updated_at: z.string().datetime({ offset: true }).nullable(),
    account: marketplace_account,
    plan: marketplace_listing_plan,
  })
  .passthrough()
const orgs_update_membership_for_authenticated_user_Body = z
  .object({ state: z.literal("active") })
  .passthrough()
const migrations_start_for_authenticated_user_Body = z
  .object({
    lock_repositories: z.boolean().optional(),
    exclude_metadata: z.boolean().optional(),
    exclude_git_data: z.boolean().optional(),
    exclude_attachments: z.boolean().optional(),
    exclude_releases: z.boolean().optional(),
    exclude_owner_projects: z.boolean().optional(),
    org_metadata_only: z.boolean().optional(),
    exclude: z.array(z.literal("repositories")).optional(),
    repositories: z.array(z.string()),
  })
  .passthrough()
const projects_create_for_authenticated_user_Body = z
  .object({ name: z.string(), body: z.string().nullish() })
  .passthrough()
const repos_create_for_authenticated_user_Body = z
  .object({
    name: z.string(),
    description: z.string().optional(),
    homepage: z.string().optional(),
    private: z.boolean().optional(),
    has_issues: z.boolean().optional().default(true),
    has_projects: z.boolean().optional().default(true),
    has_wiki: z.boolean().optional().default(true),
    has_discussions: z.boolean().optional(),
    team_id: z.number().int().optional(),
    auto_init: z.boolean().optional(),
    gitignore_template: z.string().optional(),
    license_template: z.string().optional(),
    allow_squash_merge: z.boolean().optional().default(true),
    allow_merge_commit: z.boolean().optional().default(true),
    allow_rebase_merge: z.boolean().optional().default(true),
    allow_auto_merge: z.boolean().optional(),
    delete_branch_on_merge: z.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    has_downloads: z.boolean().optional().default(true),
    is_template: z.boolean().optional(),
  })
  .passthrough()
const social_account = z
  .object({ provider: z.string(), url: z.string() })
  .passthrough()
const users_add_social_account_for_authenticated_user_Body = z
  .object({ account_urls: z.array(z.string()) })
  .passthrough()
const ssh_signing_key = z
  .object({
    key: z.string(),
    id: z.number().int(),
    title: z.string(),
    created_at: z.string().datetime({ offset: true }),
  })
  .passthrough()
const users_create_ssh_signing_key_for_authenticated_user_Body = z
  .object({
    title: z.string().optional(),
    key: z
      .string()
      .regex(
        /^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com /,
      ),
  })
  .passthrough()
const hovercard = z
  .object({
    contexts: z.array(
      z.object({ message: z.string(), octicon: z.string() }).passthrough(),
    ),
  })
  .passthrough()
const key_simple = z
  .object({ id: z.number().int(), key: z.string() })
  .passthrough()
const starred_repository = z
  .object({
    starred_at: z.string().datetime({ offset: true }),
    repo: repository,
  })
  .passthrough()

export const schemas = {
  root,
  cwes,
  security_advisory_ecosystems,
  simple_user,
  security_advisory_credit_types,
  global_advisory,
  validation_error_simple,
  basic_error,
  nullable_simple_user,
  integration,
  webhook_config_url,
  webhook_config_content_type,
  webhook_config_secret,
  webhook_config_insecure_ssl,
  webhook_config,
  apps_update_webhook_config_for_app_Body,
  hook_delivery_item,
  validation_error,
  hook_delivery,
  enterprise,
  integration_installation_request,
  app_permissions,
  installation,
  apps_create_installation_access_token_Body,
  nullable_license_simple,
  repository,
  installation_token,
  nullable_scoped_installation,
  authorization,
  apps_scope_token_Body,
  simple_classroom_repository,
  simple_classroom_organization,
  classroom,
  classroom_assignment,
  simple_classroom_user,
  simple_classroom,
  simple_classroom_assignment,
  classroom_accepted_assignment,
  classroom_assignment_grade,
  code_of_conduct,
  alert_number,
  dependabot_alert_package,
  dependabot_alert_security_vulnerability,
  dependabot_alert_security_advisory,
  alert_url,
  alert_html_url,
  alert_created_at,
  alert_updated_at,
  alert_dismissed_at,
  alert_fixed_at,
  alert_auto_dismissed_at,
  simple_repository,
  dependabot_alert_with_repository,
  nullable_alert_updated_at,
  secret_scanning_alert_state,
  secret_scanning_alert_resolution,
  organization_secret_scanning_alert,
  actor,
  nullable_milestone,
  nullable_integration,
  author_association,
  reaction_rollup,
  issue,
  issue_comment,
  event,
  link_with_type,
  feed,
  base_gist,
  gists_create_Body,
  public_user,
  gist_history,
  gist_simple,
  gists_update_Body,
  gist_comment,
  gist_commit,
  gitignore_template,
  license_simple,
  license,
  markdown_render_Body,
  marketplace_listing_plan,
  marketplace_purchase,
  api_overview,
  security_and_analysis,
  minimal_repository,
  thread,
  activity_mark_notifications_as_read_Body,
  thread_subscription,
  organization_simple,
  organization_full,
  orgs_update_Body,
  actions_cache_usage_org_enterprise,
  actions_cache_usage_by_repository,
  oidc_custom_sub,
  empty_object,
  enabled_repositories,
  allowed_actions,
  selected_actions_url,
  actions_organization_permissions,
  actions_set_github_actions_permissions_organization_Body,
  actions_set_selected_repositories_enabled_github_actions_organization_Body,
  selected_actions,
  actions_default_workflow_permissions,
  actions_can_approve_pull_request_reviews,
  actions_get_default_workflow_permissions,
  actions_set_default_workflow_permissions,
  runner_label,
  runner,
  runner_application,
  actions_generate_runner_jitconfig_for_org_Body,
  authentication_token,
  actions_add_custom_labels_to_self_hosted_runner_for_org_Body,
  actions_set_custom_labels_for_self_hosted_runner_for_org_Body,
  organization_actions_secret,
  actions_public_key,
  actions_create_or_update_org_secret_Body,
  organization_actions_variable,
  actions_create_org_variable_Body,
  actions_update_org_variable_Body,
  alert_instances_url,
  code_scanning_alert_state,
  code_scanning_alert_dismissed_reason,
  code_scanning_alert_dismissed_comment,
  code_scanning_alert_rule_summary,
  code_scanning_analysis_tool_name,
  code_scanning_analysis_tool_version,
  code_scanning_analysis_tool_guid,
  code_scanning_analysis_tool,
  code_scanning_ref,
  code_scanning_analysis_analysis_key,
  code_scanning_alert_environment,
  code_scanning_analysis_category,
  code_scanning_alert_location,
  code_scanning_alert_classification,
  code_scanning_alert_instance,
  code_scanning_organization_alert_items,
  nullable_codespace_machine,
  codespace,
  codespaces_org_secret,
  codespaces_public_key,
  copilot_seat_breakdown,
  copilot_organization_details,
  nullable_team_simple,
  team,
  organization,
  copilot_seat_details,
  copilot_add_copilot_seats_for_teams_Body,
  copilot_add_copilot_seats_for_users_Body,
  organization_dependabot_secret,
  dependabot_public_key,
  dependabot_create_or_update_org_secret_Body,
  nullable_minimal_repository,
  package,
  organization_invitation,
  org_hook,
  orgs_create_webhook_Body,
  orgs_update_webhook_Body,
  interaction_group,
  interaction_limit_response,
  interaction_expiry,
  interaction_limit,
  orgs_create_invitation_Body,
  org_membership,
  orgs_set_membership_for_user_Body,
  migration,
  migrations_start_for_org_Body,
  organization_fine_grained_permission,
  organization_role,
  orgs_create_custom_organization_role_Body,
  orgs_patch_custom_organization_role_Body,
  package_version,
  organization_programmatic_access_grant_request,
  orgs_review_pat_grant_requests_in_bulk_Body,
  orgs_review_pat_grant_request_Body,
  organization_programmatic_access_grant,
  orgs_update_pat_accesses_Body,
  orgs_update_pat_access_Body,
  project,
  projects_create_for_org_Body,
  org_custom_property,
  orgs_create_or_update_custom_properties_Body,
  orgs_create_or_update_custom_property_Body,
  custom_property_value,
  org_repo_custom_property_values,
  orgs_create_or_update_custom_properties_values_for_repos_Body,
  repos_create_in_org_Body,
  nullable_repository,
  code_of_conduct_simple,
  full_repository,
  repository_rule_enforcement,
  repository_ruleset_bypass_actor,
  repository_ruleset_conditions,
  repository_ruleset_conditions_repository_name_target,
  repository_ruleset_conditions_repository_id_target,
  repository_ruleset_conditions_repository_property_spec,
  repository_ruleset_conditions_repository_property_target,
  org_ruleset_conditions,
  repository_rule_creation,
  repository_rule_update,
  repository_rule_deletion,
  repository_rule_required_linear_history,
  repository_rule_required_deployments,
  repository_rule_required_signatures,
  repository_rule_pull_request,
  repository_rule_params_status_check_configuration,
  repository_rule_required_status_checks,
  repository_rule_non_fast_forward,
  repository_rule_commit_message_pattern,
  repository_rule_commit_author_email_pattern,
  repository_rule_committer_email_pattern,
  repository_rule_branch_name_pattern,
  repository_rule_tag_name_pattern,
  repository_rule_params_workflow_file_reference,
  repository_rule_workflows,
  repository_rule,
  repository_ruleset,
  repos_create_org_ruleset_Body,
  rule_suites,
  rule_suite,
  repos_update_org_ruleset_Body,
  repository_advisory_vulnerability,
  repository_advisory_credit,
  repository_advisory,
  team_simple,
  actions_billing_usage,
  packages_billing_usage,
  combined_billing_usage,
  teams_create_Body,
  team_organization,
  team_full,
  teams_update_in_org_Body,
  team_discussion,
  teams_create_discussion_in_org_Body,
  teams_update_discussion_in_org_Body,
  team_discussion_comment,
  reaction,
  reactions_create_for_team_discussion_comment_in_org_Body,
  team_membership,
  teams_add_or_update_membership_for_user_in_org_Body,
  team_project,
  teams_add_or_update_project_permissions_in_org_Body,
  team_repository,
  project_card,
  projects_update_card_Body,
  projects_move_card_Body,
  project_column,
  projects_create_card_Body,
  projects_update_Body,
  projects_add_collaborator_Body,
  project_collaborator_permission,
  rate_limit,
  rate_limit_overview,
  repos_update_Body,
  artifact,
  actions_cache_list,
  job,
  oidc_custom_sub_repo,
  actions_set_custom_oidc_sub_claim_for_repo_Body,
  actions_secret,
  actions_variable,
  actions_enabled,
  actions_repository_permissions,
  actions_set_github_actions_permissions_repository_Body,
  actions_workflow_access_to_repository,
  referenced_workflow,
  pull_request_minimal,
  nullable_simple_commit,
  workflow_run,
  environment_approvals,
  review_custom_gates_comment_required,
  review_custom_gates_state_required,
  actions_review_custom_gates_for_run_Body,
  deployment_reviewer_type,
  pending_deployment,
  actions_review_pending_deployments_for_run_Body,
  deployment,
  workflow_run_usage,
  actions_create_or_update_repo_secret_Body,
  actions_create_repo_variable_Body,
  actions_update_repo_variable_Body,
  workflow,
  workflow_id,
  actions_create_workflow_dispatch_Body,
  workflow_usage,
  activity,
  autolink,
  repos_create_autolink_Body,
  check_automated_security_fixes,
  protected_branch_required_status_check,
  protected_branch_admin_enforced,
  protected_branch_pull_request_review,
  branch_restriction_policy,
  branch_protection,
  short_branch,
  nullable_git_user,
  verification,
  diff_entry,
  commit,
  branch_with_protection,
  repos_update_branch_protection_Body,
  status_check_policy,
  protected_branch,
  repos_update_pull_request_review_protection_Body,
  repos_update_status_check_protection_Body,
  repos_add_status_check_contexts_Body,
  repos_add_app_access_restrictions_Body,
  repos_add_team_access_restrictions_Body,
  repos_add_user_access_restrictions_Body,
  deployment_simple,
  check_run,
  check_annotation,
  simple_commit,
  check_suite,
  checks_set_suites_preferences_Body,
  check_suite_preference,
  code_scanning_alert_items,
  code_scanning_alert_rule,
  code_scanning_alert,
  code_scanning_alert_set_state,
  code_scanning_update_alert_Body,
  code_scanning_analysis_commit_sha,
  code_scanning_analysis_environment,
  code_scanning_analysis_created_at,
  code_scanning_analysis_url,
  code_scanning_analysis_sarif_id,
  code_scanning_analysis,
  code_scanning_analysis_deletion,
  code_scanning_codeql_database,
  code_scanning_default_setup,
  code_scanning_default_setup_update,
  code_scanning_default_setup_update_response,
  code_scanning_ref_full,
  code_scanning_analysis_sarif_file,
  code_scanning_upload_sarif_Body,
  code_scanning_sarifs_receipt,
  code_scanning_sarifs_status,
  codeowners_errors,
  codespaces_create_with_repo_for_authenticated_user_Body,
  codespace_machine,
  codespaces_permissions_check_for_devcontainer,
  repo_codespaces_secret,
  collaborator,
  repository_invitation,
  nullable_collaborator,
  repository_collaborator_permission,
  commit_comment,
  branch_short,
  repos_create_commit_comment_Body,
  link,
  auto_merge,
  pull_request_simple,
  simple_commit_status,
  combined_commit_status,
  status,
  nullable_code_of_conduct_simple,
  nullable_community_health_file,
  community_profile,
  commit_comparison,
  content_directory,
  content_file,
  content_symlink,
  content_submodule,
  repos_create_or_update_file_contents_Body,
  file_commit,
  repos_delete_file_Body,
  contributor,
  dependabot_alert,
  dependabot_update_alert_Body,
  dependabot_secret,
  dependency_graph_diff,
  dependency_graph_spdx_sbom,
  metadata,
  dependency,
  manifest,
  snapshot,
  repos_create_deployment_Body,
  deployment_status,
  repos_create_deployment_status_Body,
  repos_create_dispatch_event_Body,
  wait_timer,
  deployment_branch_policy_settings,
  environment,
  prevent_self_review,
  repos_create_or_update_environment_Body,
  deployment_branch_policy,
  deployment_branch_policy_name_pattern_with_type,
  deployment_branch_policy_name_pattern,
  custom_deployment_rule_app,
  deployment_protection_rule,
  actions_create_or_update_environment_secret_Body,
  repos_create_fork_Body,
  git_create_blob_Body,
  short_blob,
  blob,
  git_create_commit_Body,
  git_commit,
  git_ref,
  git_create_ref_Body,
  git_update_ref_Body,
  git_create_tag_Body,
  git_tag,
  git_create_tree_Body,
  git_tree,
  hook_response,
  hook,
  repos_create_webhook_Body,
  repos_update_webhook_Body,
  repos_update_webhook_config_for_repo_Body,
  repos_update_invitation_Body,
  issues_create_Body,
  nullable_issue,
  issue_event_label,
  issue_event_dismissed_review,
  issue_event_milestone,
  issue_event_project_card,
  issue_event_rename,
  issue_event,
  issues_update_Body,
  issues_add_assignees_Body,
  labeled_issue_event,
  unlabeled_issue_event,
  assigned_issue_event,
  unassigned_issue_event,
  milestoned_issue_event,
  demilestoned_issue_event,
  renamed_issue_event,
  review_requested_issue_event,
  review_request_removed_issue_event,
  review_dismissed_issue_event,
  locked_issue_event,
  added_to_project_issue_event,
  moved_column_in_project_issue_event,
  removed_from_project_issue_event,
  converted_note_to_issue_issue_event,
  issue_event_for_issue,
  label,
  issues_add_labels_Body,
  issues_lock_Body,
  timeline_comment_event,
  timeline_cross_referenced_event,
  timeline_committed_event,
  timeline_reviewed_event,
  pull_request_review_comment,
  timeline_line_commented_event,
  timeline_commit_commented_event,
  timeline_assigned_issue_event,
  timeline_unassigned_issue_event,
  state_change_issue_event,
  timeline_issue_events,
  deploy_key,
  repos_create_deploy_key_Body,
  issues_create_label_Body,
  issues_update_label_Body,
  language,
  license_content,
  merged_upstream,
  repos_merge_Body,
  milestone,
  issues_create_milestone_Body,
  issues_update_milestone_Body,
  pages_source_hash,
  pages_https_certificate,
  page,
  page_build,
  page_build_status,
  repos_create_pages_deployment_Body,
  page_deployment,
  pages_deployment_status,
  pages_health_check,
  repos_create_or_update_custom_properties_values_Body,
  pulls_create_Body,
  pull_request,
  pulls_update_Body,
  codespaces_create_with_pr_for_authenticated_user_Body,
  pulls_create_review_comment_Body,
  pulls_merge_Body,
  pull_request_merge_result,
  pull_request_review_request,
  pulls_remove_requested_reviewers_Body,
  pull_request_review,
  pulls_create_review_Body,
  review_comment,
  pulls_dismiss_review_Body,
  pulls_submit_review_Body,
  release_asset,
  release,
  repos_create_release_Body,
  repos_update_release_asset_Body,
  repos_generate_release_notes_Body,
  release_notes_content,
  repos_update_release_Body,
  reactions_create_for_release_Body,
  repository_rule_ruleset_info,
  repository_rule_detailed,
  repos_create_repo_ruleset_Body,
  repos_update_repo_ruleset_Body,
  secret_scanning_alert,
  secret_scanning_alert_resolution_comment,
  secret_scanning_update_alert_Body,
  secret_scanning_location_commit,
  secret_scanning_location_issue_title,
  secret_scanning_location_issue_body,
  secret_scanning_location_issue_comment,
  secret_scanning_location_discussion_title,
  secret_scanning_location_discussion_body,
  secret_scanning_location_discussion_comment,
  secret_scanning_location_pull_request_title,
  secret_scanning_location_pull_request_body,
  secret_scanning_location_pull_request_comment,
  secret_scanning_location_pull_request_review,
  secret_scanning_location_pull_request_review_comment,
  secret_scanning_location,
  repository_advisory_create,
  private_vulnerability_report_create,
  repository_advisory_update,
  stargazer,
  code_frequency_stat,
  commit_activity,
  contributor_activity,
  participation_stats,
  repos_create_commit_status_Body,
  repository_subscription,
  activity_set_repo_subscription_Body,
  tag,
  tag_protection,
  topic,
  repos_replace_all_topics_Body,
  traffic,
  clone_traffic,
  content_traffic,
  referrer_traffic,
  view_traffic,
  repos_transfer_Body,
  repos_create_using_template_Body,
  search_result_text_matches,
  code_search_result_item,
  commit_search_result_item,
  issue_search_result_item,
  label_search_result_item,
  repo_search_result_item,
  topic_search_result_item,
  user_search_result_item,
  private_user,
  users_update_authenticated_Body,
  codespaces_create_for_authenticated_user_Body,
  codespaces_secret,
  codespaces_user_public_key,
  codespaces_create_or_update_secret_for_authenticated_user_Body,
  codespaces_update_for_authenticated_user_Body,
  codespace_export_details,
  codespaces_publish_for_authenticated_user_Body,
  codespace_with_full_repository,
  users_set_primary_email_visibility_for_authenticated_user_Body,
  email,
  users_add_email_for_authenticated_user_Body,
  gpg_key,
  users_create_gpg_key_for_authenticated_user_Body,
  key,
  users_create_public_ssh_key_for_authenticated_user_Body,
  marketplace_account,
  user_marketplace_purchase,
  orgs_update_membership_for_authenticated_user_Body,
  migrations_start_for_authenticated_user_Body,
  projects_create_for_authenticated_user_Body,
  repos_create_for_authenticated_user_Body,
  social_account,
  users_add_social_account_for_authenticated_user_Body,
  ssh_signing_key,
  users_create_ssh_signing_key_for_authenticated_user_Body,
  hovercard,
  key_simple,
  starred_repository,
}

const endpoints = makeApi([
  {
    method: "get",
    path: "/",
    alias: "meta/root",
    description: `Get Hypermedia links to resources accessible in GitHub&#x27;s REST API`,
    requestFormat: "json",
    response: root,
  },
  {
    method: "get",
    path: "/advisories",
    alias: "security-advisories/list-global-advisories",
    description: `Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.

By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the &#x60;type&#x60; parameter in your request, with the value &#x60;malware&#x60;. For more information about the different types of security advisories, see &quot;[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "ghsa_id",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "type",
        type: "Query",
        schema: z
          .enum(["reviewed", "malware", "unreviewed"])
          .optional()
          .default("reviewed"),
      },
      {
        name: "cve_id",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "ecosystem",
        type: "Query",
        schema: z
          .enum([
            "actions",
            "composer",
            "erlang",
            "go",
            "maven",
            "npm",
            "nuget",
            "other",
            "pip",
            "pub",
            "rubygems",
            "rust",
          ])
          .optional(),
      },
      {
        name: "severity",
        type: "Query",
        schema: z
          .enum(["unknown", "low", "medium", "high", "critical"])
          .optional(),
      },
      {
        name: "cwes",
        type: "Query",
        schema: cwes,
      },
      {
        name: "is_withdrawn",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "affects",
        type: "Query",
        schema: cwes,
      },
      {
        name: "published",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "updated",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "modified",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional().default(30),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["updated", "published"])
          .optional()
          .default("published"),
      },
    ],
    response: z.array(global_advisory),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
      {
        status: 429,
        description: `Too many requests`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/advisories/:ghsa_id",
    alias: "security-advisories/get-global-advisory",
    description: `Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.`,
    requestFormat: "json",
    parameters: [
      {
        name: "ghsa_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: global_advisory,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/app",
    alias: "apps/get-authenticated",
    description: `Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the &#x60;installations_count&#x60; in the response. For more details about your app&#x27;s installations, see the &quot;[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)&quot; endpoint.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    response: integration,
  },
  {
    method: "post",
    path: "/app-manifests/:code/conversions",
    alias: "apps/create-from-manifest",
    description: `Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary &#x60;code&#x60; used to retrieve the GitHub App&#x27;s &#x60;id&#x60;, &#x60;pem&#x60; (private key), and &#x60;webhook_secret&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "code",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: integration.and(
      z
        .object({
          client_id: z.string(),
          client_secret: z.string(),
          webhook_secret: z.string().nullable(),
          pem: z.string(),
        })
        .passthrough(),
    ),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/app/hook/config",
    alias: "apps/get-webhook-config-for-app",
    description: `Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see &quot;[Creating a GitHub App](/developers/apps/creating-a-github-app).&quot;

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    response: webhook_config,
  },
  {
    method: "patch",
    path: "/app/hook/config",
    alias: "apps/update-webhook-config-for-app",
    description: `Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see &quot;[Creating a GitHub App](/developers/apps/creating-a-github-app).&quot;

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: apps_update_webhook_config_for_app_Body,
      },
    ],
    response: webhook_config,
  },
  {
    method: "get",
    path: "/app/hook/deliveries",
    alias: "apps/list-webhook-deliveries",
    description: `Returns a list of webhook deliveries for the webhook configured for a GitHub App.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "cursor",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "redelivery",
        type: "Query",
        schema: z.boolean().optional(),
      },
    ],
    response: z.array(hook_delivery_item),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/app/hook/deliveries/:delivery_id",
    alias: "apps/get-webhook-delivery",
    description: `Returns a delivery for the webhook configured for a GitHub App.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "delivery_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: hook_delivery,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/app/hook/deliveries/:delivery_id/attempts",
    alias: "apps/redeliver-webhook-delivery",
    description: `Redeliver a delivery for the webhook configured for a GitHub App.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "delivery_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/app/installation-requests",
    alias: "apps/list-installation-requests-for-authenticated-app",
    description: `Lists all the pending installation requests for the authenticated GitHub App.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(integration_installation_request),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/app/installations",
    alias: "apps/list-installations",
    description: `The permissions the installation has are included under the &#x60;permissions&#x60; key.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "outdated",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(installation),
  },
  {
    method: "get",
    path: "/app/installations/:installation_id",
    alias: "apps/get-installation",
    description: `Enables an authenticated GitHub App to find an installation&#x27;s information using the installation id.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: installation,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/app/installations/:installation_id",
    alias: "apps/delete-installation",
    description: `Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app&#x27;s access to your account&#x27;s resources, then we recommend the &quot;[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)&quot; endpoint.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/app/installations/:installation_id/access_tokens",
    alias: "apps/create-installation-access-token",
    description: `Creates an installation access token that enables a GitHub App to make authenticated API requests for the app&#x27;s installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of &#x60;401 - Unauthorized&#x60;, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. 

Optionally, you can use the &#x60;repositories&#x60; or &#x60;repository_ids&#x60; body parameters to specify individual repositories that the installation access token can access. If you don&#x27;t use &#x60;repositories&#x60; or &#x60;repository_ids&#x60; to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.

Optionally, use the &#x60;permissions&#x60; body parameter to specify the permissions that the installation access token should have. If &#x60;permissions&#x60; is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.

When using the repository or permission parameters to reduce the access of the token, the complexity of the token is increased due to both the number of permissions in the request and the number of repositories the token will have access to. If the complexity is too large, the token will fail to be issued. If this occurs, the error message will indicate the maximum number of repositories that should be requested. For the average application requesting 8 permissions, this limit is around 5000 repositories. With fewer permissions requested, more repositories are supported. 

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: apps_create_installation_access_token_Body.optional(),
      },
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: installation_token,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/app/installations/:installation_id/suspended",
    alias: "apps/suspend-installation",
    description: `Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account&#x27;s resources. When a GitHub App is suspended, the app&#x27;s access to the GitHub API or webhook events is blocked for that account.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/app/installations/:installation_id/suspended",
    alias: "apps/unsuspend-installation",
    description: `Removes a GitHub App installation suspension.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/applications/:client_id/grant",
    alias: "apps/delete-authorization",
    description: `OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application&#x27;s &#x60;client_id&#x60; and &#x60;client_secret&#x60; as the username and password. You must also provide a valid OAuth &#x60;access_token&#x60; as an input parameter and the grant for the token&#x27;s owner will be deleted.
Deleting an application&#x27;s grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user&#x27;s account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ access_token: z.string() }).passthrough(),
      },
      {
        name: "client_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/applications/:client_id/token",
    alias: "apps/check-token",
    description: `OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the application &#x60;client_id&#x60; and the password is its &#x60;client_secret&#x60;. Invalid tokens will return &#x60;404 NOT FOUND&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ access_token: z.string() }).passthrough(),
      },
      {
        name: "client_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: authorization,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/applications/:client_id/token",
    alias: "apps/reset-token",
    description: `OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the &quot;token&quot; property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application&#x27;s &#x60;client_id&#x60; and &#x60;client_secret&#x60; as the username and password. Invalid tokens will return &#x60;404 NOT FOUND&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ access_token: z.string() }).passthrough(),
      },
      {
        name: "client_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: authorization,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/applications/:client_id/token",
    alias: "apps/delete-token",
    description: `OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application&#x27;s &#x60;client_id&#x60; and &#x60;client_secret&#x60; as the username and password.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ access_token: z.string() }).passthrough(),
      },
      {
        name: "client_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/applications/:client_id/token/scoped",
    alias: "apps/scope-token",
    description: `Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
which repositories the token can access and which permissions are granted to the
token.

Invalid tokens will return &#x60;404 NOT FOUND&#x60;.

You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)
when accessing this endpoint, using the &#x60;client_id&#x60; and &#x60;client_secret&#x60; of the GitHub App
as the username and password.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: apps_scope_token_Body,
      },
      {
        name: "client_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: authorization,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/apps/:app_slug",
    alias: "apps/get-by-slug",
    description: `**Note**: The &#x60;:app_slug&#x60; is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., &#x60;https://github.com/settings/apps/:app_slug&#x60;).`,
    requestFormat: "json",
    parameters: [
      {
        name: "app_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: integration,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/assignments/:assignment_id",
    alias: "classroom/get-an-assignment",
    description: `Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.`,
    requestFormat: "json",
    parameters: [
      {
        name: "assignment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: classroom_assignment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/assignments/:assignment_id/accepted_assignments",
    alias: "classroom/list-accepted-assigments-for-an-assignment",
    description: `Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.`,
    requestFormat: "json",
    parameters: [
      {
        name: "assignment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(classroom_accepted_assignment),
  },
  {
    method: "get",
    path: "/assignments/:assignment_id/grades",
    alias: "classroom/get-assignment-grades",
    description: `Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.`,
    requestFormat: "json",
    parameters: [
      {
        name: "assignment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.array(classroom_assignment_grade),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/classrooms",
    alias: "classroom/list-classrooms",
    description: `Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.`,
    requestFormat: "json",
    parameters: [
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(simple_classroom),
  },
  {
    method: "get",
    path: "/classrooms/:classroom_id",
    alias: "classroom/get-a-classroom",
    description: `Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.`,
    requestFormat: "json",
    parameters: [
      {
        name: "classroom_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: classroom,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/classrooms/:classroom_id/assignments",
    alias: "classroom/list-assignments-for-a-classroom",
    description: `Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.`,
    requestFormat: "json",
    parameters: [
      {
        name: "classroom_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(simple_classroom_assignment),
  },
  {
    method: "get",
    path: "/codes_of_conduct",
    alias: "codes-of-conduct/get-all-codes-of-conduct",
    description: `Returns array of all GitHub&#x27;s codes of conduct.`,
    requestFormat: "json",
    response: z.array(code_of_conduct),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/codes_of_conduct/:key",
    alias: "codes-of-conduct/get-conduct-code",
    description: `Returns information about the specified GitHub code of conduct.`,
    requestFormat: "json",
    parameters: [
      {
        name: "key",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: code_of_conduct,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/emojis",
    alias: "emojis/get",
    description: `Lists all the emojis available to use on GitHub.`,
    requestFormat: "json",
    response: z.record(z.string()),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/enterprises/:enterprise/dependabot/alerts",
    alias: "dependabot/list-alerts-for-enterprise",
    description: `Lists Dependabot alerts for repositories that are owned by the specified enterprise.

The authenticated user must be a member of the enterprise to use this endpoint.

Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see &quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "enterprise",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "severity",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "ecosystem",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "package",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "scope",
        type: "Query",
        schema: z.enum(["development", "runtime"]).optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "first",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional().default(30),
      },
      {
        name: "last",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(dependabot_alert_with_repository),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/enterprises/:enterprise/secret-scanning/alerts",
    alias: "secret-scanning/list-alerts-for-enterprise",
    description: `Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.

Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).

The authenticated user must be a member of the enterprise in order to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope or &#x60;security_events&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "enterprise",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "resolved"]).optional(),
      },
      {
        name: "secret_type",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "resolution",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "validity",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(organization_secret_scanning_alert),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/events",
    alias: "activity/list-public-events",
    description: `We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/feeds",
    alias: "activity/get-feeds",
    description: `Lists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.

*   **Timeline**: The GitHub global public timeline
*   **User**: The public timeline for any user, using &#x60;uri_template&#x60;. For more information, see &quot;[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia).&quot;
*   **Current user public**: The public timeline for the authenticated user
*   **Current user**: The private timeline for the authenticated user
*   **Current user actor**: The private timeline for activity created by the authenticated user
*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.

By default, timeline resources are returned in JSON. You can specify the &#x60;application/atom+xml&#x60; type in the &#x60;Accept&#x60; header to return timeline resources in Atom format. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.`,
    requestFormat: "json",
    response: feed,
  },
  {
    method: "get",
    path: "/gists",
    alias: "gists/list",
    description: `Lists the authenticated user&#x27;s gists or if called anonymously, this endpoint returns all public gists:`,
    requestFormat: "json",
    parameters: [
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(base_gist),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/gists",
    alias: "gists/create",
    description: `Allows you to add a new gist with one or more files.

**Note:** Don&#x27;t name your files &quot;gistfile&quot; with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: gists_create_Body,
      },
    ],
    response: gist_simple,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/:gist_id",
    alias: "gists/get",
    description: `Gets a specified gist.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.`,
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: gist_simple,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden Gist`,
        schema: z
          .object({
            block: z
              .object({
                reason: z.string(),
                created_at: z.string(),
                html_url: z.string().nullable(),
              })
              .partial()
              .passthrough(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/gists/:gist_id",
    alias: "gists/update",
    description: `Allows you to update a gist&#x27;s description and to update, delete, or rename gist files. Files
from the previous version of the gist that aren&#x27;t explicitly changed during an edit
are unchanged.

At least one of &#x60;description&#x60; or &#x60;files&#x60; is required.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: gists_update_Body.nullable(),
      },
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: gist_simple,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/gists/:gist_id",
    alias: "gists/delete",
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/:gist_id/:sha",
    alias: "gists/get-revision",
    description: `Gets a specified gist revision.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.`,
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sha",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: gist_simple,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/:gist_id/comments",
    alias: "gists/list-comments",
    description: `Lists the comments on a gist.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.`,
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(gist_comment),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/gists/:gist_id/comments",
    alias: "gists/create-comment",
    description: `Creates a comment on a gist.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string().max(65535) }).passthrough(),
      },
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: gist_comment,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/:gist_id/comments/:comment_id",
    alias: "gists/get-comment",
    description: `Gets a comment on a gist.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.`,
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: gist_comment,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden Gist`,
        schema: z
          .object({
            block: z
              .object({
                reason: z.string(),
                created_at: z.string(),
                html_url: z.string().nullable(),
              })
              .partial()
              .passthrough(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/gists/:gist_id/comments/:comment_id",
    alias: "gists/update-comment",
    description: `Updates a comment on a gist.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string().max(65535) }).passthrough(),
      },
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: gist_comment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/gists/:gist_id/comments/:comment_id",
    alias: "gists/delete-comment",
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/:gist_id/commits",
    alias: "gists/list-commits",
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(gist_commit),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/:gist_id/forks",
    alias: "gists/list-forks",
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(gist_simple),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/gists/:gist_id/forks",
    alias: "gists/fork",
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: base_gist,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/:gist_id/star",
    alias: "gists/check-is-starred",
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Not Found if gist is not starred`,
        schema: z.object({}).partial(),
      },
    ],
  },
  {
    method: "put",
    path: "/gists/:gist_id/star",
    alias: "gists/star",
    description: `Note that you&#x27;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see &quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/gists/:gist_id/star",
    alias: "gists/unstar",
    requestFormat: "json",
    parameters: [
      {
        name: "gist_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/public",
    alias: "gists/list-public",
    description: `List public gists sorted by most recently updated to least recently updated.

Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.`,
    requestFormat: "json",
    parameters: [
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(base_gist),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gists/starred",
    alias: "gists/list-starred",
    description: `List the authenticated user&#x27;s starred gists:`,
    requestFormat: "json",
    parameters: [
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(base_gist),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/gitignore/templates",
    alias: "gitignore/get-all-templates",
    description: `List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).`,
    requestFormat: "json",
    response: z.array(z.string()),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/gitignore/templates/:name",
    alias: "gitignore/get-template",
    description: `Get the content of a gitignore template.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw .gitignore contents.`,
    requestFormat: "json",
    parameters: [
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: gitignore_template,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/installation/repositories",
    alias: "apps/list-repos-accessible-to-installation",
    description: `List repositories that an app installation can access.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repositories: z.array(repository),
        repository_selection: z.string().optional(),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/installation/token",
    alias: "apps/revoke-installation-access-token",
    description: `Revokes the installation token you&#x27;re using to authenticate as an installation and access this endpoint.

Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the &quot;[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)&quot; endpoint.`,
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/issues",
    alias: "issues/list",
    description: `List issues assigned to the authenticated user across all visible repositories including owned repositories, member
repositories, and organization repositories. You can use the &#x60;filter&#x60; query parameter to fetch issues that are not
necessarily assigned to you.

**Note**: GitHub&#x27;s REST API considers every pull request an issue, but not every issue is a pull request. For this
reason, &quot;Issues&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by
the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from &quot;Issues&quot; endpoints will be an _issue id_. To find out the pull
request id, use the &quot;[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)&quot; endpoint.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "filter",
        type: "Query",
        schema: z
          .enum([
            "assigned",
            "created",
            "mentioned",
            "subscribed",
            "repos",
            "all",
          ])
          .optional()
          .default("assigned"),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "labels",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "comments"])
          .optional()
          .default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "collab",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "orgs",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "owned",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "pulls",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/licenses",
    alias: "licenses/get-all-commonly-used",
    description: `Lists the most commonly used licenses on GitHub. For more information, see &quot;[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "featured",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(license_simple),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/licenses/:license",
    alias: "licenses/get",
    description: `Gets information about a specific license. For more information, see &quot;[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "license",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: license,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/markdown",
    alias: "markdown/render",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: markdown_render_Body,
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/markdown/raw",
    alias: "markdown/render-raw",
    description: `You must send Markdown as plain text (using a &#x60;Content-Type&#x60; header of &#x60;text/plain&#x60; or &#x60;text/x-markdown&#x60;) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.`,
    requestFormat: "text",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.string().optional(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/marketplace_listing/accounts/:account_id",
    alias: "apps/get-subscription-plan-for-account",
    description: `Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won&#x27;t be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "account_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: marketplace_purchase,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Not Found when the account has not purchased the listing`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/marketplace_listing/plans",
    alias: "apps/list-plans",
    description: `Lists all plans that are part of your GitHub Marketplace listing.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(marketplace_listing_plan),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/marketplace_listing/plans/:plan_id/accounts",
    alias: "apps/list-accounts-for-plan",
    description: `Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won&#x27;t be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "plan_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(marketplace_purchase),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/marketplace_listing/stubbed/accounts/:account_id",
    alias: "apps/get-subscription-plan-for-account-stubbed",
    description: `Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won&#x27;t be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "account_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: marketplace_purchase,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Not Found when the account has not purchased the listing`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/marketplace_listing/stubbed/plans",
    alias: "apps/list-plans-stubbed",
    description: `Lists all plans that are part of your GitHub Marketplace listing.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(marketplace_listing_plan),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/marketplace_listing/stubbed/plans/:plan_id/accounts",
    alias: "apps/list-accounts-for-plan-stubbed",
    description: `Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won&#x27;t be processed until the end of their billing cycle, you will also see the upcoming pending change.

GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "plan_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(marketplace_purchase),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/meta",
    alias: "meta/get",
    description: `Returns meta information about GitHub, including a list of GitHub&#x27;s IP addresses. For more information, see &quot;[About GitHub&#x27;s IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).&quot;

The API&#x27;s response also includes a list of GitHub&#x27;s domain names.

The values shown in the documentation&#x27;s response are example values. You must always query the API directly to get the latest values.

**Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.`,
    requestFormat: "json",
    response: api_overview,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/networks/:owner/:repo/events",
    alias: "activity/list-public-events-for-repo-network",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/notifications",
    alias: "activity/list-notifications-for-authenticated-user",
    description: `List all notifications for the current user, sorted by most recently updated.`,
    requestFormat: "json",
    parameters: [
      {
        name: "all",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "participating",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(50),
      },
    ],
    response: z.array(thread),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/notifications",
    alias: "activity/mark-notifications-as-read",
    description: `Marks all notifications as &quot;read&quot; for the current user. If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub will run an asynchronous process to mark notifications as &quot;read.&quot; To check whether any &quot;unread&quot; notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: activity_mark_notifications_as_read_Body.optional(),
      },
    ],
    response: z.object({ message: z.string() }).partial().passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/notifications/threads/:thread_id",
    alias: "activity/get-thread",
    description: `Gets information about a notification thread.`,
    requestFormat: "json",
    parameters: [
      {
        name: "thread_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: thread,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/notifications/threads/:thread_id",
    alias: "activity/mark-thread-as-read",
    description: `Marks a thread as &quot;read.&quot; Marking a thread as &quot;read&quot; is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.`,
    requestFormat: "json",
    parameters: [
      {
        name: "thread_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/notifications/threads/:thread_id",
    alias: "activity/mark-thread-as-done",
    description: `Marks a thread as &quot;done.&quot; Marking a thread as &quot;done&quot; is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.`,
    requestFormat: "json",
    parameters: [
      {
        name: "thread_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/notifications/threads/:thread_id/subscription",
    alias: "activity/get-thread-subscription-for-authenticated-user",
    description: `This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).

Note that subscriptions are only generated if a user is participating in a conversation--for example, they&#x27;ve replied to the thread, were **@mentioned**, or manually subscribe to a thread.`,
    requestFormat: "json",
    parameters: [
      {
        name: "thread_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: thread_subscription,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/notifications/threads/:thread_id/subscription",
    alias: "activity/set-thread-subscription",
    description: `If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.

You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.

Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ ignored: z.boolean() })
          .partial()
          .passthrough()
          .optional(),
      },
      {
        name: "thread_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: thread_subscription,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/notifications/threads/:thread_id/subscription",
    alias: "activity/delete-thread-subscription",
    description: `Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set &#x60;ignore&#x60; to &#x60;true&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "thread_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/octocat",
    alias: "meta/get-octocat",
    description: `Get the octocat as ASCII art`,
    requestFormat: "json",
    parameters: [
      {
        name: "s",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/organizations",
    alias: "orgs/list",
    description: `Lists all organizations, in the order that they were created.

**Note:** Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.`,
    requestFormat: "json",
    parameters: [
      {
        name: "since",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(organization_simple),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org",
    alias: "orgs/get",
    description: `Gets information about an organization.

When the value of &#x60;two_factor_requirement_enabled&#x60; is &#x60;true&#x60;, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).

To see the full details about an organization, the authenticated user must be an organization owner.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to see the full details about an organization.

To see information about an organization&#x27;s GitHub plan, GitHub Apps need the &#x60;Organization plan&#x60; permission.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: organization_full,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/orgs/:org",
    alias: "orgs/update",
    description: `**Parameter Deprecation Notice:** GitHub will replace and discontinue &#x60;members_allowed_repository_creation_type&#x60; in favor of more granular permissions. The new input parameters are &#x60;members_can_create_public_repositories&#x60;, &#x60;members_can_create_private_repositories&#x60; for all organizations and &#x60;members_can_create_internal_repositories&#x60; for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).

Updates the organization&#x27;s profile and member privileges.

The authenticated user must be an organization owner to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; or &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_update_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: organization_full,
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed`,
        schema: z.union([validation_error, validation_error_simple]),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org",
    alias: "orgs/delete",
    description: `Deletes an organization and all its repositories.

The organization login will be unavailable for 90 days after deletion.

Please review the Terms of Service regarding account deletion before using this endpoint:

https://docs.github.com/site-policy/github-terms/github-terms-of-service`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/:security_product/:enablement",
    alias: "orgs/enable-or-disable-security-product-on-all-org-repos",
    description: `Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see &quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).&quot;

The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ query_suite: z.enum(["default", "extended"]) })
          .partial()
          .passthrough()
          .optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "security_product",
        type: "Path",
        schema: z.enum([
          "dependency_graph",
          "dependabot_alerts",
          "dependabot_security_updates",
          "advanced_security",
          "code_scanning_default_setup",
          "secret_scanning",
          "secret_scanning_push_protection",
        ]),
      },
      {
        name: "enablement",
        type: "Path",
        schema: z.enum(["enable_all", "disable_all"]),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 422,
        description: `The action could not be taken due to an in progress enablement, or a policy is preventing enablement`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/actions/cache/usage",
    alias: "actions/get-actions-cache-usage-for-org",
    description: `Gets the total GitHub Actions cache usage for an organization.
The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.

OAuth tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_cache_usage_org_enterprise,
  },
  {
    method: "get",
    path: "/orgs/:org/actions/cache/usage-by-repository",
    alias: "actions/get-actions-cache-usage-by-repo-for-org",
    description: `Lists repositories and their GitHub Actions cache usage for an organization.
The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.

OAuth tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repository_cache_usages: z.array(actions_cache_usage_by_repository),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/oidc/customization/sub",
    alias: "oidc/get-oidc-custom-sub-template-for-org",
    description: `Gets the customization template for an OpenID Connect (OIDC) subject claim.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: oidc_custom_sub,
  },
  {
    method: "put",
    path: "/orgs/:org/actions/oidc/customization/sub",
    alias: "oidc/update-oidc-custom-sub-template-for-org",
    description: `Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: oidc_custom_sub,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/actions/permissions",
    alias: "actions/get-github-actions-permissions-organization",
    description: `Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_organization_permissions,
  },
  {
    method: "put",
    path: "/orgs/:org/actions/permissions",
    alias: "actions/set-github-actions-permissions-organization",
    description: `Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_set_github_actions_permissions_organization_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/permissions/repositories",
    alias:
      "actions/list-selected-repositories-enabled-github-actions-organization",
    description: `Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({ total_count: z.number(), repositories: z.array(repository) })
      .passthrough(),
  },
  {
    method: "put",
    path: "/orgs/:org/actions/permissions/repositories",
    alias:
      "actions/set-selected-repositories-enabled-github-actions-organization",
    description: `Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).&quot;


OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          actions_set_selected_repositories_enabled_github_actions_organization_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "put",
    path: "/orgs/:org/actions/permissions/repositories/:repository_id",
    alias: "actions/enable-selected-repository-github-actions-organization",
    description: `Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/permissions/repositories/:repository_id",
    alias: "actions/disable-selected-repository-github-actions-organization",
    description: `Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/permissions/selected-actions",
    alias: "actions/get-allowed-actions-organization",
    description: `Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: selected_actions,
  },
  {
    method: "put",
    path: "/orgs/:org/actions/permissions/selected-actions",
    alias: "actions/set-allowed-actions-organization",
    description: `Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: selected_actions.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/permissions/workflow",
    alias:
      "actions/get-github-actions-default-workflow-permissions-organization",
    description: `Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization,
as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_get_default_workflow_permissions,
  },
  {
    method: "put",
    path: "/orgs/:org/actions/permissions/workflow",
    alias:
      "actions/set-github-actions-default-workflow-permissions-organization",
    description: `Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions
can submit approving pull request reviews. For more information, see
&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_set_default_workflow_permissions.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/runners",
    alias: "actions/list-self-hosted-runners-for-org",
    description: `Lists all self-hosted runners configured in an organization.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), runners: z.array(runner) })
      .passthrough(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/runners/:runner_id",
    alias: "actions/get-self-hosted-runner-for-org",
    description: `Gets a specific self-hosted runner configured in an organization.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: runner,
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/runners/:runner_id",
    alias: "actions/delete-self-hosted-runner-from-org",
    description: `Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/runners/:runner_id/labels",
    alias: "actions/list-labels-for-self-hosted-runner-for-org",
    description: `Lists all labels for a self-hosted runner configured in an organization.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/actions/runners/:runner_id/labels",
    alias: "actions/add-custom-labels-to-self-hosted-runner-for-org",
    description: `Adds custom labels to a self-hosted runner configured in an organization.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_add_custom_labels_to_self_hosted_runner_for_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/actions/runners/:runner_id/labels",
    alias: "actions/set-custom-labels-for-self-hosted-runner-for-org",
    description: `Remove all previous custom labels and set the new custom labels for a specific
self-hosted runner configured in an organization.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_set_custom_labels_for_self_hosted_runner_for_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/runners/:runner_id/labels",
    alias: "actions/remove-all-custom-labels-from-self-hosted-runner-for-org",
    description: `Remove all custom labels from a self-hosted runner configured in an
organization. Returns the remaining read-only labels from the runner.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/runners/:runner_id/labels/:name",
    alias: "actions/remove-custom-label-from-self-hosted-runner-for-org",
    description: `Remove a custom label from a self-hosted runner configured
in an organization. Returns the remaining labels from the runner.

This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not
present on the runner.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/actions/runners/downloads",
    alias: "actions/list-runner-applications-for-org",
    description: `Lists binaries for the runner application that you can download and run.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.  If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(runner_application),
  },
  {
    method: "post",
    path: "/orgs/:org/actions/runners/generate-jitconfig",
    alias: "actions/generate-runner-jitconfig-for-org",
    description: `Generates a configuration that can be passed to the runner application at startup.

The authenticated user must have admin access to the organization.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_generate_runner_jitconfig_for_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ runner: runner, encoded_jit_config: z.string() })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/actions/runners/registration-token",
    alias: "actions/create-registration-token-for-org",
    description: `Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.

For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to configure your self-hosted runner:

&#x60;&#x60;&#x60;
./config.sh --url https://github.com/octo-org --token TOKEN
&#x60;&#x60;&#x60;

Authenticated users must have admin access to the organization to use this endpoint.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: authentication_token,
  },
  {
    method: "post",
    path: "/orgs/:org/actions/runners/remove-token",
    alias: "actions/create-remove-token-for-org",
    description: `Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.

For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:

&#x60;&#x60;&#x60;
./config.sh remove --token TOKEN
&#x60;&#x60;&#x60;

Authenticated users must have admin access to the organization to use this endpoint.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: authentication_token,
  },
  {
    method: "get",
    path: "/orgs/:org/actions/secrets",
    alias: "actions/list-org-secrets",
    description: `Lists all secrets available in an organization without revealing their
encrypted values.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(organization_actions_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/secrets/:secret_name",
    alias: "actions/get-org-secret",
    description: `Gets a single organization secret without revealing its encrypted value.

The authenticated user must have collaborator access to a repository to create, update, or read secrets

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: organization_actions_secret,
  },
  {
    method: "put",
    path: "/orgs/:org/actions/secrets/:secret_name",
    alias: "actions/create-or-update-org-secret",
    description: `Creates or updates an organization secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_or_update_org_secret_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/secrets/:secret_name",
    alias: "actions/delete-org-secret",
    description: `Deletes a secret in an organization using the secret name.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/secrets/:secret_name/repositories",
    alias: "actions/list-selected-repos-for-org-secret",
    description: `Lists all repositories that have been selected when the &#x60;visibility&#x60;
for repository access to a secret is set to &#x60;selected&#x60;.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repositories: z.array(minimal_repository),
      })
      .passthrough(),
  },
  {
    method: "put",
    path: "/orgs/:org/actions/secrets/:secret_name/repositories",
    alias: "actions/set-selected-repos-for-org-secret",
    description: `Replaces all repositories for an organization secret when the &#x60;visibility&#x60;
for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create
or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          actions_set_selected_repositories_enabled_github_actions_organization_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "put",
    path: "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id",
    alias: "actions/add-selected-repo-to-org-secret",
    description: `Adds a repository to an organization secret when the &#x60;visibility&#x60; for
repository access is set to &#x60;selected&#x60;. For more information about setting the visibility, see [Create or
update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Conflict when visibility type is not set to selected`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id",
    alias: "actions/remove-selected-repo-from-org-secret",
    description: `Removes a repository from an organization secret when the &#x60;visibility&#x60;
for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create
or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Conflict when visibility type not set to selected`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/actions/secrets/public-key",
    alias: "actions/get-org-public-key",
    description: `Gets your public key, which you need to encrypt secrets. You need to
encrypt a secret before you can create or update secrets.

The authenticated user must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_public_key,
  },
  {
    method: "get",
    path: "/orgs/:org/actions/variables",
    alias: "actions/list-org-variables",
    description: `Lists all organization variables.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(10),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        variables: z.array(organization_actions_variable),
      })
      .passthrough(),
  },
  {
    method: "post",
    path: "/orgs/:org/actions/variables",
    alias: "actions/create-org-variable",
    description: `Creates an organization variable that you can reference in a GitHub Actions workflow.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_org_variable_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/variables/:name",
    alias: "actions/get-org-variable",
    description: `Gets a specific variable in an organization.

The authenticated user must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: organization_actions_variable,
  },
  {
    method: "patch",
    path: "/orgs/:org/actions/variables/:name",
    alias: "actions/update-org-variable",
    description: `Updates an organization variable that you can reference in a GitHub Actions workflow.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_update_org_variable_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/variables/:name",
    alias: "actions/delete-org-variable",
    description: `Deletes an organization variable using the variable name.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/actions/variables/:name/repositories",
    alias: "actions/list-selected-repos-for-org-variable",
    description: `Lists all repositories that can access an organization variable
that is available to selected repositories.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repositories: z.array(minimal_repository),
      })
      .passthrough(),
    errors: [
      {
        status: 409,
        description: `Response when the visibility of the variable is not set to &#x60;selected&#x60;`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/actions/variables/:name/repositories",
    alias: "actions/set-selected-repos-for-org-variable",
    description: `Replaces all repositories for an organization variable that is available
to selected repositories. Organization variables that are available to selected
repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          actions_set_selected_repositories_enabled_github_actions_organization_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Response when the visibility of the variable is not set to &#x60;selected&#x60;`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    alias: "actions/add-selected-repo-to-org-variable",
    description: `Adds a repository to an organization variable that is available to selected repositories.
Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Response when the visibility of the variable is not set to &#x60;selected&#x60;`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/actions/variables/:name/repositories/:repository_id",
    alias: "actions/remove-selected-repo-from-org-variable",
    description: `Removes a repository from an organization variable that is
available to selected repositories. Organization variables that are available to
selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Response when the visibility of the variable is not set to &#x60;selected&#x60;`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/blocks",
    alias: "orgs/list-blocked-users",
    description: `List the users blocked by an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
  },
  {
    method: "get",
    path: "/orgs/:org/blocks/:username",
    alias: "orgs/check-blocked-user",
    description: `Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `If the user is not blocked`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/blocks/:username",
    alias: "orgs/block-user",
    description: `Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/blocks/:username",
    alias: "orgs/unblock-user",
    description: `Unblocks the given user on behalf of the specified organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/code-scanning/alerts",
    alias: "code-scanning/list-alerts-for-org",
    description: `Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see &quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).&quot;

The authenticated user must be an owner or security manager for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; or &#x60;repo&#x60;s cope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "tool_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "tool_guid",
        type: "Query",
        schema: z.string().nullish(),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "dismissed", "fixed"]).optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "severity",
        type: "Query",
        schema: z
          .enum([
            "critical",
            "high",
            "medium",
            "low",
            "warning",
            "note",
            "error",
          ])
          .optional(),
      },
    ],
    response: z.array(code_scanning_organization_alert_items),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/codespaces",
    alias: "codespaces/list-in-organization",
    description: `Lists the codespaces associated to a specified organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), codespaces: z.array(codespace) })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/codespaces/secrets",
    alias: "codespaces/list-org-secrets",
    description: `Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted
values.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(codespaces_org_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/orgs/:org/codespaces/secrets/:secret_name",
    alias: "codespaces/get-org-secret",
    description: `Gets an organization development environment secret without revealing its encrypted value.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespaces_org_secret,
  },
  {
    method: "put",
    path: "/orgs/:org/codespaces/secrets/:secret_name",
    alias: "codespaces/create-or-update-org-secret",
    description: `Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_or_update_org_secret_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/codespaces/secrets/:secret_name",
    alias: "codespaces/delete-org-secret",
    description: `Deletes an organization development environment secret using the secret name.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/codespaces/secrets/:secret_name/repositories",
    alias: "codespaces/list-selected-repos-for-org-secret",
    description: `Lists all repositories that have been selected when the &#x60;visibility&#x60;
for repository access to a secret is set to &#x60;selected&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repositories: z.array(minimal_repository),
      })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/codespaces/secrets/:secret_name/repositories",
    alias: "codespaces/set-selected-repos-for-org-secret",
    description: `Replaces all repositories for an organization development environment secret when the &#x60;visibility&#x60;
for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create
or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          actions_set_selected_repositories_enabled_github_actions_organization_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict when visibility type not set to selected`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/codespaces/secrets/:secret_name/repositories/:repository_id",
    alias: "codespaces/add-selected-repo-to-org-secret",
    description: `Adds a repository to an organization development environment secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict when visibility type is not set to selected`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/codespaces/secrets/:secret_name/repositories/:repository_id",
    alias: "codespaces/remove-selected-repo-from-org-secret",
    description: `Removes a repository from an organization development environment secret when the &#x60;visibility&#x60;
for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create
or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict when visibility type not set to selected`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/codespaces/secrets/public-key",
    alias: "codespaces/get-org-public-key",
    description: `Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets.
OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespaces_public_key,
  },
  {
    method: "get",
    path: "/orgs/:org/copilot/billing",
    alias: "copilot/get-copilot-organization-details",
    description: `**Note**: This endpoint is in beta and is subject to change.

Gets information about an organization&#x27;s Copilot subscription, including seat breakdown
and code matching policies. To configure these settings, go to your organization&#x27;s settings on GitHub.com.
For more information, see &quot;[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)&quot;.

Only organization owners can configure and view details about the organization&#x27;s Copilot Business subscription.

OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        seat_breakdown: copilot_seat_breakdown,
        public_code_suggestions: z.enum([
          "allow",
          "block",
          "unconfigured",
          "unknown",
        ]),
        ide_chat: z.enum(["enabled", "disabled", "unconfigured"]).optional(),
        platform_chat: z
          .enum(["enabled", "disabled", "unconfigured"])
          .optional(),
        cli: z.enum(["enabled", "disabled", "unconfigured"]).optional(),
        seat_management_setting: z.enum([
          "assign_all",
          "assign_selected",
          "disabled",
          "unconfigured",
        ]),
      })
      .passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `There is a problem with your account&#x27;s associated payment method.`,
        schema: z.void(),
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/copilot/billing/seats",
    alias: "copilot/list-copilot-seats",
    description: `**Note**: This endpoint is in beta and is subject to change.

Lists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).

Only organization owners can configure and view details about the organization&#x27;s Copilot Business or Enterprise subscription.

OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(50),
      },
    ],
    response: z
      .object({
        total_seats: z.number().int(),
        seats: z.array(copilot_seat_details),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/copilot/billing/selected_teams",
    alias: "copilot/add-copilot-seats-for-teams",
    description: `**Note**: This endpoint is in beta and is subject to change.

Purchases a GitHub Copilot seat for all users within each specified team.
The organization will be billed accordingly. For more information about Copilot pricing, see &quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)&quot;.

Only organization owners can configure GitHub Copilot in their organization.

In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
For more information about setting up a Copilot subscription, see &quot;[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)&quot;.
For more information about setting a suggestion matching policy, see &quot;[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)&quot;.

OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: copilot_add_copilot_seats_for_teams_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({ seats_created: z.number().int() }).passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization&#x27;s Copilot access setting is set to enable Copilot for all users or is unconfigured.`,
        schema: z.void(),
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/copilot/billing/selected_teams",
    alias: "copilot/cancel-copilot-seat-assignment-for-teams",
    description: `**Note**: This endpoint is in beta and is subject to change.

Cancels the Copilot seat assignment for all members of each team specified.
This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.

For more information about Copilot pricing, see &quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)&quot;.

For more information about disabling access to Copilot Business or Enterprise, see &quot;[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)&quot;.

Only organization owners can configure GitHub Copilot in their organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: copilot_add_copilot_seats_for_teams_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({ seats_cancelled: z.number().int() }).passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization&#x27;s Copilot access setting is set to enable Copilot for all users or is unconfigured.`,
        schema: z.void(),
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/copilot/billing/selected_users",
    alias: "copilot/add-copilot-seats-for-users",
    description: `**Note**: This endpoint is in beta and is subject to change.

Purchases a GitHub Copilot seat for each user specified.
The organization will be billed accordingly. For more information about Copilot pricing, see &quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)&quot;.

Only organization owners can configure GitHub Copilot in their organization.

In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
For more information about setting up a Copilot subscription, see &quot;[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)&quot;.
For more information about setting a suggestion matching policy, see &quot;[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)&quot;.

OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: copilot_add_copilot_seats_for_users_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({ seats_created: z.number().int() }).passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, or the organization&#x27;s Copilot access setting is set to enable Copilot for all users or is unconfigured.`,
        schema: z.void(),
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/copilot/billing/selected_users",
    alias: "copilot/cancel-copilot-seat-assignment-for-users",
    description: `**Note**: This endpoint is in beta and is subject to change.

Cancels the Copilot seat assignment for each user specified.
This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.

For more information about Copilot pricing, see &quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)&quot;.

For more information about disabling access to Copilot Business or Enterprise, see &quot;[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)&quot;.

Only organization owners can configure GitHub Copilot in their organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: copilot_add_copilot_seats_for_users_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({ seats_cancelled: z.number().int() }).passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Copilot Business or Enterprise is not enabled for this organization, billing has not been set up for this organization, a public code suggestions policy has not been set for this organization, the seat management setting is set to enable Copilot for all users or is unconfigured, or a user&#x27;s seat cannot be cancelled because it was assigned to them via a team.`,
        schema: z.void(),
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/dependabot/alerts",
    alias: "dependabot/list-alerts-for-org",
    description: `Lists Dependabot alerts for an organization.

The authenticated user must be an owner or security manager for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "severity",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "ecosystem",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "package",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "scope",
        type: "Query",
        schema: z.enum(["development", "runtime"]).optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "first",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional().default(30),
      },
      {
        name: "last",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(dependabot_alert_with_repository),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/dependabot/secrets",
    alias: "dependabot/list-org-secrets",
    description: `Lists all secrets available in an organization without revealing their
encrypted values.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(organization_dependabot_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/orgs/:org/dependabot/secrets/:secret_name",
    alias: "dependabot/get-org-secret",
    description: `Gets a single organization secret without revealing its encrypted value.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: organization_dependabot_secret,
  },
  {
    method: "put",
    path: "/orgs/:org/dependabot/secrets/:secret_name",
    alias: "dependabot/create-or-update-org-secret",
    description: `Creates or updates an organization secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: dependabot_create_or_update_org_secret_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "delete",
    path: "/orgs/:org/dependabot/secrets/:secret_name",
    alias: "dependabot/delete-org-secret",
    description: `Deletes a secret in an organization using the secret name.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/dependabot/secrets/:secret_name/repositories",
    alias: "dependabot/list-selected-repos-for-org-secret",
    description: `Lists all repositories that have been selected when the &#x60;visibility&#x60;
for repository access to a secret is set to &#x60;selected&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repositories: z.array(minimal_repository),
      })
      .passthrough(),
  },
  {
    method: "put",
    path: "/orgs/:org/dependabot/secrets/:secret_name/repositories",
    alias: "dependabot/set-selected-repos-for-org-secret",
    description: `Replaces all repositories for an organization secret when the &#x60;visibility&#x60;
for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create
or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          actions_set_selected_repositories_enabled_github_actions_organization_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "put",
    path: "/orgs/:org/dependabot/secrets/:secret_name/repositories/:repository_id",
    alias: "dependabot/add-selected-repo-to-org-secret",
    description: `Adds a repository to an organization secret when the &#x60;visibility&#x60; for
repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or
update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Conflict when visibility type is not set to selected`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/dependabot/secrets/:secret_name/repositories/:repository_id",
    alias: "dependabot/remove-selected-repo-from-org-secret",
    description: `Removes a repository from an organization secret when the &#x60;visibility&#x60;
for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create
or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Conflict when visibility type not set to selected`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/dependabot/secrets/public-key",
    alias: "dependabot/get-org-public-key",
    description: `Gets your public key, which you need to encrypt secrets. You need to
encrypt a secret before you can create or update secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: dependabot_public_key,
  },
  {
    method: "get",
    path: "/orgs/:org/docker/conflicts",
    alias:
      "packages/list-docker-migration-conflicting-packages-for-organization",
    description: `Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(package),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/events",
    alias: "activity/list-public-org-events",
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
  },
  {
    method: "get",
    path: "/orgs/:org/failed_invitations",
    alias: "orgs/list-failed-invitations",
    description: `The return hash contains &#x60;failed_at&#x60; and &#x60;failed_reason&#x60; fields which represent the time at which the invitation failed and the reason for the failure.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(organization_invitation),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/hooks",
    alias: "orgs/list-webhooks",
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(org_hook),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/hooks",
    alias: "orgs/create-webhook",
    description: `Here&#x27;s how you can create a hook that posts payloads in JSON format:`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_create_webhook_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: org_hook,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/hooks/:hook_id",
    alias: "orgs/get-webhook",
    description: `Returns a webhook configured in an organization. To get only the webhook &#x60;config&#x60; properties, see &quot;[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: org_hook,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/orgs/:org/hooks/:hook_id",
    alias: "orgs/update-webhook",
    description: `Updates a webhook configured in an organization. When you update a webhook, the &#x60;secret&#x60; will be overwritten. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use &quot;[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_update_webhook_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: org_hook,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/hooks/:hook_id",
    alias: "orgs/delete-webhook",
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/hooks/:hook_id/config",
    alias: "orgs/get-webhook-config-for-org",
    description: `Returns the webhook configuration for an organization. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use &quot;[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org_hook&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: webhook_config,
  },
  {
    method: "patch",
    path: "/orgs/:org/hooks/:hook_id/config",
    alias: "orgs/update-webhook-config-for-org",
    description: `Updates the webhook configuration for an organization. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use &quot;[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org_hook&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: apps_update_webhook_config_for_app_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: webhook_config,
  },
  {
    method: "get",
    path: "/orgs/:org/hooks/:hook_id/deliveries",
    alias: "orgs/list-webhook-deliveries",
    description: `Returns a list of webhook deliveries for a webhook configured in an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "cursor",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "redelivery",
        type: "Query",
        schema: z.boolean().optional(),
      },
    ],
    response: z.array(hook_delivery_item),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/hooks/:hook_id/deliveries/:delivery_id",
    alias: "orgs/get-webhook-delivery",
    description: `Returns a delivery for a webhook configured in an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "delivery_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: hook_delivery,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/hooks/:hook_id/deliveries/:delivery_id/attempts",
    alias: "orgs/redeliver-webhook-delivery",
    description: `Redeliver a delivery for a webhook configured in an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "delivery_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/hooks/:hook_id/pings",
    alias: "orgs/ping-webhook",
    description: `This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/installation",
    alias: "apps/get-org-installation",
    description: `Enables an authenticated GitHub App to find the organization&#x27;s installation information.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: installation,
  },
  {
    method: "get",
    path: "/orgs/:org/installations",
    alias: "orgs/list-app-installations",
    description: `Lists all GitHub Apps in an organization. The installation count includes
all GitHub Apps installed on repositories in the organization.

The authenticated user must be an organization owner to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:read&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        installations: z.array(installation),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/orgs/:org/interaction-limits",
    alias: "interactions/get-restrictions-for-org",
    description: `Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.union([interaction_limit_response, z.object({}).partial()]),
  },
  {
    method: "put",
    path: "/orgs/:org/interaction-limits",
    alias: "interactions/set-restrictions-for-org",
    description: `Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: interaction_limit,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: interaction_limit_response,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/interaction-limits",
    alias: "interactions/remove-restrictions-for-org",
    description: `Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/invitations",
    alias: "orgs/list-pending-invitations",
    description: `The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, or &#x60;hiring_manager&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "role",
        type: "Query",
        schema: z
          .enum([
            "all",
            "admin",
            "direct_member",
            "billing_manager",
            "hiring_manager",
          ])
          .optional()
          .default("all"),
      },
      {
        name: "invitation_source",
        type: "Query",
        schema: z.enum(["all", "member", "scim"]).optional().default("all"),
      },
    ],
    response: z.array(organization_invitation),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/invitations",
    alias: "orgs/create-invitation",
    description: `Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot;
and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_create_invitation_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: organization_invitation,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/invitations/:invitation_id",
    alias: "orgs/cancel-invitation",
    description: `Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "invitation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/invitations/:invitation_id/teams",
    alias: "orgs/list-invitation-teams",
    description: `List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "invitation_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/issues",
    alias: "issues/list-for-org",
    description: `List issues in an organization assigned to the authenticated user.

**Note**: GitHub&#x27;s REST API considers every pull request an issue, but not every issue is a pull request. For this
reason, &quot;Issues&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by
the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from &quot;Issues&quot; endpoints will be an _issue id_. To find out the pull
request id, use the &quot;[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)&quot; endpoint.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "filter",
        type: "Query",
        schema: z
          .enum([
            "assigned",
            "created",
            "mentioned",
            "subscribed",
            "repos",
            "all",
          ])
          .optional()
          .default("assigned"),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "labels",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "comments"])
          .optional()
          .default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/members",
    alias: "orgs/list-members",
    description: `List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "filter",
        type: "Query",
        schema: z.enum(["2fa_disabled", "all"]).optional().default("all"),
      },
      {
        name: "role",
        type: "Query",
        schema: z.enum(["all", "admin", "member"]).optional().default("all"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/members/:username",
    alias: "orgs/check-membership-for-user",
    description: `Check if a user is, publicly or privately, a member of the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response if requester is not an organization member`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Not Found if requester is an organization member and user is not a member`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/members/:username",
    alias: "orgs/remove-member",
    description: `Removing a user from this list will remove them from all teams and they will no longer have any access to the organization&#x27;s repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/members/:username/codespaces",
    alias: "codespaces/get-codespaces-for-user-in-org",
    description: `Lists the codespaces that a member of an organization has for repositories in that organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), codespaces: z.array(codespace) })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/members/:username/codespaces/:codespace_name",
    alias: "codespaces/delete-from-organization",
    description: `Deletes a user&#x27;s codespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/members/:username/codespaces/:codespace_name/stop",
    alias: "codespaces/stop-in-organization",
    description: `Stops a user&#x27;s codespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/members/:username/copilot",
    alias: "copilot/get-copilot-seat-details-for-user",
    description: `**Note**: This endpoint is in beta and is subject to change.

Gets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.

Organization owners can view GitHub Copilot seat assignment details for members in their organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: copilot_seat_details,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Copilot Business or Enterprise is not enabled for this organization or the user has a pending organization invitation.`,
        schema: z.void(),
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/memberships/:username",
    alias: "orgs/get-membership-for-user",
    description: `In order to get a user&#x27;s membership with an organization, the authenticated user must be an organization member. The &#x60;state&#x60; parameter in the response can be used to identify the user&#x27;s membership status.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: org_membership,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/memberships/:username",
    alias: "orgs/set-membership-for-user",
    description: `Only authenticated organization owners can add a member to the organization or update the member&#x27;s role.

*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user&#x27;s [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be &#x60;pending&#x60; until they accept the invitation.
    
*   Authenticated users can _update_ a user&#x27;s membership by passing the &#x60;role&#x60; parameter. If the authenticated user changes a member&#x27;s role to &#x60;admin&#x60;, the affected user will receive an email notifying them that they&#x27;ve been made an organization owner. If the authenticated user changes an owner&#x27;s role to &#x60;member&#x60;, no email will be sent.

**Rate limits**

To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_set_membership_for_user_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: org_membership,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/memberships/:username",
    alias: "orgs/remove-membership-for-user",
    description: `In order to remove a user&#x27;s membership with an organization, the authenticated user must be an organization owner.

If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/migrations",
    alias: "migrations/list-for-org",
    description: `Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).

A list of &#x60;repositories&#x60; is only returned for export migrations.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "exclude",
        type: "Query",
        schema: z.array(z.literal("repositories")).optional(),
      },
    ],
    response: z.array(migration),
  },
  {
    method: "post",
    path: "/orgs/:org/migrations",
    alias: "migrations/start-for-org",
    description: `Initiates the generation of a migration archive.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: migrations_start_for_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: migration,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/migrations/:migration_id",
    alias: "migrations/get-status-for-org",
    description: `Fetches the status of a migration.

The &#x60;state&#x60; of a migration can be one of the following values:

*   &#x60;pending&#x60;, which means the migration hasn&#x27;t started yet.
*   &#x60;exporting&#x60;, which means the migration is in progress.
*   &#x60;exported&#x60;, which means the migration finished successfully.
*   &#x60;failed&#x60;, which means the migration failed.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "exclude",
        type: "Query",
        schema: z.array(z.literal("repositories")).optional(),
      },
    ],
    response: migration,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/migrations/:migration_id/archive",
    alias: "migrations/download-archive-for-org",
    description: `Fetches the URL to a migration archive.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/migrations/:migration_id/archive",
    alias: "migrations/delete-archive-for-org",
    description: `Deletes a previous migration archive. Migration archives are automatically deleted after seven days.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock",
    alias: "migrations/unlock-repo-for-org",
    description: `Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "repo_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/migrations/:migration_id/repositories",
    alias: "migrations/list-repos-for-org",
    description: `List all the repositories for this organization migration.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/organization-fine-grained-permissions",
    alias: "orgs/list-organization-fine-grained-permissions",
    description: `Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

To list the fine-grained permissions that can be used in custom repository roles for an organization, see &quot;[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization).&quot;

To use this endpoint, the authenticated user must be one of:

- An administrator for the organization.
- A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(organization_fine_grained_permission),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/organization-roles",
    alias: "orgs/list-org-roles",
    description: `Lists the organization roles available in this organization. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

To use this endpoint, the authenticated user must be one of:

- An administrator for the organization.
- A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        roles: z.array(organization_role),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/organization-roles",
    alias: "orgs/create-custom-organization-role",
    description: `Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

To use this endpoint, the authenticated user must be one of:

- An administrator for the organization.
- A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_create_custom_organization_role_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: organization_role,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/organization-roles/:role_id",
    alias: "orgs/get-org-role",
    description: `Gets an organization role that is available to this organization. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

To use this endpoint, the authenticated user must be one of:

- An administrator for the organization.
- A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: organization_role,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/orgs/:org/organization-roles/:role_id",
    alias: "orgs/patch-custom-organization-role",
    description: `Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;


To use this endpoint, the authenticated user must be one of:

- An administrator for the organization.
- A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_patch_custom_organization_role_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: organization_role,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/organization-roles/:role_id",
    alias: "orgs/delete-custom-organization-role",
    description: `Deletes a custom organization role. For more information on custom organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

To use this endpoint, the authenticated user must be one of:

- An administrator for the organization.
- A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/organization-roles/:role_id/teams",
    alias: "orgs/list-org-role-teams",
    description: `Lists the teams that are assigned to an organization role. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

To use this endpoint, you must be an administrator for the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 404,
        description: `Response if the organization or role does not exist.`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Response if the organization roles feature is not enabled or validation failed.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/organization-roles/:role_id/users",
    alias: "orgs/list-org-role-users",
    description: `Lists organization members that are assigned to an organization role. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

To use this endpoint, you must be an administrator for the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 404,
        description: `Response if the organization or role does not exist.`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Response if the organization roles feature is not enabled or validation failed.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/organization-roles/teams/:team_slug",
    alias: "orgs/revoke-all-org-roles-team",
    description: `Removes all assigned organization roles from a team. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "put",
    path: "/orgs/:org/organization-roles/teams/:team_slug/:role_id",
    alias: "orgs/assign-team-to-org-role",
    description: `Assigns an organization role to a team in an organization. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Response if the organization, team or role does not exist.`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Response if the organization roles feature is not enabled for the organization, or validation failed.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/organization-roles/teams/:team_slug/:role_id",
    alias: "orgs/revoke-org-role-team",
    description: `Removes an organization role from a team. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/orgs/:org/organization-roles/users/:username",
    alias: "orgs/revoke-all-org-roles-user",
    description: `Revokes all assigned organization roles from a user. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "put",
    path: "/orgs/:org/organization-roles/users/:username/:role_id",
    alias: "orgs/assign-user-to-org-role",
    description: `Assigns an organization role to a member of an organization. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Response if the organization, user or role does not exist.`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Response if the organization roles feature is not enabled enabled for the organization, the validation failed, or the user is not an organization member.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/organization-roles/users/:username/:role_id",
    alias: "orgs/revoke-org-role-user",
    description: `Remove an organization role from a user. For more information on organization roles, see &quot;[Managing people&#x27;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/outside_collaborators",
    alias: "orgs/list-outside-collaborators",
    description: `List all users who are outside collaborators of an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "filter",
        type: "Query",
        schema: z.enum(["2fa_disabled", "all"]).optional().default("all"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
  },
  {
    method: "put",
    path: "/orgs/:org/outside_collaborators/:username",
    alias: "orgs/convert-member-to-outside-collaborator",
    description: `When an organization member is converted to an outside collaborator, they&#x27;ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see &quot;[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)&quot;. Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see &quot;[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ async: z.boolean() })
          .partial()
          .passthrough()
          .optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 403,
        description: `Forbidden if user is the last owner of the organization, not a member of the organization, or if the enterprise enforces a policy for inviting outside collaborators. For more information, see &quot;[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).&quot;`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/outside_collaborators/:username",
    alias: "orgs/remove-outside-collaborator",
    description: `Removing a user from this list will remove them from all the organization&#x27;s repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 422,
        description: `Unprocessable Entity if user is a member of the organization`,
        schema: z
          .object({ message: z.string(), documentation_url: z.string() })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/packages",
    alias: "packages/list-packages-for-organization",
    description: `Lists packages in an organization readable by the user.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Query",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "visibility",
        type: "Query",
        schema: z.enum(["public", "private", "internal"]).optional(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(package),
    errors: [
      {
        status: 400,
        description: `The value of &#x60;per_page&#x60; multiplied by &#x60;page&#x60; cannot be greater than 10000.`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/packages/:package_type/:package_name",
    alias: "packages/get-package-for-organization",
    description: `Gets a specific package in an organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: package,
  },
  {
    method: "delete",
    path: "/orgs/:org/packages/:package_type/:package_name",
    alias: "packages/delete-package-for-org",
    description: `Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.

The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/packages/:package_type/:package_name/restore",
    alias: "packages/restore-package-for-org",
    description: `Restores an entire package in an organization.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#x27;s namespace first.

The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "token",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/packages/:package_type/:package_name/versions",
    alias: "packages/get-all-package-versions-for-package-owned-by-org",
    description: `Lists package versions for a package owned by an organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint if the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["active", "deleted"]).optional().default("active"),
      },
    ],
    response: z.array(package_version),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id",
    alias: "packages/get-package-version-for-organization",
    description: `Gets a specific package version in an organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: package_version,
  },
  {
    method: "delete",
    path: "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id",
    alias: "packages/delete-package-version-for-org",
    description: `Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.

The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/packages/:package_type/:package_name/versions/:package_version_id/restore",
    alias: "packages/restore-package-version-for-org",
    description: `Restores a specific package version in an organization.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#x27;s namespace first.

The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/personal-access-token-requests",
    alias: "orgs/list-pat-grant-requests",
    description: `Lists requests from organization members to access organization resources with a fine-grained personal access token.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.literal("created_at").optional().default("created_at"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "owner",
        type: "Query",
        schema: z.array(z.string()).max(10).optional(),
      },
      {
        name: "repository",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "permission",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "last_used_before",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "last_used_after",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
    ],
    response: z.array(organization_programmatic_access_grant_request),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/personal-access-token-requests",
    alias: "orgs/review-pat-grant-requests-in-bulk",
    description: `Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_review_pat_grant_requests_in_bulk_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/personal-access-token-requests/:pat_request_id",
    alias: "orgs/review-pat-grant-request",
    description: `Approves or denies a pending request to access organization resources via a fine-grained personal access token.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_review_pat_grant_request_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pat_request_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/personal-access-token-requests/:pat_request_id/repositories",
    alias: "orgs/list-pat-grant-request-repositories",
    description: `Lists the repositories a fine-grained personal access token request is requesting access to.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pat_request_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/personal-access-tokens",
    alias: "orgs/list-pat-grants",
    description: `Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.literal("created_at").optional().default("created_at"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "owner",
        type: "Query",
        schema: z.array(z.string()).max(10).optional(),
      },
      {
        name: "repository",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "permission",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "last_used_before",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "last_used_after",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
    ],
    response: z.array(organization_programmatic_access_grant),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/personal-access-tokens",
    alias: "orgs/update-pat-accesses",
    description: `Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token&#x27;s existing access.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_update_pat_accesses_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/personal-access-tokens/:pat_id",
    alias: "orgs/update-pat-access",
    description: `Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token&#x27;s existing access. Limited to revoking a token&#x27;s existing access.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_update_pat_access_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pat_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/personal-access-tokens/:pat_id/repositories",
    alias: "orgs/list-pat-grant-repositories",
    description: `Lists the repositories a fine-grained personal access token has access to.

Only GitHub Apps can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pat_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/projects",
    alias: "projects/list-for-org",
    description: `Lists the projects in an organization. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(project),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/projects",
    alias: "projects/create-for-org",
    description: `Creates an organization project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_create_for_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: project,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/properties/schema",
    alias: "orgs/get-all-custom-properties",
    description: `Gets all custom properties defined for an organization.
Organization members can read these properties.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(org_custom_property),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/orgs/:org/properties/schema",
    alias: "orgs/create-or-update-custom-properties",
    description: `Creates new or updates existing custom properties defined for an organization in a batch.

To use this endpoint, the authenticated user must be one of:
  - An administrator for the organization.
  - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_create_or_update_custom_properties_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(org_custom_property),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/properties/schema/:custom_property_name",
    alias: "orgs/get-custom-property",
    description: `Gets a custom property that is defined for an organization.
Organization members can read these properties.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "custom_property_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: org_custom_property,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/properties/schema/:custom_property_name",
    alias: "orgs/create-or-update-custom-property",
    description: `Creates a new or updates an existing custom property that is defined for an organization.

To use this endpoint, the authenticated user must be one of:
- An administrator for the organization.
- A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_create_or_update_custom_property_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "custom_property_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: org_custom_property,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/properties/schema/:custom_property_name",
    alias: "orgs/remove-custom-property",
    description: `Removes a custom property that is defined for an organization.

To use this endpoint, the authenticated user must be one of:
  - An administrator for the organization.
  - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "custom_property_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/properties/values",
    alias: "orgs/list-custom-properties-values-for-repos",
    description: `Lists organization repositories with all of their custom property values.
Organization members can read these properties.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "repository_query",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(org_repo_custom_property_values),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/orgs/:org/properties/values",
    alias: "orgs/create-or-update-custom-properties-values-for-repos",
    description: `Create new or update existing custom property values for repositories in a batch that belong to an organization.
Each target repository will have its custom property values updated to match the values provided in the request.

A maximum of 30 repositories can be updated in a single request.

Using a value of &#x60;null&#x60; for a custom property will remove or &#x27;unset&#x27; the property value from the repository.

To use this endpoint, the authenticated user must be one of:
  - An administrator for the organization.
  - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_values_editor&#x60; in the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_create_or_update_custom_properties_values_for_repos_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/public_members",
    alias: "orgs/list-public-members",
    description: `Members of an organization can choose to have their membership publicized or not.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
  },
  {
    method: "get",
    path: "/orgs/:org/public_members/:username",
    alias: "orgs/check-public-membership-for-user",
    description: `Check if the provided user is a public member of the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Not Found if user is not a public member`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/public_members/:username",
    alias: "orgs/set-public-membership-for-authenticated-user",
    description: `The user can publicize their own membership. (A user cannot publicize the membership for another user.)

Note that you&#x27;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see &quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/public_members/:username",
    alias: "orgs/remove-public-membership-for-authenticated-user",
    description: `Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/repos",
    alias: "repos/list-for-org",
    description: `Lists repositories for the specified organization.

**Note:** In order to see the &#x60;security_and_analysis&#x60; block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see &quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "type",
        type: "Query",
        schema: z
          .enum(["all", "public", "private", "forks", "sources", "member"])
          .optional()
          .default("all"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "pushed", "full_name"])
          .optional()
          .default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
  },
  {
    method: "post",
    path: "/orgs/:org/repos",
    alias: "repos/create-in-org",
    description: `Creates a new repository in the specified organization. The authenticated user must be a member of the organization.

OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to create a public repository, and &#x60;repo&#x60; scope to create a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_in_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: full_repository,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/rulesets",
    alias: "repos/get-org-rulesets",
    description: `Get all the repository rulesets for an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(repository_ruleset),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/rulesets",
    alias: "repos/create-org-ruleset",
    description: `Create a repository ruleset for an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: `Request body`,
        type: "Body",
        schema: repos_create_org_ruleset_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_ruleset,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/rulesets/:ruleset_id",
    alias: "repos/get-org-ruleset",
    description: `Get a repository ruleset for an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ruleset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: repository_ruleset,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/rulesets/:ruleset_id",
    alias: "repos/update-org-ruleset",
    description: `Update a ruleset for an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: `Request body`,
        type: "Body",
        schema: repos_update_org_ruleset_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ruleset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: repository_ruleset,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/rulesets/:ruleset_id",
    alias: "repos/delete-org-ruleset",
    description: `Delete a ruleset for an organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ruleset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/rulesets/rule-suites",
    alias: "repos/get-org-rule-suites",
    description: `Lists suites of rule evaluations at the organization level.
For more information, see &quot;[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_name",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "time_period",
        type: "Query",
        schema: z
          .enum(["hour", "day", "week", "month"])
          .optional()
          .default("day"),
      },
      {
        name: "actor_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "rule_suite_result",
        type: "Query",
        schema: z
          .enum(["pass", "fail", "bypass", "all"])
          .optional()
          .default("all"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: rule_suites,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/rulesets/rule-suites/:rule_suite_id",
    alias: "repos/get-org-rule-suite",
    description: `Gets information about a suite of rule evaluations from within an organization.
For more information, see &quot;[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "rule_suite_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: rule_suite,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/secret-scanning/alerts",
    alias: "secret-scanning/list-alerts-for-org",
    description: `Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.

The authenticated user must be an administrator or security manager for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "resolved"]).optional(),
      },
      {
        name: "secret_type",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "resolution",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "validity",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(organization_secret_scanning_alert),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/security-advisories",
    alias: "security-advisories/list-org-repository-advisories",
    description: `Lists repository security advisories for an organization.

The authenticated user must be an owner or security manager for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "published"])
          .optional()
          .default("created"),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional().default(30),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["triage", "draft", "published", "closed"]).optional(),
      },
    ],
    response: z.array(repository_advisory),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/security-managers",
    alias: "orgs/list-security-manager-teams",
    description: `Lists teams that are security managers for an organization. For more information, see &quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).&quot;

The authenticated user must be an administrator or security manager for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(team_simple),
  },
  {
    method: "put",
    path: "/orgs/:org/security-managers/teams/:team_slug",
    alias: "orgs/add-security-manager-team",
    description: `Adds a team as a security manager for an organization. For more information, see &quot;[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization.&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `The organization has reached the maximum number of security manager teams.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/security-managers/teams/:team_slug",
    alias: "orgs/remove-security-manager-team",
    description: `Removes the security manager role from a team for an organization. For more information, see &quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization.&quot;

The authenticated user must be an administrator for the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/settings/billing/actions",
    alias: "billing/get-github-actions-billing-org",
    description: `Gets the summary of the free and paid GitHub Actions minutes used.

Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see &quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)&quot;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_billing_usage,
  },
  {
    method: "get",
    path: "/orgs/:org/settings/billing/packages",
    alias: "billing/get-github-packages-billing-org",
    description: `Gets the free and paid storage used for GitHub Packages in gigabytes.

Paid minutes only apply to packages stored for private repositories. For more information, see &quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: packages_billing_usage,
  },
  {
    method: "get",
    path: "/orgs/:org/settings/billing/shared-storage",
    alias: "billing/get-shared-storage-billing-org",
    description: `Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.

Paid minutes only apply to packages stored for private repositories. For more information, see &quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: combined_billing_usage,
  },
  {
    method: "get",
    path: "/orgs/:org/teams",
    alias: "teams/list",
    description: `Lists all teams in an organization that are visible to the authenticated user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/orgs/:org/teams",
    alias: "teams/create",
    description: `To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see &quot;[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization).&quot;

When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see &quot;[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: teams_create_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: team_full,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug",
    alias: "teams/get-by-name",
    description: `Gets a team using the team&#x27;s &#x60;slug&#x60;. To create the &#x60;slug&#x60;, GitHub replaces special characters in the &#x60;name&#x60; string, changes all words to lowercase, and replaces spaces with a &#x60;-&#x60; separator. For example, &#x60;&quot;My TEam Näme&quot;&#x60; would become &#x60;my-team-name&#x60;.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: team_full,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/orgs/:org/teams/:team_slug",
    alias: "teams/update-in-org",
    description: `To edit a team, the authenticated user must either be an organization owner or a team maintainer.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: teams_update_in_org_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: team_full,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug",
    alias: "teams/delete-in-org",
    description: `To delete a team, the authenticated user must be an organization owner or team maintainer.

If you are an organization owner, deleting a parent team will delete all of its child teams as well.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/discussions",
    alias: "teams/list-discussions-in-org",
    description: `List all discussions on a team&#x27;s page.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "pinned",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(team_discussion),
  },
  {
    method: "post",
    path: "/orgs/:org/teams/:team_slug/discussions",
    alias: "teams/create-discussion-in-org",
    description: `Creates a new discussion post on a team&#x27;s page.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: teams_create_discussion_in_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: team_discussion,
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    alias: "teams/get-discussion-in-org",
    description: `Get a specific discussion on a team&#x27;s page.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: team_discussion,
  },
  {
    method: "patch",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    alias: "teams/update-discussion-in-org",
    description: `Edits the title and body text of a discussion post. Only the parameters you provide are updated.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: teams_update_discussion_in_org_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: team_discussion,
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number",
    alias: "teams/delete-discussion-in-org",
    description: `Delete a discussion from a team&#x27;s page.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments",
    alias: "teams/list-discussion-comments-in-org",
    description: `List all comments on a team discussion.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team_discussion_comment),
  },
  {
    method: "post",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments",
    alias: "teams/create-discussion-comment-in-org",
    description: `Creates a new comment on a team discussion.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: team_discussion_comment,
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    alias: "teams/get-discussion-comment-in-org",
    description: `Get a specific comment on a team discussion.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "comment_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: team_discussion_comment,
  },
  {
    method: "patch",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    alias: "teams/update-discussion-comment-in-org",
    description: `Edits the body text of a discussion comment.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "comment_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: team_discussion_comment,
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number",
    alias: "teams/delete-discussion-comment-in-org",
    description: `Deletes a comment on a team discussion.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "comment_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions",
    alias: "reactions/list-for-team-discussion-comment-in-org",
    description: `List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "comment_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "content",
        type: "Query",
        schema: z
          .enum([
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(reaction),
  },
  {
    method: "post",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions",
    alias: "reactions/create-for-team-discussion-comment-in-org",
    description: `Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).

A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: reactions_create_for_team_discussion_comment_in_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "comment_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: reaction,
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id",
    alias: "reactions/delete-for-team-discussion-comment",
    description: `**Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id&#x60;.

Delete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "comment_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "reaction_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions",
    alias: "reactions/list-for-team-discussion-in-org",
    description: `List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "content",
        type: "Query",
        schema: z
          .enum([
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(reaction),
  },
  {
    method: "post",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions",
    alias: "reactions/create-for-team-discussion-in-org",
    description: `Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).

A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: reactions_create_for_team_discussion_comment_in_org_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: reaction,
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions/:reaction_id",
    alias: "reactions/delete-for-team-discussion",
    description: `**Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id&#x60;.

Delete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).

OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "discussion_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "reaction_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/invitations",
    alias: "teams/list-pending-invitations-in-org",
    description: `The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, &#x60;hiring_manager&#x60;, or &#x60;reinstate&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/invitations&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(organization_invitation),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/members",
    alias: "teams/list-members-in-org",
    description: `Team members will include the members of child teams.

To list members in a team, the team must be visible to the authenticated user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "role",
        type: "Query",
        schema: z
          .enum(["member", "maintainer", "all"])
          .optional()
          .default("all"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/memberships/:username",
    alias: "teams/get-membership-for-user-in-org",
    description: `Team members will include the members of child teams.

To get a user&#x27;s membership with a team, the team must be visible to the authenticated user.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.

**Note:**
The response contains the &#x60;state&#x60; of the membership and the member&#x27;s &#x60;role&#x60;.

The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: team_membership,
    errors: [
      {
        status: 404,
        description: `if user has no team membership`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/teams/:team_slug/memberships/:username",
    alias: "teams/add-or-update-membership-for-user-in-org",
    description: `Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

**Note:** When you have team synchronization set up for a team with your organization&#x27;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#x27;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see &quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).&quot;

An organization owner can add someone who is not part of the team&#x27;s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the &quot;pending&quot; state until the person accepts the invitation, at which point the membership will transition to the &quot;active&quot; state and the user will be added as a member of the team.

If the user is already a member of the team, this endpoint will update the role of the team member&#x27;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: teams_add_or_update_membership_for_user_in_org_Body.optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: team_membership,
    errors: [
      {
        status: 403,
        description: `Forbidden if team synchronization is set up`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Unprocessable Entity if you attempt to add an organization to a team`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug/memberships/:username",
    alias: "teams/remove-membership-for-user-in-org",
    description: `To remove a membership between a user and a team, the authenticated user must have &#x27;admin&#x27; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

**Note:** When you have team synchronization set up for a team with your organization&#x27;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#x27;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see &quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).&quot;

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden if team synchronization is set up`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/projects",
    alias: "teams/list-projects-in-org",
    description: `Lists the organization projects for a team.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team_project),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/projects/:project_id",
    alias: "teams/check-permissions-for-project-in-org",
    description: `Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: team_project,
    errors: [
      {
        status: 404,
        description: `Not Found if project is not managed by this team`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/teams/:team_slug/projects/:project_id",
    alias: "teams/add-or-update-project-permissions-in-org",
    description: `Adds an organization project to a team. To add a project to a team or update the team&#x27;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: teams_add_or_update_project_permissions_in_org_Body.nullish(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden if the project is not owned by the organization`,
        schema: z
          .object({ message: z.string(), documentation_url: z.string() })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug/projects/:project_id",
    alias: "teams/remove-project-in-org",
    description: `Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. This endpoint removes the project from the team, but does not delete the project.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/repos",
    alias: "teams/list-repos-in-org",
    description: `Lists a team&#x27;s repositories visible to the authenticated user.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    alias: "teams/check-permissions-for-repo-in-org",
    description: `Checks whether a team has &#x60;admin&#x60;, &#x60;push&#x60;, &#x60;maintain&#x60;, &#x60;triage&#x60;, or &#x60;pull&#x60; permission for a repository. Repositories inherited through a parent team will also be checked.

You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the &#x60;application/vnd.github.v3.repository+json&#x60; accept header.

If a team doesn&#x27;t have permission for the repository, you will receive a &#x60;404 Not Found&#x60; response status.

If the repository is private, you must have at least &#x60;read&#x60; permission for that repository, and your token must have the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope. Otherwise, you will receive a &#x60;404 Not Found&#x60; response status.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: team_repository,
    errors: [
      {
        status: 404,
        description: `Not Found if team does not have permission for the repository`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    alias: "teams/add-or-update-repo-permissions-in-org",
    description: `To add a repository to a team or update the team&#x27;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you&#x27;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see &quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).&quot;

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.

For more information about the permission levels, see &quot;[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ permission: z.string().default("push") })
          .partial()
          .passthrough()
          .optional(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/orgs/:org/teams/:team_slug/repos/:owner/:repo",
    alias: "teams/remove-repo-in-org",
    description: `If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/orgs/:org/teams/:team_slug/teams",
    alias: "teams/list-child-in-org",
    description: `Lists the child teams of the team specified by &#x60;{team_slug}&#x60;.

**Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/teams&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "team_slug",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team),
  },
  {
    method: "get",
    path: "/projects/:project_id",
    alias: "projects/get",
    description: `Gets a project by its &#x60;id&#x60;. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/projects/:project_id",
    alias: "projects/update",
    description: `Updates a project board&#x27;s information. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_update_Body.optional(),
      },
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: z
          .object({
            message: z.string(),
            documentation_url: z.string(),
            errors: z.array(z.string()),
          })
          .partial()
          .passthrough(),
      },
      {
        status: 404,
        description: `Not Found if the authenticated user does not have access to the project`,
        schema: z.void(),
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "delete",
    path: "/projects/:project_id",
    alias: "projects/delete",
    description: `Deletes a project board. Returns a &#x60;404 Not Found&#x60; status if projects are disabled.`,
    requestFormat: "json",
    parameters: [
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: z
          .object({
            message: z.string(),
            documentation_url: z.string(),
            errors: z.array(z.string()),
          })
          .partial()
          .passthrough(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/projects/:project_id/collaborators",
    alias: "projects/list-collaborators",
    description: `Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project &#x60;admin&#x60; to list collaborators.`,
    requestFormat: "json",
    parameters: [
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "affiliation",
        type: "Query",
        schema: z.enum(["outside", "direct", "all"]).optional().default("all"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/projects/:project_id/collaborators/:username",
    alias: "projects/add-collaborator",
    description: `Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project &#x60;admin&#x60; to add a collaborator.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_add_collaborator_Body.nullish(),
      },
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/projects/:project_id/collaborators/:username",
    alias: "projects/remove-collaborator",
    description: `Removes a collaborator from an organization project. You must be an organization owner or a project &#x60;admin&#x60; to remove a collaborator.`,
    requestFormat: "json",
    parameters: [
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/projects/:project_id/collaborators/:username/permission",
    alias: "projects/get-permission-for-user",
    description: `Returns the collaborator&#x27;s permission level for an organization project. Possible values for the &#x60;permission&#x60; key: &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, &#x60;none&#x60;. You must be an organization owner or a project &#x60;admin&#x60; to review a user&#x27;s permission level.`,
    requestFormat: "json",
    parameters: [
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: project_collaborator_permission,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/projects/:project_id/columns",
    alias: "projects/list-columns",
    description: `Lists the project columns in a project.`,
    requestFormat: "json",
    parameters: [
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(project_column),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/projects/:project_id/columns",
    alias: "projects/create-column",
    description: `Creates a new project column.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ name: z.string() }).passthrough(),
      },
      {
        name: "project_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project_column,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/projects/columns/:column_id",
    alias: "projects/get-column",
    description: `Gets information about a project column.`,
    requestFormat: "json",
    parameters: [
      {
        name: "column_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project_column,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/projects/columns/:column_id",
    alias: "projects/update-column",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ name: z.string() }).passthrough(),
      },
      {
        name: "column_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project_column,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/projects/columns/:column_id",
    alias: "projects/delete-column",
    description: `Deletes a project column.`,
    requestFormat: "json",
    parameters: [
      {
        name: "column_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/projects/columns/:column_id/cards",
    alias: "projects/list-cards",
    description: `Lists the project cards in a project.`,
    requestFormat: "json",
    parameters: [
      {
        name: "column_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "archived_state",
        type: "Query",
        schema: z
          .enum(["all", "archived", "not_archived"])
          .optional()
          .default("not_archived"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(project_card),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/projects/columns/:column_id/cards",
    alias: "projects/create-card",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_create_card_Body,
      },
      {
        name: "column_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project_card,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed`,
        schema: z.union([validation_error, validation_error_simple]),
      },
      {
        status: 503,
        description: `Response`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
            errors: z.array(
              z
                .object({ code: z.string(), message: z.string() })
                .partial()
                .passthrough(),
            ),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/projects/columns/:column_id/moves",
    alias: "projects/move-column",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ position: z.string().regex(/^(?:first|last|after:\d+)$/) })
          .passthrough(),
      },
      {
        name: "column_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/projects/columns/cards/:card_id",
    alias: "projects/get-card",
    description: `Gets information about a project card.`,
    requestFormat: "json",
    parameters: [
      {
        name: "card_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project_card,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/projects/columns/cards/:card_id",
    alias: "projects/update-card",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_update_card_Body.optional(),
      },
      {
        name: "card_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: project_card,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "delete",
    path: "/projects/columns/cards/:card_id",
    alias: "projects/delete-card",
    description: `Deletes a project card`,
    requestFormat: "json",
    parameters: [
      {
        name: "card_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: z
          .object({
            message: z.string(),
            documentation_url: z.string(),
            errors: z.array(z.string()),
          })
          .partial()
          .passthrough(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/projects/columns/cards/:card_id/moves",
    alias: "projects/move-card",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_move_card_Body,
      },
      {
        name: "card_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: z
          .object({
            message: z.string(),
            documentation_url: z.string(),
            errors: z.array(
              z
                .object({
                  code: z.string(),
                  message: z.string(),
                  resource: z.string(),
                  field: z.string(),
                })
                .partial()
                .passthrough(),
            ),
          })
          .partial()
          .passthrough(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Response`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
            errors: z.array(
              z
                .object({ code: z.string(), message: z.string() })
                .partial()
                .passthrough(),
            ),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/rate_limit",
    alias: "rate-limit/get",
    description: `**Note:** Accessing this endpoint does not count against your REST API rate limit.

Some categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under &#x60;resources&#x60;, you&#x27;ll see objects relating to different categories:
* The &#x60;core&#x60; object provides your rate limit status for all non-search-related resources in the REST API.
* The &#x60;search&#x60; object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see &quot;[Search](https://docs.github.com/rest/search/search).&quot;
* The &#x60;code_search&#x60; object provides your rate limit status for the REST API for searching code. For more information, see &quot;[Search code](https://docs.github.com/rest/search/search#search-code).&quot;
* The &#x60;graphql&#x60; object provides your rate limit status for the GraphQL API. For more information, see &quot;[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit).&quot;
* The &#x60;integration_manifest&#x60; object provides your rate limit status for the &#x60;POST /app-manifests/{code}/conversions&#x60; operation. For more information, see &quot;[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration).&quot;
* The &#x60;dependency_snapshots&#x60; object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see &quot;[Dependency graph](https://docs.github.com/rest/dependency-graph).&quot;
* The &#x60;code_scanning_upload&#x60; object provides your rate limit status for uploading SARIF results to code scanning. For more information, see &quot;[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github).&quot;
* The &#x60;actions_runner_registration&#x60; object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see &quot;[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners).&quot;
* The &#x60;source_import&#x60; object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see &quot;[API Versions](https://docs.github.com/rest/overview/api-versions).&quot;

**Note:** The &#x60;rate&#x60; object is deprecated. If you&#x27;re writing new API client code or updating existing code, you should use the &#x60;core&#x60; object instead of the &#x60;rate&#x60; object. The &#x60;core&#x60; object contains the same information that is present in the &#x60;rate&#x60; object.`,
    requestFormat: "json",
    response: rate_limit_overview,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo",
    alias: "repos/get",
    description: `The &#x60;parent&#x60; and &#x60;source&#x60; objects are present when the repository is a fork. &#x60;parent&#x60; is the repository this repository was forked from, &#x60;source&#x60; is the ultimate source for the network.

**Note:** In order to see the &#x60;security_and_analysis&#x60; block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see &quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: full_repository,
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo",
    alias: "repos/update",
    description: `**Note**: To edit a repository&#x27;s topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: full_repository,
    errors: [
      {
        status: 307,
        description: `Temporary Redirect`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo",
    alias: "repos/delete",
    description: `Deleting a repository requires admin access.

If an organization owner has configured the organization to prevent members from deleting organization-owned
repositories, you will get a &#x60;403 Forbidden&#x60; response.

OAuth app tokens and personal access tokens (classic) need the &#x60;delete_repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 307,
        description: `Temporary Redirect`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:`,
        schema: z
          .object({ message: z.string(), documentation_url: z.string() })
          .partial()
          .passthrough(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/artifacts",
    alias: "actions/list-artifacts-for-repo",
    description: `Lists all artifacts for a repository.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "name",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), artifacts: z.array(artifact) })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/artifacts/:artifact_id",
    alias: "actions/get-artifact",
    description: `Gets a specific artifact for a workflow run.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "artifact_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: artifact,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/artifacts/:artifact_id",
    alias: "actions/delete-artifact",
    description: `Deletes an artifact for a workflow run.
OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "artifact_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format",
    alias: "actions/download-artifact",
    description: `Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in
the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "artifact_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "archive_format",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/cache/usage",
    alias: "actions/get-actions-cache-usage",
    description: `Gets GitHub Actions cache usage for a repository.
The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_cache_usage_by_repository,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/caches",
    alias: "actions/get-actions-cache-list",
    description: `Lists the GitHub Actions caches for a repository.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "key",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created_at", "last_accessed_at", "size_in_bytes"])
          .optional()
          .default("last_accessed_at"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
    ],
    response: actions_cache_list,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/caches",
    alias: "actions/delete-actions-cache-by-key",
    description: `Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "key",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: actions_cache_list,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/caches/:cache_id",
    alias: "actions/delete-actions-cache-by-id",
    description: `Deletes a GitHub Actions cache for a repository, using a cache ID.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "cache_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/jobs/:job_id",
    alias: "actions/get-job-for-workflow-run",
    description: `Gets a specific job in a workflow run.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "job_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: job,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/jobs/:job_id/logs",
    alias: "actions/download-job-logs-for-workflow-run",
    description: `Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
for &#x60;Location:&#x60; in the response header to find the URL for the download.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "job_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/jobs/:job_id/rerun",
    alias: "actions/re-run-job-for-workflow-run",
    description: `Re-run a job and its dependent jobs in a workflow run.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ enable_debug_logging: z.boolean() })
          .partial()
          .passthrough()
          .nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "job_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/oidc/customization/sub",
    alias: "actions/get-custom-oidc-sub-claim-for-repo",
    description: `Gets the customization template for an OpenID Connect (OIDC) subject claim.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: oidc_custom_sub_repo,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/oidc/customization/sub",
    alias: "actions/set-custom-oidc-sub-claim-for-repo",
    description: `Sets the customization template and &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag for an OpenID Connect (OIDC) subject claim for a repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_set_custom_oidc_sub_claim_for_repo_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/organization-secrets",
    alias: "actions/list-repo-organization-secrets",
    description: `Lists all organization secrets shared with a repository without revealing their encrypted
values.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(actions_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/organization-variables",
    alias: "actions/list-repo-organization-variables",
    description: `Lists all organization variables shared with a repository.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(10),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        variables: z.array(actions_variable),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/permissions",
    alias: "actions/get-github-actions-permissions-repository",
    description: `Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_repository_permissions,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/permissions",
    alias: "actions/set-github-actions-permissions-repository",
    description: `Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_set_github_actions_permissions_repository_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/permissions/access",
    alias: "actions/get-workflow-access-to-repository",
    description: `Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
This endpoint only applies to private repositories.
For more information, see &quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_workflow_access_to_repository,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/permissions/access",
    alias: "actions/set-workflow-access-to-repository",
    description: `Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
This endpoint only applies to private repositories.
For more information, see &quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)&quot;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_workflow_access_to_repository,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/permissions/selected-actions",
    alias: "actions/get-allowed-actions-repository",
    description: `Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: selected_actions,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/permissions/selected-actions",
    alias: "actions/set-allowed-actions-repository",
    description: `Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see &quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: selected_actions.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/permissions/workflow",
    alias: "actions/get-github-actions-default-workflow-permissions-repository",
    description: `Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository,
as well as if GitHub Actions can submit approving pull request reviews.
For more information, see &quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_get_default_workflow_permissions,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/permissions/workflow",
    alias: "actions/set-github-actions-default-workflow-permissions-repository",
    description: `Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions
can submit approving pull request reviews.
For more information, see &quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_set_default_workflow_permissions,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Conflict response when changing a setting is prevented by the owning organization`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runners",
    alias: "actions/list-self-hosted-runners-for-repo",
    description: `Lists all self-hosted runners configured in a repository.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), runners: z.array(runner) })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runners/:runner_id",
    alias: "actions/get-self-hosted-runner-for-repo",
    description: `Gets a specific self-hosted runner configured in a repository.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: runner,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/runners/:runner_id",
    alias: "actions/delete-self-hosted-runner-from-repo",
    description: `Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    alias: "actions/list-labels-for-self-hosted-runner-for-repo",
    description: `Lists all labels for a self-hosted runner configured in a repository.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    alias: "actions/add-custom-labels-to-self-hosted-runner-for-repo",
    description: `Adds custom labels to a self-hosted runner configured in a repository.

Authenticated users must have admin access to the organization to use this endpoint.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_add_custom_labels_to_self_hosted_runner_for_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    alias: "actions/set-custom-labels-for-self-hosted-runner-for-repo",
    description: `Remove all previous custom labels and set the new custom labels for a specific
self-hosted runner configured in a repository.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_set_custom_labels_for_self_hosted_runner_for_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels",
    alias: "actions/remove-all-custom-labels-from-self-hosted-runner-for-repo",
    description: `Remove all custom labels from a self-hosted runner configured in a
repository. Returns the remaining read-only labels from the runner.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/runners/:runner_id/labels/:name",
    alias: "actions/remove-custom-label-from-self-hosted-runner-for-repo",
    description: `Remove a custom label from a self-hosted runner configured
in a repository. Returns the remaining labels from the runner.

This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not
present on the runner.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "runner_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), labels: z.array(runner_label) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runners/downloads",
    alias: "actions/list-runner-applications-for-repo",
    description: `Lists binaries for the runner application that you can download and run.

Authenticated users must have admin access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(runner_application),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runners/generate-jitconfig",
    alias: "actions/generate-runner-jitconfig-for-repo",
    description: `Generates a configuration that can be passed to the runner application at startup.

The authenticated user must have admin access to the repository.

OAuth tokens and personal access tokens (classic) need the&#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_generate_runner_jitconfig_for_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ runner: runner, encoded_jit_config: z.string() })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runners/registration-token",
    alias: "actions/create-registration-token-for-repo",
    description: `Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.

For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to configure your self-hosted runner:

&#x60;&#x60;&#x60;
./config.sh --url https://github.com/octo-org --token TOKEN
&#x60;&#x60;&#x60;

Authenticated users must have admin access to the repository to use this endpoint.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: authentication_token,
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runners/remove-token",
    alias: "actions/create-remove-token-for-repo",
    description: `Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an repository. The token expires after one hour.

For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:

&#x60;&#x60;&#x60;
./config.sh remove --token TOKEN
&#x60;&#x60;&#x60;

Authenticated users must have admin access to the repository to use this endpoint.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: authentication_token,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs",
    alias: "actions/list-workflow-runs-for-repo",
    description: `Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "actor",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "branch",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "event",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "status",
        type: "Query",
        schema: z
          .enum([
            "completed",
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "skipped",
            "stale",
            "success",
            "timed_out",
            "in_progress",
            "queued",
            "requested",
            "waiting",
            "pending",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "created",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "exclude_pull_requests",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "check_suite_id",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "head_sha",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        workflow_runs: z.array(workflow_run),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id",
    alias: "actions/get-workflow-run",
    description: `Gets a specific workflow run.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "exclude_pull_requests",
        type: "Query",
        schema: z.boolean().optional(),
      },
    ],
    response: workflow_run,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/runs/:run_id",
    alias: "actions/delete-workflow-run",
    description: `Deletes a specific workflow run.

Anyone with write access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/approvals",
    alias: "actions/get-reviews-for-run",
    description: `Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.array(environment_approvals),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runs/:run_id/approve",
    alias: "actions/approve-workflow-run",
    description: `Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/artifacts",
    alias: "actions/list-workflow-run-artifacts",
    description: `Lists artifacts for a workflow run.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "name",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), artifacts: z.array(artifact) })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number",
    alias: "actions/get-workflow-run-attempt",
    description: `Gets a specific workflow run attempt.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "attempt_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "exclude_pull_requests",
        type: "Query",
        schema: z.boolean().optional(),
      },
    ],
    response: workflow_run,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number/jobs",
    alias: "actions/list-jobs-for-workflow-run-attempt",
    description: `Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint  with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "attempt_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), jobs: z.array(job) })
      .passthrough(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number/logs",
    alias: "actions/download-workflow-run-attempt-logs",
    description: `Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "attempt_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runs/:run_id/cancel",
    alias: "actions/cancel-workflow-run",
    description: `Cancels a workflow run using its &#x60;id&#x60;.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runs/:run_id/deployment_protection_rule",
    alias: "actions/review-custom-gates-for-run",
    description: `Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see &quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).&quot;

**Note:** GitHub Apps can only review their own custom deployment protection rules.
To approve or reject pending deployments that are waiting for review from a specific person or team, see [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments&#x60;](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_review_custom_gates_for_run_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runs/:run_id/force-cancel",
    alias: "actions/force-cancel-workflow-run",
    description: `Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an &#x60;always()&#x60; condition on a job.
You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel&#x60;](/rest/actions/workflow-runs#cancel-a-workflow-run).

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/jobs",
    alias: "actions/list-jobs-for-workflow-run",
    description: `Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "filter",
        type: "Query",
        schema: z.enum(["latest", "all"]).optional().default("latest"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), jobs: z.array(job) })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/logs",
    alias: "actions/download-workflow-run-logs",
    description: `Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
&#x60;Location:&#x60; in the response header to find the URL for the download.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/runs/:run_id/logs",
    alias: "actions/delete-workflow-run-logs",
    description: `Deletes all logs for a workflow run.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/pending_deployments",
    alias: "actions/get-pending-deployments-for-run",
    description: `Get all deployment environments for a workflow run that are waiting for protection rules to pass.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.array(pending_deployment),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runs/:run_id/pending_deployments",
    alias: "actions/review-pending-deployments-for-run",
    description: `Approve or reject pending deployments that are waiting on approval by a required reviewer.

Required reviewers with read access to the repository contents and deployments can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_review_pending_deployments_for_run_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.array(deployment),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runs/:run_id/rerun",
    alias: "actions/re-run-workflow",
    description: `Re-runs your workflow run using its &#x60;id&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ enable_debug_logging: z.boolean() })
          .partial()
          .passthrough()
          .nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/runs/:run_id/rerun-failed-jobs",
    alias: "actions/re-run-workflow-failed-jobs",
    description: `Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ enable_debug_logging: z.boolean() })
          .partial()
          .passthrough()
          .nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/runs/:run_id/timing",
    alias: "actions/get-workflow-run-usage",
    description: `Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see &quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)&quot;.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: workflow_run_usage,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/secrets",
    alias: "actions/list-repo-secrets",
    description: `Lists all secrets available in a repository without revealing their encrypted
values.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(actions_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/secrets/:secret_name",
    alias: "actions/get-repo-secret",
    description: `Gets a single repository secret without revealing its encrypted value.

The authenticated user must have collaborator access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_secret,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/secrets/:secret_name",
    alias: "actions/create-or-update-repo-secret",
    description: `Creates or updates a repository secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_or_update_repo_secret_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/secrets/:secret_name",
    alias: "actions/delete-repo-secret",
    description: `Deletes a secret in a repository using the secret name.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/secrets/public-key",
    alias: "actions/get-repo-public-key",
    description: `Gets your public key, which you need to encrypt secrets. You need to
encrypt a secret before you can create or update secrets.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_public_key,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/variables",
    alias: "actions/list-repo-variables",
    description: `Lists all repository variables.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(10),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        variables: z.array(actions_variable),
      })
      .passthrough(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/variables",
    alias: "actions/create-repo-variable",
    description: `Creates a repository variable that you can reference in a GitHub Actions workflow.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_repo_variable_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/variables/:name",
    alias: "actions/get-repo-variable",
    description: `Gets a specific variable in a repository.

The authenticated user must have collaborator access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_variable,
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/actions/variables/:name",
    alias: "actions/update-repo-variable",
    description: `Updates a repository variable that you can reference in a GitHub Actions workflow.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_update_repo_variable_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/actions/variables/:name",
    alias: "actions/delete-repo-variable",
    description: `Deletes a repository variable using the variable name.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/workflows",
    alias: "actions/list-repo-workflows",
    description: `Lists the workflows in a repository.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), workflows: z.array(workflow) })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/workflows/:workflow_id",
    alias: "actions/get-workflow",
    description: `Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow
file name. For example, you could use &#x60;main.yaml&#x60;.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "workflow_id",
        type: "Path",
        schema: workflow_id,
      },
    ],
    response: workflow,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/workflows/:workflow_id/disable",
    alias: "actions/disable-workflow",
    description: `Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "workflow_id",
        type: "Path",
        schema: workflow_id,
      },
    ],
    response: z.void(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/actions/workflows/:workflow_id/dispatches",
    alias: "actions/create-workflow-dispatch",
    description: `You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.

You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see &quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).&quot;

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_workflow_dispatch_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "workflow_id",
        type: "Path",
        schema: workflow_id,
      },
    ],
    response: z.void(),
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/actions/workflows/:workflow_id/enable",
    alias: "actions/enable-workflow",
    description: `Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "workflow_id",
        type: "Path",
        schema: workflow_id,
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/workflows/:workflow_id/runs",
    alias: "actions/list-workflow-runs",
    description: `List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "workflow_id",
        type: "Path",
        schema: workflow_id,
      },
      {
        name: "actor",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "branch",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "event",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "status",
        type: "Query",
        schema: z
          .enum([
            "completed",
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "skipped",
            "stale",
            "success",
            "timed_out",
            "in_progress",
            "queued",
            "requested",
            "waiting",
            "pending",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "created",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "exclude_pull_requests",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "check_suite_id",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "head_sha",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        workflow_runs: z.array(workflow_run),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/actions/workflows/:workflow_id/timing",
    alias: "actions/get-workflow-usage",
    description: `Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see &quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)&quot;.

You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "workflow_id",
        type: "Path",
        schema: workflow_id,
      },
    ],
    response: workflow_usage,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/activity",
    alias: "repos/list-activities",
    description: `Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.

For more information about viewing repository activity,
see &quot;[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "actor",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "time_period",
        type: "Query",
        schema: z.enum(["day", "week", "month", "quarter", "year"]).optional(),
      },
      {
        name: "activity_type",
        type: "Query",
        schema: z
          .enum([
            "push",
            "force_push",
            "branch_creation",
            "branch_deletion",
            "pr_merge",
            "merge_queue_merge",
          ])
          .optional(),
      },
    ],
    response: z.array(activity),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/assignees",
    alias: "issues/list-assignees",
    description: `Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/assignees/:assignee",
    alias: "issues/check-user-can-be-assigned",
    description: `Checks if a user has permission to be assigned to an issue in this repository.

If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned.

Otherwise a &#x60;404&#x60; status code is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "assignee",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Otherwise a &#x60;404&#x60; status code is returned.`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/autolinks",
    alias: "repos/list-autolinks",
    description: `Gets all autolinks that are configured for a repository.

Information about autolinks are only available to repository administrators.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(autolink),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/autolinks",
    alias: "repos/create-autolink",
    description: `Users with admin access to the repository can create an autolink.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_autolink_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: autolink,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/autolinks/:autolink_id",
    alias: "repos/get-autolink",
    description: `This returns a single autolink reference by ID that was configured for the given repository.

Information about autolinks are only available to repository administrators.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "autolink_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: autolink,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/autolinks/:autolink_id",
    alias: "repos/delete-autolink",
    description: `This deletes a single autolink reference by ID that was configured for the given repository.

Information about autolinks are only available to repository administrators.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "autolink_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/automated-security-fixes",
    alias: "repos/check-automated-security-fixes",
    description: `Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see &quot;[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: check_automated_security_fixes,
    errors: [
      {
        status: 404,
        description: `Not Found if dependabot is not enabled for the repository`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/automated-security-fixes",
    alias: "repos/enable-automated-security-fixes",
    description: `Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see &quot;[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/automated-security-fixes",
    alias: "repos/disable-automated-security-fixes",
    description: `Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see &quot;[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches",
    alias: "repos/list-branches",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "protected",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(short_branch),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch",
    alias: "repos/get-branch",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: branch_with_protection,
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection",
    alias: "repos/get-branch-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: branch_protection,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/branches/:branch/protection",
    alias: "repos/update-branch-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Protecting a branch requires admin or owner permissions to the repository.

**Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.

**Note**: The list of users, apps, and teams in total is limited to 100 items.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_branch_protection_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: protected_branch,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection",
    alias: "repos/delete-branch-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    alias: "repos/get-admin-branch-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: protected_branch_admin_enforced,
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    alias: "repos/set-admin-branch-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: protected_branch_admin_enforced,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
    alias: "repos/delete-admin-branch-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    alias: "repos/get-pull-request-review-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: protected_branch_pull_request_review,
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    alias: "repos/update-pull-request-review-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.

**Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_pull_request_review_protection_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: protected_branch_pull_request_review,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
    alias: "repos/delete-pull-request-review-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    alias: "repos/get-commit-signature-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of &#x60;true&#x60; indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.

**Note**: You must enable branch protection to require signed commits.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: protected_branch_admin_enforced,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    alias: "repos/create-commit-signature-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: protected_branch_admin_enforced,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
    alias: "repos/delete-commit-signature-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    alias: "repos/get-status-checks-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: status_check_policy,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    alias: "repos/update-status-check-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_status_check_protection_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: status_check_policy,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
    alias: "repos/remove-status-check-protection",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    alias: "repos/get-all-status-check-contexts",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(z.string()),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    alias: "repos/add-status-check-contexts",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_status_check_contexts_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(z.string()),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    alias: "repos/set-status-check-contexts",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_status_check_contexts_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(z.string()),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
    alias: "repos/remove-status-check-contexts",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_status_check_contexts_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(z.string()),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    alias: "repos/get-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists who has access to this protected branch.

**Note**: Users, apps, and teams &#x60;restrictions&#x60; are only available for organization-owned repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: branch_restriction_policy,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions",
    alias: "repos/delete-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Disables the ability to restrict who can push to this branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    alias: "repos/get-apps-with-access-to-protected-branch",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(integration),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    alias: "repos/add-app-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_app_access_restrictions_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(integration),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    alias: "repos/set-app-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_app_access_restrictions_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(integration),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
    alias: "repos/remove-app-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_app_access_restrictions_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(integration),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    alias: "repos/get-teams-with-access-to-protected-branch",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the teams who have push access to this branch. The list includes child teams.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    alias: "repos/add-team-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified teams push access for this branch. You can also give push access to child teams.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_team_access_restrictions_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    alias: "repos/set-team-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_team_access_restrictions_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
    alias: "repos/remove-team-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a team to push to this branch. You can also remove push access for child teams.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_team_access_restrictions_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    alias: "repos/get-users-with-access-to-protected-branch",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the people who have push access to this branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    alias: "repos/add-user-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified people push access for this branch.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_user_access_restrictions_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    alias: "repos/set-user-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_user_access_restrictions_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
    alias: "repos/remove-user-access-restrictions",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a user to push to this branch.

| Type    | Description                                                                                                                                   |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| &#x60;array&#x60; | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_add_user_access_restrictions_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/branches/:branch/rename",
    alias: "repos/rename-branch",
    description: `Renames a branch in a repository.

**Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won&#x27;t be able to push to the old branch name while the rename process is in progress. For more information, see &quot;[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)&quot;.

The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.

In order to rename the default branch, fine-grained access tokens also need the &#x60;administration:write&#x60; repository permission.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ new_name: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: branch_with_protection,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/check-runs",
    alias: "checks/create",
    description: `Creates a new check run for a specific commit in a repository.

To create a check run, you must use a GitHub App. OAuth apps and authenticated users are not able to create a check suite.

In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.

**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z.object({ status: z.unknown() }).passthrough(),
          z.object({ status: z.unknown() }).partial().passthrough(),
        ]),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: check_run,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/check-runs/:check_run_id",
    alias: "checks/get",
    description: `Gets a single check run using its &#x60;id&#x60;.

**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint on a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: check_run,
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/check-runs/:check_run_id",
    alias: "checks/update",
    description: `Updates a check run for a specific commit in a repository.

**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.

OAuth apps and personal access tokens (classic) cannot use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z.object({ status: z.unknown().optional() }).passthrough(),
          z.object({ status: z.unknown() }).partial().passthrough(),
        ]),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: check_run,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/check-runs/:check_run_id/annotations",
    alias: "checks/list-annotations",
    description: `Lists annotations for a check run using the annotation &#x60;id&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint on a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_run_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(check_annotation),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/check-runs/:check_run_id/rerequest",
    alias: "checks/rerequest-run",
    description: `Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_run&#x60; webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action &#x60;rerequested&#x60;. When a check run is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.

For more information about how to re-run GitHub Actions jobs, see &quot;[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)&quot;.

OAuth apps and personal access tokens (classic) cannot use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_run_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 403,
        description: `Forbidden if the check run is not rerequestable or doesn&#x27;t belong to the authenticated GitHub App`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation error if the check run is not rerequestable`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/check-suites",
    alias: "checks/create-suite",
    description: `Creates a check suite manually. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you&#x27;ve disabled automatic creation using &quot;[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)&quot;.

**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.

OAuth apps and personal access tokens (classic) cannot use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ head_sha: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: check_suite,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/check-suites/:check_suite_id",
    alias: "checks/get-suite",
    description: `Gets a single check suite using its &#x60;id&#x60;.

**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint on a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_suite_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: check_suite,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs",
    alias: "checks/list-for-suite",
    description: `Lists check runs for a check suite using its &#x60;id&#x60;.

**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint on a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_suite_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "check_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "status",
        type: "Query",
        schema: z.enum(["queued", "in_progress", "completed"]).optional(),
      },
      {
        name: "filter",
        type: "Query",
        schema: z.enum(["latest", "all"]).optional().default("latest"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), check_runs: z.array(check_run) })
      .passthrough(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/check-suites/:check_suite_id/rerequest",
    alias: "checks/rerequest-suite",
    description: `Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_suite&#x60; webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action &#x60;rerequested&#x60;. When a check suite is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.

OAuth apps and personal access tokens (classic) cannot use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_suite_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/check-suites/preferences",
    alias: "checks/set-suites-preferences",
    description: `Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
You must have admin permissions in the repository to set preferences for check suites.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: checks_set_suites_preferences_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: check_suite_preference,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/alerts",
    alias: "code-scanning/list-alerts-for-repo",
    description: `Lists code scanning alerts.

The response includes a &#x60;most_recent_instance&#x60; object.
This provides details of the most recent instance of this alert
for the default branch (or for the specified Git reference if you used &#x60;ref&#x60; in the request).

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "tool_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "tool_guid",
        type: "Query",
        schema: z.string().nullish(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "dismissed", "fixed"]).optional(),
      },
      {
        name: "severity",
        type: "Query",
        schema: z
          .enum([
            "critical",
            "high",
            "medium",
            "low",
            "warning",
            "note",
            "error",
          ])
          .optional(),
      },
    ],
    response: z.array(code_scanning_alert_items),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/alerts/:alert_number",
    alias: "code-scanning/get-alert",
    description: `Gets a single code scanning alert.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: code_scanning_alert,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/code-scanning/alerts/:alert_number",
    alias: "code-scanning/update-alert",
    description: `Updates the status of a single code scanning alert.
OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: code_scanning_update_alert_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: code_scanning_alert,
    errors: [
      {
        status: 403,
        description: `Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/alerts/:alert_number/instances",
    alias: "code-scanning/list-alert-instances",
    description: `Lists all instances of the specified code scanning alert.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(code_scanning_alert_instance),
    errors: [
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/analyses",
    alias: "code-scanning/list-recent-analyses",
    description: `Lists the details of all code scanning analyses for a repository,
starting with the most recent.
The response is paginated and you can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters
to list the analyses you&#x27;re interested in.
By default 30 analyses are listed per page.

The &#x60;rules_count&#x60; field in the response give the number of rules
that were run in the analysis.
For very old analyses this data is not available,
and &#x60;0&#x60; is returned in this field.

**Deprecation notice**:
The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "tool_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "tool_guid",
        type: "Query",
        schema: z.string().nullish(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sarif_id",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.literal("created").optional().default("created"),
      },
    ],
    response: z.array(code_scanning_analysis),
    errors: [
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/analyses/:analysis_id",
    alias: "code-scanning/get-analysis",
    description: `Gets a specified code scanning analysis for a repository.

The default JSON response contains fields that describe the analysis.
This includes the Git reference and commit SHA to which the analysis relates,
the datetime of the analysis, the name of the code scanning tool,
and the number of alerts.

The &#x60;rules_count&#x60; field in the default response give the number of rules
that were run in the analysis.
For very old analyses this data is not available,
and &#x60;0&#x60; is returned in this field.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/sarif+json&#x60;**: Instead of returning a summary of the analysis, this endpoint returns a subset of the analysis data that was uploaded. The data is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such as the &#x60;github/alertNumber&#x60; and &#x60;github/alertUrl&#x60; properties.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "analysis_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: code_scanning_analysis,
    errors: [
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/code-scanning/analyses/:analysis_id",
    alias: "code-scanning/delete-analysis",
    description: `Deletes a specified code scanning analysis from a repository.

You can delete one analysis at a time.
To delete a series of analyses, start with the most recent analysis and work backwards.
Conceptually, the process is similar to the undo function in a text editor.

When you list the analyses for a repository,
one or more will be identified as deletable in the response:

&#x60;&#x60;&#x60;
&quot;deletable&quot;: true
&#x60;&#x60;&#x60;

An analysis is deletable when it&#x27;s the most recent in a set of analyses.
Typically, a repository will have multiple sets of analyses
for each enabled code scanning tool,
where a set is determined by a unique combination of analysis values:

* &#x60;ref&#x60;
* &#x60;tool&#x60;
* &#x60;category&#x60;

If you attempt to delete an analysis that is not the most recent in a set,
you&#x27;ll get a 400 response with the message:

&#x60;&#x60;&#x60;
Analysis specified is not deletable.
&#x60;&#x60;&#x60;

The response from a successful &#x60;DELETE&#x60; operation provides you with
two alternative URLs for deleting the next analysis in the set:
&#x60;next_analysis_url&#x60; and &#x60;confirm_delete_url&#x60;.
Use the &#x60;next_analysis_url&#x60; URL if you want to avoid accidentally deleting the final analysis
in a set. This is a useful option if you want to preserve at least one analysis
for the specified tool in your repository.
Use the &#x60;confirm_delete_url&#x60; URL if you are content to remove all analyses for a tool.
When you delete the last analysis in a set, the value of &#x60;next_analysis_url&#x60; and &#x60;confirm_delete_url&#x60;
in the 200 response is &#x60;null&#x60;.

As an example of the deletion process,
let&#x27;s imagine that you added a workflow that configured a particular code scanning tool
to analyze the code in a repository. This tool has added 15 analyses:
10 on the default branch, and another 5 on a topic branch.
You therefore have two separate sets of analyses for this tool.
You&#x27;ve now decided that you want to remove all of the analyses for the tool.
To do this you must make 15 separate deletion requests.
To start, you must find an analysis that&#x27;s identified as deletable.
Each set of analyses always has one that&#x27;s identified as deletable.
Having found the deletable analysis for one of the two sets,
delete this analysis and then continue deleting the next analysis in the set until they&#x27;re all deleted.
Then repeat the process for the second set.
The procedure therefore consists of a nested loop:

**Outer loop**:
* List the analyses for the repository, filtered by tool.
* Parse this list to find a deletable analysis. If found:

  **Inner loop**:
  * Delete the identified analysis.
  * Parse the response for the value of &#x60;confirm_delete_url&#x60; and, if found, use this in the next iteration.

The above process assumes that you want to remove all trace of the tool&#x27;s analyses from the GitHub user interface, for the specified repository, and it therefore uses the &#x60;confirm_delete_url&#x60; value. Alternatively, you could use the &#x60;next_analysis_url&#x60; value, which would leave the last analysis in each set undeleted to avoid removing a tool&#x27;s analysis entirely.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "analysis_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "confirm_delete",
        type: "Query",
        schema: z.string().nullish(),
      },
    ],
    response: code_scanning_analysis_deletion,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/codeql/databases",
    alias: "code-scanning/list-codeql-databases",
    description: `Lists the CodeQL databases that are available in a repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(code_scanning_codeql_database),
    errors: [
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/codeql/databases/:language",
    alias: "code-scanning/get-codeql-database",
    description: `Gets a CodeQL database for a language in a repository.

By default this endpoint returns JSON metadata about the CodeQL database. To
download the CodeQL database binary content, set the &#x60;Accept&#x60; header of the request
to [&#x60;application/zip&#x60;](https://docs.github.com/rest/overview/media-types), and make sure
your HTTP client is configured to follow redirects or use the &#x60;Location&#x60; header
to make a second request to get the redirect URL.

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "language",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: code_scanning_codeql_database,
    errors: [
      {
        status: 302,
        description: `Found`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/default-setup",
    alias: "code-scanning/get-default-setup",
    description: `Gets a code scanning default setup configuration.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: code_scanning_default_setup,
    errors: [
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/code-scanning/default-setup",
    alias: "code-scanning/update-default-setup",
    description: `Updates a code scanning default setup configuration.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: code_scanning_default_setup_update,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 403,
        description: `Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Response if there is already a validation run in progress with a different default setup configuration`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/code-scanning/sarifs",
    alias: "code-scanning/upload-sarif",
    description: `Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For troubleshooting information, see &quot;[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif).&quot;

There are two places where you can upload code scanning results.
 - If you upload to a pull request, for example &#x60;--ref refs/pull/42/merge&#x60; or &#x60;--ref refs/pull/42/head&#x60;, then the results appear as alerts in a pull request check. For more information, see &quot;[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).&quot;
 - If you upload to a branch, for example &#x60;--ref refs/heads/my-branch&#x60;, then the results appear in the **Security** tab for your repository. For more information, see &quot;[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).&quot;

You must compress the SARIF-formatted analysis data that you want to upload, using &#x60;gzip&#x60;, and then encode it as a Base64 format string. For example:

&#x60;&#x60;&#x60;
gzip -c analysis-data.sarif | base64 -w0
&#x60;&#x60;&#x60;

SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see &quot;[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit).&quot;


| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
|----------------------------------|:------------------:|----------------------------------------------------------------------------------|
| Runs per file                    |         20         |                                                                                  |
| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
| Rules per run                    |       25,000       |                                                                                  |
| Tool extensions per run          |        100         |                                                                                  |
| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
| Location per result	             |       1,000        | Only 100 locations will be included.                                             |
| Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |


The &#x60;202 Accepted&#x60; response includes an &#x60;id&#x60; value.
You can use this ID to check the status of the upload by using it in the &#x60;/sarifs/{sarif_id}&#x60; endpoint.
For more information, see &quot;[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: code_scanning_upload_sarif_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: code_scanning_sarifs_receipt,
    errors: [
      {
        status: 400,
        description: `Bad Request if the sarif field is invalid`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 413,
        description: `Payload Too Large if the sarif field is too large`,
        schema: z.void(),
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/code-scanning/sarifs/:sarif_id",
    alias: "code-scanning/get-sarif",
    description: `Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see &quot;[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository).&quot;
OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint with private or public repositories, or the &#x60;public_repo&#x60; scope to use this endpoint with only public repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sarif_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: code_scanning_sarifs_status,
    errors: [
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Not Found if the sarif id does not match any upload`,
        schema: z.void(),
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codeowners/errors",
    alias: "repos/codeowners-errors",
    description: `List any syntax errors that are detected in the CODEOWNERS
file.

For more information about the correct CODEOWNERS syntax,
see &quot;[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: codeowners_errors,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces",
    alias: "codespaces/list-in-repository-for-authenticated-user",
    description: `Lists the codespaces associated to a specified repository and the authenticated user.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), codespaces: z.array(codespace) })
      .passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/codespaces",
    alias: "codespaces/create-with-repo-for-authenticated-user",
    description: `Creates a codespace owned by the authenticated user in the specified repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          codespaces_create_with_repo_for_authenticated_user_Body.nullable(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces/devcontainers",
    alias: "codespaces/list-devcontainers-in-repository-for-authenticated-user",
    description: `Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
specify launchpoint configurations for codespaces created within the repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        devcontainers: z.array(
          z
            .object({
              path: z.string(),
              name: z.string().optional(),
              display_name: z.string().optional(),
            })
            .passthrough(),
        ),
      })
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces/machines",
    alias: "codespaces/repo-machines-for-authenticated-user",
    description: `List the machine types available for a given repository based on its configuration.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "location",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "client_ip",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        machines: z.array(codespace_machine),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces/new",
    alias: "codespaces/pre-flight-with-repo-for-authenticated-user",
    description: `Gets the default attributes for codespaces created by the user with the repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "client_ip",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z
      .object({
        billable_owner: simple_user,
        defaults: z
          .object({
            location: z.string(),
            devcontainer_path: z.string().nullable(),
          })
          .passthrough(),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces/permissions_check",
    alias: "codespaces/check-permissions-for-devcontainer",
    description: `Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "devcontainer_path",
        type: "Query",
        schema: z.string(),
      },
    ],
    response: z.object({ accepted: z.boolean() }).passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces/secrets",
    alias: "codespaces/list-repo-secrets",
    description: `Lists all development environment secrets available in a repository without revealing their encrypted
values.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(repo_codespaces_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    alias: "codespaces/get-repo-secret",
    description: `Gets a single repository development environment secret without revealing its encrypted value.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repo_codespaces_secret,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    alias: "codespaces/create-or-update-repo-secret",
    description: `Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_or_update_repo_secret_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/codespaces/secrets/:secret_name",
    alias: "codespaces/delete-repo-secret",
    description: `Deletes a development environment secret in a repository using the secret name.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/codespaces/secrets/public-key",
    alias: "codespaces/get-repo-public-key",
    description: `Gets your public key, which you need to encrypt secrets. You need to
encrypt a secret before you can create or update secrets.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespaces_public_key,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/collaborators",
    alias: "repos/list-collaborators",
    description: `For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.

Team members will include the members of child teams.

The authenticated user must have push access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; and &#x60;repo&#x60; scopes to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "affiliation",
        type: "Query",
        schema: z.enum(["outside", "direct", "all"]).optional().default("all"),
      },
      {
        name: "permission",
        type: "Query",
        schema: z
          .enum(["pull", "triage", "push", "maintain", "admin"])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(collaborator),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/collaborators/:username",
    alias: "repos/check-collaborator",
    description: `For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.

Team members will include the members of child teams.

The authenticated user must have push access to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; and &#x60;repo&#x60; scopes to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Not Found if user is not a collaborator`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/collaborators/:username",
    alias: "repos/add-collaborator",
    description: `This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

Adding an outside collaborator may be restricted by enterprise administrators. For more information, see &quot;[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).&quot;

For more information on permission levels, see &quot;[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)&quot;. There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:

&#x60;&#x60;&#x60;
Cannot assign {member} permission of {role name}
&#x60;&#x60;&#x60;

Note that, if you choose not to pass any parameters, you&#x27;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see &quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).&quot;

The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).

**Updating an existing collaborator&#x27;s permission level**

The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different &#x60;permission&#x60; parameter. The response will be a &#x60;204&#x60;, with no other indication that the permission level changed.

**Rate limits**

You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ permission: z.string().default("push") })
          .partial()
          .passthrough()
          .optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_invitation,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/collaborators/:username",
    alias: "repos/remove-collaborator",
    description: `Removes a collaborator from a repository.

To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.

This endpoint also:
- Cancels any outstanding invitations
- Unasigns the user from any issues
- Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
- Unstars the repository
- Updates access permissions to packages

Removing a user as a collaborator has the following effects on forks:
 - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
 - If the user had their own fork of the repository, the fork will be deleted.
 - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.

**Note**: A user can still have access to the repository through organization permissions like base repository permissions.

Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.

For more information on fork permissions, see &quot;[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/collaborators/:username/permission",
    alias: "repos/get-collaborator-permission-level",
    description: `Checks the repository permission of a collaborator. The possible repository
permissions are &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;.

*Note*: The &#x60;permission&#x60; attribute provides the legacy base roles of &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;, where the
&#x60;maintain&#x60; role is mapped to &#x60;write&#x60; and the &#x60;triage&#x60; role is mapped to &#x60;read&#x60;. To determine the role assigned to the
collaborator, see the &#x60;role_name&#x60; attribute, which will provide the full role name, including custom roles. The
&#x60;permissions&#x60; hash can also be used to determine which base level of access the collaborator has to the repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_collaborator_permission,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/comments",
    alias: "repos/list-commit-comments-for-repo",
    description: `Lists the commit comments for a specified repository. Comments are ordered by ascending ID.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(commit_comment),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/comments/:comment_id",
    alias: "repos/get-commit-comment",
    description: `Gets a specified commit comment.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: commit_comment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/comments/:comment_id",
    alias: "repos/update-commit-comment",
    description: `Updates the contents of a specified commit comment.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: commit_comment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/comments/:comment_id",
    alias: "repos/delete-commit-comment",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/comments/:comment_id/reactions",
    alias: "reactions/list-for-commit-comment",
    description: `List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "content",
        type: "Query",
        schema: z
          .enum([
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(reaction),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/comments/:comment_id/reactions",
    alias: "reactions/create-for-commit-comment",
    description: `Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: reactions_create_for_team_discussion_comment_in_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: reaction,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/comments/:comment_id/reactions/:reaction_id",
    alias: "reactions/delete-for-commit-comment",
    description: `**Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id&#x60;.

Delete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "reaction_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits",
    alias: "repos/list-commits",
    description: `**Signature verification object**

The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#x27;s signature. The following fields are included in the &#x60;verification&#x60; object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. |
| &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. |
| &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |

These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:

| Value | Description |
| ----- | ----------- |
| &#x60;expired_key&#x60; | The key that made the signature is expired. |
| &#x60;not_signing_key&#x60; | The &quot;signing&quot; flag is not among the usage flags in the GPG key that made the signature. |
| &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. |
| &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. |
| &#x60;unsigned&#x60; | The object does not include a signature. |
| &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. |
| &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. |
| &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. |
| &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. |
| &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#x27;s account. |
| &#x60;malformed_signature&#x60; | There was an error parsing the signature. |
| &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sha",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "path",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "author",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "committer",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "until",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(commit),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:commit_sha/branches-where-head",
    alias: "repos/list-branches-for-head-commit",
    description: `Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "commit_sha",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(branch_short),
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:commit_sha/comments",
    alias: "repos/list-comments-for-commit",
    description: `Lists the comments for a specified commit.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "commit_sha",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(commit_comment),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/commits/:commit_sha/comments",
    alias: "repos/create-commit-comment",
    description: `Create a comment for a commit using its &#x60;:commit_sha&#x60;.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_commit_comment_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "commit_sha",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: commit_comment,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:commit_sha/pulls",
    alias: "repos/list-pull-requests-associated-with-commit",
    description: `Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.

To list the open or merged pull requests associated with a branch, you can set the &#x60;commit_sha&#x60; parameter to the branch name.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "commit_sha",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(pull_request_simple),
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:ref",
    alias: "repos/get-commit",
    description: `Returns the contents of a single commit reference. You must have &#x60;read&#x60; access for the repository to use this endpoint.

**Note:** If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot; Pagination query parameters are not supported for these media types.

- **&#x60;application/vnd.github.diff&#x60;**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code.
- **&#x60;application/vnd.github.patch&#x60;**: Returns the patch of the commit. Diffs with binary data will have no &#x60;patch&#x60; property. Larger diffs may time out and return a 5xx status code.
- **&#x60;application/vnd.github.sha&#x60;**: Returns the commit&#x27;s SHA-1 hash. You can use this endpoint to check if a remote reference&#x27;s SHA-1 hash is the same as your local reference&#x27;s SHA-1 hash by providing the local SHA-1 reference as the ETag.

**Signature verification object**

The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#x27;s signature. The following fields are included in the &#x60;verification&#x60; object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. |
| &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. |
| &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |

These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:

| Value | Description |
| ----- | ----------- |
| &#x60;expired_key&#x60; | The key that made the signature is expired. |
| &#x60;not_signing_key&#x60; | The &quot;signing&quot; flag is not among the usage flags in the GPG key that made the signature. |
| &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. |
| &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. |
| &#x60;unsigned&#x60; | The object does not include a signature. |
| &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. |
| &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. |
| &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. |
| &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. |
| &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#x27;s account. |
| &#x60;malformed_signature&#x60; | There was an error parsing the signature. |
| &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: commit,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:ref/check-runs",
    alias: "checks/list-for-ref",
    description: `Lists check runs for a commit ref. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name.

**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.

If there are more than 1000 check suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate over all possible check runs, use the [List check suites for a Git reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the &#x60;check_suite_id&#x60; parameter to the [List check runs in a check suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint on a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "check_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "status",
        type: "Query",
        schema: z.enum(["queued", "in_progress", "completed"]).optional(),
      },
      {
        name: "filter",
        type: "Query",
        schema: z.enum(["latest", "all"]).optional().default("latest"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "app_id",
        type: "Query",
        schema: z.number().int().optional(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), check_runs: z.array(check_run) })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:ref/check-suites",
    alias: "checks/list-suites-for-ref",
    description: `Lists check suites for a commit &#x60;ref&#x60;. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name.

**Note:** The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint on a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "app_id",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "check_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        check_suites: z.array(check_suite),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:ref/status",
    alias: "repos/get-combined-status-for-ref",
    description: `Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.


Additionally, a combined &#x60;state&#x60; is returned. The &#x60;state&#x60; is one of:

*   **failure** if any of the contexts report as &#x60;error&#x60; or &#x60;failure&#x60;
*   **pending** if there are no statuses or a context is &#x60;pending&#x60;
*   **success** if the latest status for all contexts is &#x60;success&#x60;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: combined_commit_status,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/commits/:ref/statuses",
    alias: "repos/list-commit-statuses-for-ref",
    description: `Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.

This resource is also available via a legacy route: &#x60;GET /repos/:owner/:repo/statuses/:ref&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(status),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/community/profile",
    alias: "repos/get-community-profile-metrics",
    description: `Returns all community profile metrics for a repository. The repository cannot be a fork.

The returned metrics include an overall health score, the repository description, the presence of documentation, the
detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
README, and CONTRIBUTING files.

The &#x60;health_percentage&#x60; score is defined as a percentage of how many of
the recommended community health files are present. For more information, see
&quot;[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories).&quot;

&#x60;content_reports_enabled&#x60; is only returned for organization-owned repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: community_profile,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/compare/:basehead",
    alias: "repos/compare-commits",
    description: `Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository&#x27;s network, see &quot;[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories).&quot;

This endpoint is equivalent to running the &#x60;git log BASE..HEAD&#x60; command, but it returns commits in a different order. The &#x60;git log BASE..HEAD&#x60; command returns commits in reverse chronological order, whereas the API returns commits in chronological order.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.diff&#x60;**: Returns the diff of the commit.
- **&#x60;application/vnd.github.patch&#x60;**: Returns the patch of the commit. Diffs with binary data will have no &#x60;patch&#x60; property.

The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a &#x60;renamed&#x60; status have a &#x60;previous_filename&#x60; field showing the previous filename of the file, and files with a &#x60;modified&#x60; status have a &#x60;patch&#x60; field showing the changes made to the file.

When calling this endpoint without any paging parameter (&#x60;per_page&#x60; or &#x60;page&#x60;), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.

**Working with large comparisons**

To process a response with a large number of commits, use a query parameter (&#x60;per_page&#x60; or &#x60;page&#x60;) to paginate the results. When using pagination:

- The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
- The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.

For more information on working with pagination, see &quot;[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).&quot;

**Signature verification object**

The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#x27;s signature. The &#x60;verification&#x60; object includes the following fields:

| Name | Type | Description |
| ---- | ---- | ----------- |
| &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. |
| &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. |
| &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |

These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:

| Value | Description |
| ----- | ----------- |
| &#x60;expired_key&#x60; | The key that made the signature is expired. |
| &#x60;not_signing_key&#x60; | The &quot;signing&quot; flag is not among the usage flags in the GPG key that made the signature. |
| &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. |
| &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. |
| &#x60;unsigned&#x60; | The object does not include a signature. |
| &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. |
| &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. |
| &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. |
| &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. |
| &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#x27;s account. |
| &#x60;malformed_signature&#x60; | There was an error parsing the signature. |
| &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "basehead",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: commit_comparison,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/contents/:path",
    alias: "repos/get-content",
    description: `Gets the contents of a file or directory in a repository. Specify the file path or directory with the &#x60;path&#x60; parameter. If you omit the &#x60;path&#x60; parameter, you will receive the contents of the repository&#x27;s root directory.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw file contents for files and symlinks.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub&#x27;s open-source [Markup library](https://github.com/github/markup).
- **&#x60;application/vnd.github.object+json&#x60;**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an &#x60;entries&#x60; attribute containing the array of objects.

If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their &quot;type&quot; specified as &quot;file&quot;. Logically, the value _should_ be &quot;submodule&quot;. This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as &quot;submodule&quot;.

If the content is a symlink and the symlink&#x27;s target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.

If the content is a submodule, the &#x60;submodule_git_url&#x60; field identifies the location of the submodule repository, and the &#x60;sha&#x60; identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (&#x60;git_url&#x60; and &#x60;_links[&quot;git&quot;]&#x60;) and the github.com URLs (&#x60;html_url&#x60; and &#x60;_links[&quot;html&quot;]&#x60;) will have null values.

**Notes**:

- To get a repository&#x27;s contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
- This API has an upper limit of 1,000 files for a directory. If you need to retrieve
more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree).
- Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
- If the requested file&#x27;s size is:
  - 1 MB or smaller: All features of this endpoint are supported.
  - Between 1-100 MB: Only the &#x60;raw&#x60; or &#x60;object&#x60; custom media types are supported. Both will work as normal, except that when using the &#x60;object&#x60; media type, the &#x60;content&#x60; field will be an empty
string and the &#x60;encoding&#x60; field will be &#x60;&quot;none&quot;&#x60;. To get the contents of these larger files, use the &#x60;raw&#x60; media type.
  - Greater than 100 MB: This endpoint is not supported.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "path",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.union([
      content_directory,
      content_file,
      content_symlink,
      content_submodule,
    ]),
    errors: [
      {
        status: 302,
        description: `Found`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/contents/:path",
    alias: "repos/create-or-update-file-contents",
    description: `Creates a new file or replaces an existing file in a repository.

**Note:** If you use this endpoint and the &quot;[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)&quot; endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint. The &#x60;workflow&#x60; scope is also required in order to modify files in the &#x60;.github/workflows&#x60; directory.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_or_update_file_contents_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "path",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: file_commit,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/contents/:path",
    alias: "repos/delete-file",
    description: `Deletes a file in a repository.

You can provide an additional &#x60;committer&#x60; parameter, which is an object containing information about the committer. Or, you can provide an &#x60;author&#x60; parameter, which is an object containing information about the author.

The &#x60;author&#x60; section is optional and is filled in with the &#x60;committer&#x60; information if omitted. If the &#x60;committer&#x60; information is omitted, the authenticated user&#x27;s information is used.

You must provide values for both &#x60;name&#x60; and &#x60;email&#x60;, whether you choose to use &#x60;author&#x60; or &#x60;committer&#x60;. Otherwise, you&#x27;ll receive a &#x60;422&#x60; status code.

**Note:** If you use this endpoint and the &quot;[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)&quot; endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_delete_file_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "path",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: file_commit,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/contributors",
    alias: "repos/list-contributors",
    description: `Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.

GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "anon",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(contributor),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/dependabot/alerts",
    alias: "dependabot/list-alerts-for-repo",
    description: `OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "severity",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "ecosystem",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "package",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "manifest",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "scope",
        type: "Query",
        schema: z.enum(["development", "runtime"]).optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "first",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional().default(30),
      },
      {
        name: "last",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional(),
      },
    ],
    response: z.array(dependabot_alert),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/dependabot/alerts/:alert_number",
    alias: "dependabot/get-alert",
    description: `OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: dependabot_alert,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/dependabot/alerts/:alert_number",
    alias: "dependabot/update-alert",
    description: `The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see &quot;[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: dependabot_update_alert_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: dependabot_alert,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/dependabot/secrets",
    alias: "dependabot/list-repo-secrets",
    description: `Lists all secrets available in a repository without revealing their encrypted
values.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(dependabot_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    alias: "dependabot/get-repo-secret",
    description: `Gets a single repository secret without revealing its encrypted value.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: dependabot_secret,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    alias: "dependabot/create-or-update-repo-secret",
    description: `Creates or updates a repository secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_or_update_repo_secret_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/dependabot/secrets/:secret_name",
    alias: "dependabot/delete-repo-secret",
    description: `Deletes a secret in a repository using the secret name.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/dependabot/secrets/public-key",
    alias: "dependabot/get-repo-public-key",
    description: `Gets your public key, which you need to encrypt secrets. You need to
encrypt a secret before you can create or update secrets. Anyone with read access
to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint if the repository is private.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: dependabot_public_key,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/dependency-graph/compare/:basehead",
    alias: "dependency-graph/diff-range",
    description: `Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "basehead",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: dependency_graph_diff,
    errors: [
      {
        status: 403,
        description: `Response if GitHub Advanced Security is not enabled for this repository`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/dependency-graph/sbom",
    alias: "dependency-graph/export-sbom",
    description: `Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: dependency_graph_spdx_sbom,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/dependency-graph/snapshots",
    alias: "dependency-graph/create-repository-snapshot",
    description: `Create a new snapshot of a repository&#x27;s dependencies.

The authenticated user must have access to the repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: snapshot,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        id: z.number().int(),
        created_at: z.string(),
        result: z.string(),
        message: z.string(),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/deployments",
    alias: "repos/list-deployments",
    description: `Simple filtering of deployments is available via query parameters:`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sha",
        type: "Query",
        schema: z.string().optional().default("none"),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional().default("none"),
      },
      {
        name: "task",
        type: "Query",
        schema: z.string().optional().default("none"),
      },
      {
        name: "environment",
        type: "Query",
        schema: z.string().nullish().default("none"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(deployment),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/deployments",
    alias: "repos/create-deployment",
    description: `Deployments offer a few configurable parameters with certain defaults.

The &#x60;ref&#x60; parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
before we merge a pull request.

The &#x60;environment&#x60; parameter allows deployments to be issued to different runtime environments. Teams often have
multiple environments for verifying their applications, such as &#x60;production&#x60;, &#x60;staging&#x60;, and &#x60;qa&#x60;. This parameter
makes it easier to track which environments have requested deployments. The default environment is &#x60;production&#x60;.

The &#x60;auto_merge&#x60; parameter is used to ensure that the requested ref is not behind the repository&#x27;s default branch. If
the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
return a failure response.

By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a &#x60;success&#x60;
state. The &#x60;required_contexts&#x60; parameter allows you to specify a subset of contexts that must be &#x60;success&#x60;, or to
specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
not require any contexts or create any commit statuses, the deployment will always succeed.

The &#x60;payload&#x60; parameter is available for any extra information that a deployment system might need. It is a JSON text
field that will be passed on when a deployment event is dispatched.

The &#x60;task&#x60; parameter is used by the deployment system to allow different execution paths. In the web world this might
be &#x60;deploy:migrations&#x60; to run schema changes on the system. In the compiled world this could be a flag to compile an
application with debugging enabled.

Merged branch response:

You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
a deployment. This auto-merge happens when:
*   Auto-merge option is enabled in the repository
*   Topic branch does not include the latest changes on the base branch, which is &#x60;master&#x60; in the response example
*   There are no merge conflicts

If there are no new commits in the base branch, a new request to create a deployment should give a successful
response.

Merge conflict response:

This error happens when the &#x60;auto_merge&#x60; option is enabled and when the default branch (in this case &#x60;master&#x60;), can&#x27;t
be merged into the branch that&#x27;s being deployed (in this case &#x60;topic-branch&#x60;), due to merge conflicts.

Failed commit status checks:

This error happens when the &#x60;required_contexts&#x60; parameter indicates that one or more contexts need to have a &#x60;success&#x60;
status for the commit to be deployed, but one or more of the required contexts do not have a state of &#x60;success&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_deployment_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: deployment,
    errors: [
      {
        status: 409,
        description: `Conflict when there is a merge conflict or the commit&#x27;s status checks failed`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/deployments/:deployment_id",
    alias: "repos/get-deployment",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "deployment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: deployment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/deployments/:deployment_id",
    alias: "repos/delete-deployment",
    description: `If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.

To set a deployment as inactive, you must:

*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
*   Mark the active deployment as inactive by adding any non-successful deployment status.

For more information, see &quot;[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)&quot; and &quot;[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "deployment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    alias: "repos/list-deployment-statuses",
    description: `Users with pull access can view deployment statuses for a deployment:`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "deployment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(deployment_status),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/deployments/:deployment_id/statuses",
    alias: "repos/create-deployment-status",
    description: `Users with &#x60;push&#x60; access can create deployment statuses for a given deployment.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo_deployment&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_deployment_status_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "deployment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: deployment_status,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id",
    alias: "repos/get-deployment-status",
    description: `Users with pull access can view a deployment status for a deployment:`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "deployment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "status_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: deployment_status,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/dispatches",
    alias: "repos/create-dispatch-event",
    description: `You can use this endpoint to trigger a webhook event called &#x60;repository_dispatch&#x60; when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the &#x60;repository_dispatch&#x60; event occurs. For an example &#x60;repository_dispatch&#x60; webhook payload, see &quot;[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).&quot;

The &#x60;client_payload&#x60; parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the &#x60;client_payload&#x60; can include a message that a user would like to send using a GitHub Actions workflow. Or the &#x60;client_payload&#x60; can be used as a test to debug your workflow.

This input example shows how you can use the &#x60;client_payload&#x60; as a test to debug your workflow.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_dispatch_event_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments",
    alias: "repos/get-all-environments",
    description: `Lists the environments for a repository.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        environments: z.array(environment),
      })
      .partial()
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name",
    alias: "repos/get-environment",
    description: `**Note:** To get information about name patterns that branches must match in order to deploy to this environment, see &quot;[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy).&quot;

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: environment,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/environments/:environment_name",
    alias: "repos/create-or-update-environment",
    description: `Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see &quot;[Environments](/actions/reference/environments#environment-protection-rules).&quot;

**Note:** To create or update name patterns that branches must match in order to deploy to this environment, see &quot;[Deployment branch policies](/rest/deployments/branch-policies).&quot;

**Note:** To create or update secrets for an environment, see &quot;[GitHub Actions secrets](/rest/actions/secrets).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_or_update_environment_Body.nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: environment,
    errors: [
      {
        status: 422,
        description: `Validation error when the environment name is invalid or when &#x60;protected_branches&#x60; and &#x60;custom_branch_policies&#x60; in &#x60;deployment_branch_policy&#x60; are set to the same value`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/environments/:environment_name",
    alias: "repos/delete-an-environment",
    description: `OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules",
    alias: "repos/get-all-deployment-protection-rules",
    description: `Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see &quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).&quot;

For more information about the app that is providing this custom deployment rule, see the [documentation for the &#x60;GET /apps/{app_slug}&#x60; endpoint](https://docs.github.com/rest/apps/apps#get-an-app).

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        custom_deployment_protection_rules: z.array(deployment_protection_rule),
      })
      .partial()
      .passthrough(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules",
    alias: "repos/create-deployment-protection-rule",
    description: `Enable a custom deployment protection rule for an environment.

The authenticated user must have admin or owner permissions to the repository to use this endpoint.

For more information about the app that is providing this custom deployment rule, see the [documentation for the &#x60;GET /apps/{app_slug}&#x60; endpoint](https://docs.github.com/rest/apps/apps#get-an-app).

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ integration_id: z.number().int() })
          .partial()
          .passthrough(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: deployment_protection_rule,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/:protection_rule_id",
    alias: "repos/get-custom-deployment-protection-rule",
    description: `Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see &quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).&quot;

For more information about the app that is providing this custom deployment rule, see [&#x60;GET /apps/{app_slug}&#x60;](https://docs.github.com/rest/apps/apps#get-an-app).

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "protection_rule_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: deployment_protection_rule,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/:protection_rule_id",
    alias: "repos/disable-deployment-protection-rule",
    description: `Disables a custom deployment protection rule for an environment.

The authenticated user must have admin or owner permissions to the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "protection_rule_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment_protection_rules/apps",
    alias: "repos/list-custom-deployment-rule-integrations",
    description: `Gets all custom deployment protection rule integrations that are available for an environment. Anyone with read access to the repository can use this endpoint.

For more information about environments, see &quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).&quot;

For more information about the app that is providing this custom deployment rule, see &quot;[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)&quot;.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        available_custom_deployment_protection_rule_integrations: z.array(
          custom_deployment_rule_app,
        ),
      })
      .partial()
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    alias: "repos/list-deployment-branch-policies",
    description: `Lists the deployment branch policies for an environment.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        branch_policies: z.array(deployment_branch_policy),
      })
      .passthrough(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies",
    alias: "repos/create-deployment-branch-policy",
    description: `Creates a deployment branch or tag policy for an environment.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: deployment_branch_policy_name_pattern_with_type,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: deployment_branch_policy,
    errors: [
      {
        status: 303,
        description: `Response if the same branch name pattern already exists`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Not Found or &#x60;deployment_branch_policy.custom_branch_policies&#x60; property for the environment is set to false`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    alias: "repos/get-deployment-branch-policy",
    description: `Gets a deployment branch or tag policy for an environment.

Anyone with read access to the repository can use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch_policy_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: deployment_branch_policy,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    alias: "repos/update-deployment-branch-policy",
    description: `Updates a deployment branch or tag policy for an environment.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ name: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch_policy_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: deployment_branch_policy,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/environments/:environment_name/deployment-branch-policies/:branch_policy_id",
    alias: "repos/delete-deployment-branch-policy",
    description: `Deletes a deployment branch or tag policy for an environment.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch_policy_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/secrets",
    alias: "actions/list-environment-secrets",
    description: `Lists all secrets available in an environment without revealing their
encrypted values.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(actions_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/secrets/:secret_name",
    alias: "actions/get-environment-secret",
    description: `Gets a single environment secret without revealing its encrypted value.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_secret,
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/environments/:environment_name/secrets/:secret_name",
    alias: "actions/create-or-update-environment-secret",
    description: `Creates or updates an environment secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_or_update_environment_secret_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/environments/:environment_name/secrets/:secret_name",
    alias: "actions/delete-environment-secret",
    description: `Deletes a secret in an environment using the secret name.

Authenticated users must have collaborator access to a repository to create, update, or read secrets.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/secrets/public-key",
    alias: "actions/get-environment-public-key",
    description: `Get the public key for an environment, which you need to encrypt environment
secrets. You need to encrypt a secret before you can create or update secrets.

Anyone with read access to the repository can use this endpoint.

If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_public_key,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/variables",
    alias: "actions/list-environment-variables",
    description: `Lists all environment variables.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(10),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        variables: z.array(actions_variable),
      })
      .passthrough(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/environments/:environment_name/variables",
    alias: "actions/create-environment-variable",
    description: `Create an environment variable that you can reference in a GitHub Actions workflow.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_create_repo_variable_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    alias: "actions/get-environment-variable",
    description: `Gets a specific variable in an environment.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_variable,
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    alias: "actions/update-environment-variable",
    description: `Updates an environment variable that you can reference in a GitHub Actions workflow.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: actions_update_repo_variable_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/environments/:environment_name/variables/:name",
    alias: "actions/delete-environment-variable",
    description: `Deletes an environment variable using the variable name.

Authenticated users must have collaborator access to a repository to create, update, or read variables.

OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "environment_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/events",
    alias: "activity/list-repo-events",
    description: `**Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/forks",
    alias: "repos/list-forks",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["newest", "oldest", "stargazers", "watchers"])
          .optional()
          .default("newest"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/forks",
    alias: "repos/create-fork",
    description: `Create a fork for the authenticated user.

**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api).

**Note**: Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_fork_Body.nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: full_repository,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/git/blobs",
    alias: "git/create-blob",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: git_create_blob_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: short_blob,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/git/blobs/:file_sha",
    alias: "git/get-blob",
    description: `The &#x60;content&#x60; in the response will always be Base64 encoded.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw blob data.
- **&#x60;application/vnd.github+json&#x60;**: Returns a JSON representation of the blob with &#x60;content&#x60; as a base64 encoded string. This is the default if no media type is specified.

**Note** This endpoint supports blobs up to 100 megabytes in size.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "file_sha",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: blob,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/git/commits",
    alias: "git/create-commit",
    description: `Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).

**Signature verification object**

The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#x27;s signature. The following fields are included in the &#x60;verification&#x60; object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. |
| &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
| &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. |
| &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |

These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:

| Value | Description |
| ----- | ----------- |
| &#x60;expired_key&#x60; | The key that made the signature is expired. |
| &#x60;not_signing_key&#x60; | The &quot;signing&quot; flag is not among the usage flags in the GPG key that made the signature. |
| &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. |
| &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. |
| &#x60;unsigned&#x60; | The object does not include a signature. |
| &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. |
| &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. |
| &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. |
| &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. |
| &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#x27;s account. |
| &#x60;malformed_signature&#x60; | There was an error parsing the signature. |
| &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: git_create_commit_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_commit,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/git/commits/:commit_sha",
    alias: "git/get-commit",
    description: `Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).

To get the contents of a commit, see &quot;[Get a commit](/rest/commits/commits#get-a-commit).&quot;

**Signature verification object**

The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#x27;s signature. The following fields are included in the &#x60;verification&#x60; object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. |
| &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
| &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. |
| &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |

These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:

| Value | Description |
| ----- | ----------- |
| &#x60;expired_key&#x60; | The key that made the signature is expired. |
| &#x60;not_signing_key&#x60; | The &quot;signing&quot; flag is not among the usage flags in the GPG key that made the signature. |
| &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. |
| &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. |
| &#x60;unsigned&#x60; | The object does not include a signature. |
| &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. |
| &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. |
| &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. |
| &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. |
| &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#x27;s account. |
| &#x60;malformed_signature&#x60; | There was an error parsing the signature. |
| &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "commit_sha",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_commit,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/git/matching-refs/:ref",
    alias: "git/list-matching-refs",
    description: `Returns an array of references from your Git database that match the supplied name. The &#x60;:ref&#x60; in the URL must be formatted as &#x60;heads/&lt;branch name&gt;&#x60; for branches and &#x60;tags/&lt;tag name&gt;&#x60; for tags. If the &#x60;:ref&#x60; doesn&#x27;t exist in the repository, but existing refs start with &#x60;:ref&#x60;, they will be returned as an array.

When you use this endpoint without providing a &#x60;:ref&#x60;, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just &#x60;heads&#x60; and &#x60;tags&#x60;.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see &quot;[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)&quot;.

If you request matching references for a branch named &#x60;feature&#x60; but the branch &#x60;feature&#x60; doesn&#x27;t exist, the response can still include other matching head refs that start with the word &#x60;feature&#x60;, such as &#x60;featureA&#x60; and &#x60;featureB&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(git_ref),
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/git/ref/:ref",
    alias: "git/get-ref",
    description: `Returns a single reference from your Git database. The &#x60;:ref&#x60; in the URL must be formatted as &#x60;heads/&lt;branch name&gt;&#x60; for branches and &#x60;tags/&lt;tag name&gt;&#x60; for tags. If the &#x60;:ref&#x60; doesn&#x27;t match an existing ref, a &#x60;404&#x60; is returned.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see &quot;[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_ref,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/git/refs",
    alias: "git/create-ref",
    description: `Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: git_create_ref_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_ref,
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/git/refs/:ref",
    alias: "git/update-ref",
    description: `Updates the provided reference to point to a new SHA. For more information, see &quot;[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)&quot; in the Git documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: git_update_ref_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_ref,
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/git/refs/:ref",
    alias: "git/delete-ref",
    description: `Deletes the provided reference.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/git/tags",
    alias: "git/create-tag",
    description: `Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the &#x60;refs/tags/[tag]&#x60; reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.

**Signature verification object**

The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#x27;s signature. The following fields are included in the &#x60;verification&#x60; object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. |
| &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. |
| &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |

These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:

| Value | Description |
| ----- | ----------- |
| &#x60;expired_key&#x60; | The key that made the signature is expired. |
| &#x60;not_signing_key&#x60; | The &quot;signing&quot; flag is not among the usage flags in the GPG key that made the signature. |
| &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. |
| &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. |
| &#x60;unsigned&#x60; | The object does not include a signature. |
| &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. |
| &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. |
| &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. |
| &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. |
| &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#x27;s account. |
| &#x60;malformed_signature&#x60; | There was an error parsing the signature. |
| &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: git_create_tag_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_tag,
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/git/tags/:tag_sha",
    alias: "git/get-tag",
    description: `**Signature verification object**

The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#x27;s signature. The following fields are included in the &#x60;verification&#x60; object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. |
| &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. |
| &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |

These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:

| Value | Description |
| ----- | ----------- |
| &#x60;expired_key&#x60; | The key that made the signature is expired. |
| &#x60;not_signing_key&#x60; | The &quot;signing&quot; flag is not among the usage flags in the GPG key that made the signature. |
| &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. |
| &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. |
| &#x60;unsigned&#x60; | The object does not include a signature. |
| &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. |
| &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. |
| &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. |
| &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. |
| &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#x27;s account. |
| &#x60;malformed_signature&#x60; | There was an error parsing the signature. |
| &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "tag_sha",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_tag,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/git/trees",
    alias: "git/create-tree",
    description: `The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.

If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see &quot;[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)&quot; and &quot;[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference).&quot;

Returns an error if you try to delete a file that does not exist.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: git_create_tree_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: git_tree,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/git/trees/:tree_sha",
    alias: "git/get-tree",
    description: `Returns a single tree using the SHA1 value or ref name for that tree.

If &#x60;truncated&#x60; is &#x60;true&#x60; in the response then the number of items in the &#x60;tree&#x60; array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.


**Note**: The limit for the &#x60;tree&#x60; array is 100,000 entries with a maximum size of 7 MB when using the &#x60;recursive&#x60; parameter.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "tree_sha",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "recursive",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: git_tree,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/hooks",
    alias: "repos/list-webhooks",
    description: `Lists webhooks for a repository. &#x60;last response&#x60; may return null if there have not been any deliveries within 30 days.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(hook),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/hooks",
    alias: "repos/create-webhook",
    description: `Repositories can have multiple webhooks installed. Each webhook should have a unique &#x60;config&#x60;. Multiple webhooks can
share the same &#x60;config&#x60; as long as those webhooks do not have any &#x60;events&#x60; that overlap.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_webhook_Body.nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: hook,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/hooks/:hook_id",
    alias: "repos/get-webhook",
    description: `Returns a webhook configured in a repository. To get only the webhook &#x60;config&#x60; properties, see &quot;[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: hook,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/hooks/:hook_id",
    alias: "repos/update-webhook",
    description: `Updates a webhook configured in a repository. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use &quot;[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_webhook_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: hook,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/hooks/:hook_id",
    alias: "repos/delete-webhook",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/hooks/:hook_id/config",
    alias: "repos/get-webhook-config-for-repo",
    description: `Returns the webhook configuration for a repository. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use &quot;[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:repo_hook&#x60; or &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: webhook_config,
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/hooks/:hook_id/config",
    alias: "repos/update-webhook-config-for-repo",
    description: `Updates the webhook configuration for a repository. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use &quot;[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;write:repo_hook&#x60; or &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_webhook_config_for_repo_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: webhook_config,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/hooks/:hook_id/deliveries",
    alias: "repos/list-webhook-deliveries",
    description: `Returns a list of webhook deliveries for a webhook configured in a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "cursor",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "redelivery",
        type: "Query",
        schema: z.boolean().optional(),
      },
    ],
    response: z.array(hook_delivery_item),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id",
    alias: "repos/get-webhook-delivery",
    description: `Returns a delivery for a webhook configured in a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "delivery_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: hook_delivery,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id/attempts",
    alias: "repos/redeliver-webhook-delivery",
    description: `Redeliver a webhook delivery for a webhook configured in a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "delivery_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/hooks/:hook_id/pings",
    alias: "repos/ping-webhook",
    description: `This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/hooks/:hook_id/tests",
    alias: "repos/test-push-webhook",
    description: `This will trigger the hook with the latest push to the current repository if the hook is subscribed to &#x60;push&#x60; events. If the hook is not subscribed to &#x60;push&#x60; events, the server will respond with 204 but no test POST will be generated.

**Note**: Previously &#x60;/repos/:owner/:repo/hooks/:hook_id/test&#x60;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "hook_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/installation",
    alias: "apps/get-repo-installation",
    description: `Enables an authenticated GitHub App to find the repository&#x27;s installation information. The installation&#x27;s account type will be either an organization or a user account, depending which account the repository belongs to.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: installation,
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/interaction-limits",
    alias: "interactions/get-restrictions-for-repo",
    description: `Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.union([interaction_limit_response, z.object({}).partial()]),
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/interaction-limits",
    alias: "interactions/set-restrictions-for-repo",
    description: `Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: interaction_limit,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: interaction_limit_response,
    errors: [
      {
        status: 409,
        description: `Response`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/interaction-limits",
    alias: "interactions/remove-restrictions-for-repo",
    description: `Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a &#x60;409 Conflict&#x60; response and will not be able to use this endpoint to change the interaction limit for a single repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 409,
        description: `Response`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/invitations",
    alias: "repos/list-invitations",
    description: `When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(repository_invitation),
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/invitations/:invitation_id",
    alias: "repos/update-invitation",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_invitation_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "invitation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: repository_invitation,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/invitations/:invitation_id",
    alias: "repos/delete-invitation",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "invitation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues",
    alias: "issues/list-for-repo",
    description: `List issues in a repository. Only open issues will be listed.

**Note**: GitHub&#x27;s REST API considers every pull request an issue, but not every issue is a pull request. For this
reason, &quot;Issues&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by
the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from &quot;Issues&quot; endpoints will be an _issue id_. To find out the pull
request id, use the &quot;[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)&quot; endpoint.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "milestone",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "assignee",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "creator",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "mentioned",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "labels",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "comments"])
          .optional()
          .default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/issues",
    alias: "issues/create",
    description: `Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a &#x60;410 Gone&#x60; status.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot;
and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_create_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: issue,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/:issue_number",
    alias: "issues/get",
    description: `The API returns a [&#x60;301 Moved Permanently&#x60; status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
[transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
returns a &#x60;404 Not Found&#x60; status. If the issue was deleted from a repository where the authenticated user has read
access, the API returns a &#x60;410 Gone&#x60; status. To receive webhook events for transferred and deleted issues, subscribe
to the [&#x60;issues&#x60;](https://docs.github.com/webhooks/event-payloads/#issues) webhook.

**Note**: GitHub&#x27;s REST API considers every pull request an issue, but not every issue is a pull request. For this
reason, &quot;Issues&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by
the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from &quot;Issues&quot; endpoints will be an _issue id_. To find out the pull
request id, use the &quot;[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)&quot; endpoint.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue,
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/issues/:issue_number",
    alias: "issues/update",
    description: `Issue owners and users with push access can edit an issue.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_update_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue,
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/issues/:issue_number/assignees",
    alias: "issues/add-assignees",
    description: `Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_add_assignees_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/issues/:issue_number/assignees",
    alias: "issues/remove-assignees",
    description: `Removes one or more assignees from an issue.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_add_assignees_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/:issue_number/assignees/:assignee",
    alias: "issues/check-user-can-be-assigned-to-issue",
    description: `Checks if a user has permission to be assigned to a specific issue.

If the &#x60;assignee&#x60; can be assigned to this issue, a &#x60;204&#x60; status code with no content is returned.

Otherwise a &#x60;404&#x60; status code is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "assignee",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Response if &#x60;assignee&#x60; can not be assigned to &#x60;issue_number&#x60;`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/:issue_number/comments",
    alias: "issues/list-comments",
    description: `You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.

Issue comments are ordered by ascending ID.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue_comment),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/issues/:issue_number/comments",
    alias: "issues/create-comment",
    description: `You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
Creating content too quickly using this endpoint may result in secondary rate limiting.
For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot;
and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue_comment,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/:issue_number/events",
    alias: "issues/list-events",
    description: `Lists all events for an issue.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue_event_for_issue),
    errors: [
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/:issue_number/labels",
    alias: "issues/list-labels-on-issue",
    description: `Lists all labels for an issue.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(label),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/issues/:issue_number/labels",
    alias: "issues/add-labels",
    description: `Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue. `,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_add_labels_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.array(label),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/issues/:issue_number/labels",
    alias: "issues/set-labels",
    description: `Removes any previous labels and sets the new labels for an issue.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_add_labels_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.array(label),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/issues/:issue_number/labels",
    alias: "issues/remove-all-labels",
    description: `Removes all labels from an issue.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/issues/:issue_number/labels/:name",
    alias: "issues/remove-label",
    description: `Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a &#x60;404 Not Found&#x60; status if the label does not exist.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(label),
    errors: [
      {
        status: 301,
        description: `Moved permanently`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/issues/:issue_number/lock",
    alias: "issues/lock",
    description: `Users with push access can lock an issue or pull request&#x27;s conversation.

Note that, if you choose not to pass any parameters, you&#x27;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see &quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_lock_Body.nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/issues/:issue_number/lock",
    alias: "issues/unlock",
    description: `Users with push access can unlock an issue&#x27;s conversation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/:issue_number/reactions",
    alias: "reactions/list-for-issue",
    description: `List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "content",
        type: "Query",
        schema: z
          .enum([
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(reaction),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/issues/:issue_number/reactions",
    alias: "reactions/create-for-issue",
    description: `Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: reactions_create_for_team_discussion_comment_in_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: reaction,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/issues/:issue_number/reactions/:reaction_id",
    alias: "reactions/delete-for-issue",
    description: `**Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id&#x60;.

Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "reaction_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/:issue_number/timeline",
    alias: "issues/list-events-for-timeline",
    description: `List all timeline events for an issue.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "issue_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(timeline_issue_events),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/comments",
    alias: "issues/list-comments-for-repo",
    description: `You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.

By default, issue comments are ordered by ascending ID.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue_comment),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/comments/:comment_id",
    alias: "issues/get-comment",
    description: `You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue_comment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/issues/comments/:comment_id",
    alias: "issues/update-comment",
    description: `You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue_comment,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/issues/comments/:comment_id",
    alias: "issues/delete-comment",
    description: `You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
    alias: "reactions/list-for-issue-comment",
    description: `List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "content",
        type: "Query",
        schema: z
          .enum([
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(reaction),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
    alias: "reactions/create-for-issue-comment",
    description: `Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: reactions_create_for_team_discussion_comment_in_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: reaction,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/issues/comments/:comment_id/reactions/:reaction_id",
    alias: "reactions/delete-for-issue-comment",
    description: `**Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id&#x60;.

Delete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "reaction_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/events",
    alias: "issues/list-events-for-repo",
    description: `Lists events for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue_event),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/issues/events/:event_id",
    alias: "issues/get-event",
    description: `Gets a single event by the event id.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "event_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: issue_event,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/keys",
    alias: "repos/list-deploy-keys",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(deploy_key),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/keys",
    alias: "repos/create-deploy-key",
    description: `You can create a read-only deploy key.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_deploy_key_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: deploy_key,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/keys/:key_id",
    alias: "repos/get-deploy-key",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: deploy_key,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/keys/:key_id",
    alias: "repos/delete-deploy-key",
    description: `Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/labels",
    alias: "issues/list-labels-for-repo",
    description: `Lists all labels for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(label),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/labels",
    alias: "issues/create-label",
    description: `Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_create_label_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: label,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/labels/:name",
    alias: "issues/get-label",
    description: `Gets a label using the given name.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: label,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/labels/:name",
    alias: "issues/update-label",
    description: `Updates a label using the given label name.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_update_label_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: label,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/labels/:name",
    alias: "issues/delete-label",
    description: `Deletes a label using the given label name.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/languages",
    alias: "repos/list-languages",
    description: `Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.record(z.number().int()),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/license",
    alias: "licenses/get-for-repo",
    description: `This method returns the contents of the repository&#x27;s license file, if one is detected.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw contents of the license.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub&#x27;s open-source [Markup library](https://github.com/github/markup).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: license_content,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/merge-upstream",
    alias: "repos/merge-upstream",
    description: `Sync a branch of a forked repository to keep it up-to-date with the upstream repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ branch: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: merged_upstream,
    errors: [
      {
        status: 409,
        description: `The branch could not be synced because of a merge conflict`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `The branch could not be synced for some other reason`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/merges",
    alias: "repos/merge",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_merge_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: commit,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Not Found when the base or head does not exist`,
        schema: z.void(),
      },
      {
        status: 409,
        description: `Conflict when there is a merge conflict`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/milestones",
    alias: "issues/list-milestones",
    description: `Lists milestones for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["due_on", "completeness"]).optional().default("due_on"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("asc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(milestone),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/milestones",
    alias: "issues/create-milestone",
    description: `Creates a milestone.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_create_milestone_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: milestone,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/milestones/:milestone_number",
    alias: "issues/get-milestone",
    description: `Gets a milestone using the given milestone number.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "milestone_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: milestone,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/milestones/:milestone_number",
    alias: "issues/update-milestone",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: issues_update_milestone_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "milestone_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: milestone,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/milestones/:milestone_number",
    alias: "issues/delete-milestone",
    description: `Deletes a milestone using the given milestone number.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "milestone_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/milestones/:milestone_number/labels",
    alias: "issues/list-labels-for-milestone",
    description: `Lists labels for issues in a milestone.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "milestone_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(label),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/notifications",
    alias: "activity/list-repo-notifications-for-authenticated-user",
    description: `Lists all notifications for the current user in the specified repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "all",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "participating",
        type: "Query",
        schema: z.boolean().optional(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(thread),
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/notifications",
    alias: "activity/mark-repo-notifications-as-read",
    description: `Marks all notifications in a repository as &quot;read&quot; for the current user. If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub will run an asynchronous process to mark notifications as &quot;read.&quot; To check whether any &quot;unread&quot; notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ last_read_at: z.string().datetime({ offset: true }) })
          .partial()
          .passthrough()
          .optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({ message: z.string(), url: z.string() })
      .partial()
      .passthrough(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pages",
    alias: "repos/get-pages",
    description: `Gets information about a GitHub Pages site.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: page,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pages",
    alias: "repos/create-pages-site",
    description: `Configures a GitHub Pages site. For more information, see &quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).&quot;

The authenticated user must be a repository administrator, maintainer, or have the &#x27;manage GitHub Pages settings&#x27; permission.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([z.unknown(), z.unknown()]).nullable(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: page,
    errors: [
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/pages",
    alias: "repos/update-information-about-pages-site",
    description: `Updates information for a GitHub Pages site. For more information, see &quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).

The authenticated user must be a repository administrator, maintainer, or have the &#x27;manage GitHub Pages settings&#x27; permission.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z.unknown(),
          z.unknown(),
          z.unknown(),
          z.unknown(),
          z.unknown(),
        ]),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/pages",
    alias: "repos/delete-pages-site",
    description: `Deletes a GitHub Pages site. For more information, see &quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).

The authenticated user must be a repository administrator, maintainer, or have the &#x27;manage GitHub Pages settings&#x27; permission.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pages/builds",
    alias: "repos/list-pages-builds",
    description: `Lists builts of a GitHub Pages site.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(page_build),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pages/builds",
    alias: "repos/request-pages-build",
    description: `You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.

Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: page_build_status,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pages/builds/:build_id",
    alias: "repos/get-pages-build",
    description: `Gets information about a GitHub Pages build.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "build_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: page_build,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pages/builds/latest",
    alias: "repos/get-latest-pages-build",
    description: `Gets information about the single most recent build of a GitHub Pages site.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: page_build,
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pages/deployments",
    alias: "repos/create-pages-deployment",
    description: `Create a GitHub Pages deployment for a repository.

The authenticated user must have write permission to the repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_pages_deployment_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: page_deployment,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pages/deployments/:pages_deployment_id",
    alias: "repos/get-pages-deployment",
    description: `Gets the current status of a GitHub Pages deployment.

The authenticated user must have read permission for the GitHub Pages site.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pages_deployment_id",
        type: "Path",
        schema: workflow_id,
      },
    ],
    response: pages_deployment_status,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pages/deployments/:pages_deployment_id/cancel",
    alias: "repos/cancel-pages-deployment",
    description: `Cancels a GitHub Pages deployment.

The authenticated user must have write permissions for the GitHub Pages site.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pages_deployment_id",
        type: "Path",
        schema: workflow_id,
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pages/health",
    alias: "repos/get-pages-health-check",
    description: `Gets a health check of the DNS settings for the &#x60;CNAME&#x60; record configured for a repository&#x27;s GitHub Pages.

The first request to this endpoint returns a &#x60;202 Accepted&#x60; status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a &#x60;200 OK&#x60; status with the health check results in the response.

The authenticated user must be a repository administrator, maintainer, or have the &#x27;manage GitHub Pages settings&#x27; permission to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: pages_health_check,
    errors: [
      {
        status: 400,
        description: `Custom domains are not available for GitHub Pages`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `There isn&#x27;t a CNAME for this page`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/private-vulnerability-reporting",
    alias: "repos/check-private-vulnerability-reporting",
    description: `Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see &quot;[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({ enabled: z.boolean() }).passthrough(),
    errors: [
      {
        status: 422,
        description: `Bad Request`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/private-vulnerability-reporting",
    alias: "repos/enable-private-vulnerability-reporting",
    description: `Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see &quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 422,
        description: `Bad Request`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/private-vulnerability-reporting",
    alias: "repos/disable-private-vulnerability-reporting",
    description: `Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see &quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 422,
        description: `Bad Request`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/projects",
    alias: "projects/list-for-repo",
    description: `Lists the projects in a repository. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(project),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/projects",
    alias: "projects/create-for-repo",
    description: `Creates a repository project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_create_for_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: project,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 410,
        description: `Gone`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/properties/values",
    alias: "repos/get-custom-properties-values",
    description: `Gets all custom property values that are set for a repository.
Users with read access to the repository can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(custom_property_value),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/properties/values",
    alias: "repos/create-or-update-custom-properties-values",
    description: `Create new or update existing custom property values for a repository.
Using a value of &#x60;null&#x60; for a custom property will remove or &#x27;unset&#x27; the property value from the repository.

Repository admins and other users with the repository-level &quot;edit custom property values&quot; fine-grained permission can use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_or_update_custom_properties_values_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls",
    alias: "pulls/list",
    description: `Lists pull requests in a specified repository.

Draft pull requests are available in public repositories with GitHub
Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
plans, and in public and private repositories with GitHub Team and GitHub Enterprise
Cloud. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products)
in the GitHub Help documentation.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.diff&#x60;**: For more information, see &quot;[git-diff](https://git-scm.com/docs/git-diff)&quot; in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
- **&#x60;application/vnd.github.patch&#x60;**: For more information, see &quot;[git-format-patch](https://git-scm.com/docs/git-format-patch)&quot; in the Git documentation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "head",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "base",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "popularity", "long-running"])
          .optional()
          .default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(pull_request_simple),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls",
    alias: "pulls/create",
    description: `Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.diff&#x60;**: For more information, see &quot;[git-diff](https://git-scm.com/docs/git-diff)&quot; in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_create_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: pull_request,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number",
    alias: "pulls/get",
    description: `Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists details of a pull request by providing its number.

When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the &#x60;mergeable&#x60; key. For more information, see &quot;[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)&quot;.

The value of the &#x60;mergeable&#x60; attribute can be &#x60;true&#x60;, &#x60;false&#x60;, or &#x60;null&#x60;. If the value is &#x60;null&#x60;, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-&#x60;null&#x60; value for the &#x60;mergeable&#x60; attribute in the response. If &#x60;mergeable&#x60; is &#x60;true&#x60;, then &#x60;merge_commit_sha&#x60; will be the SHA of the _test_ merge commit.

The value of the &#x60;merge_commit_sha&#x60; attribute changes depending on the state of the pull request. Before merging a pull request, the &#x60;merge_commit_sha&#x60; attribute holds the SHA of the _test_ merge commit. After merging a pull request, the &#x60;merge_commit_sha&#x60; attribute changes depending on how you merged the pull request:

*   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), &#x60;merge_commit_sha&#x60; represents the SHA of the merge commit.
*   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), &#x60;merge_commit_sha&#x60; represents the SHA of the squashed commit on the base branch.
*   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), &#x60;merge_commit_sha&#x60; represents the commit that the base branch was updated to.

Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.diff&#x60;**: For more information, see &quot;[git-diff](https://git-scm.com/docs/git-diff)&quot; in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/pulls/:pull_number",
    alias: "pulls/update",
    description: `Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#x27;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.diff&#x60;**: For more information, see &quot;[git-diff](https://git-scm.com/docs/git-diff)&quot; in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_update_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls/:pull_number/codespaces",
    alias: "codespaces/create-with-pr-for-authenticated-user",
    description: `Creates a codespace owned by the authenticated user for the specified pull request.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          codespaces_create_with_pr_for_authenticated_user_Body.nullable(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: codespace,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/comments",
    alias: "pulls/list-review-comments",
    description: `Lists all review comments for a specified pull request. By default, review comments
are in ascending order by ID.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(pull_request_review_comment),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls/:pull_number/comments",
    alias: "pulls/create-review-comment",
    description: `Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline, see &quot;[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment).&quot;

If your comment applies to more than one line in the pull request diff, you should use the parameters &#x60;line&#x60;, &#x60;side&#x60;, and optionally &#x60;start_line&#x60; and &#x60;start_side&#x60; in your request.

The &#x60;position&#x60; parameter is deprecated. If you use &#x60;position&#x60;, the &#x60;line&#x60;, &#x60;side&#x60;, &#x60;start_line&#x60;, and &#x60;start_side&#x60; parameters are not required.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot;
and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_create_review_comment_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review_comment,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies",
    alias: "pulls/create-reply-for-review-comment",
    description: `Creates a reply to a review comment for a pull request. For the &#x60;comment_id&#x60;, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot;
and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review_comment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/commits",
    alias: "pulls/list-commits",
    description: `Lists a maximum of 250 commits for a pull request. To receive a complete
commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
endpoint.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.diff&#x60;**: For more information, see &quot;[git-diff](https://git-scm.com/docs/git-diff)&quot; in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(commit),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/files",
    alias: "pulls/list-files",
    description: `Lists the files in a specified pull request.

**Note:** Responses include a maximum of 3000 files. The paginated response
returns 30 files per page by default.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.diff&#x60;**: For more information, see &quot;[git-diff](https://git-scm.com/docs/git-diff)&quot; in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(diff_entry),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/merge",
    alias: "pulls/check-if-merged",
    description: `Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Not Found if pull request has not been merged`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/pulls/:pull_number/merge",
    alias: "pulls/merge",
    description: `Merges a pull request into the base branch.
This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_merge_Body.nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_merge_result,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 405,
        description: `Method Not Allowed if merge cannot be performed`,
        schema: z
          .object({ message: z.string(), documentation_url: z.string() })
          .partial()
          .passthrough(),
      },
      {
        status: 409,
        description: `Conflict if sha was provided and pull request head did not match`,
        schema: z
          .object({ message: z.string(), documentation_url: z.string() })
          .partial()
          .passthrough(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    alias: "pulls/list-requested-reviewers",
    description: `Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review_request,
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    alias: "pulls/request-reviewers",
    description: `Requests reviews for a pull request from a given set of users and/or teams.
This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([z.unknown(), z.unknown()]).optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_simple,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Unprocessable Entity if user is not a collaborator`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/pulls/:pull_number/requested_reviewers",
    alias: "pulls/remove-requested-reviewers",
    description: `Removes review requests from a pull request for a given set of users and/or teams.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_remove_requested_reviewers_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_simple,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews",
    alias: "pulls/list-reviews",
    description: `Lists all reviews for a specified pull request. The list of reviews returns in chronological order.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(pull_request_review),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews",
    alias: "pulls/create-review",
    description: `Creates a review on a specified pull request.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;

Pull request reviews created in the &#x60;PENDING&#x60; state are not submitted and therefore do not include the &#x60;submitted_at&#x60; property in the response. To create a pending review for a pull request, leave the &#x60;event&#x60; parameter blank. For more information about submitting a &#x60;PENDING&#x60; review, see &quot;[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request).&quot;

**Note:** To comment on a specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff, add the &#x60;application/vnd.github.v3.diff&#x60; media type to the &#x60;Accept&#x60; header of a call to the [Get a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.

The &#x60;position&#x60; value equals the number of lines down from the first &quot;@@&quot; hunk header in the file you want to add a comment. The line just below the &quot;@@&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_create_review_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    alias: "pulls/get-review",
    description: `Retrieves a pull request review by its ID.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "review_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    alias: "pulls/update-review",
    description: `Updates the contents of a specified review summary comment.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "review_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id",
    alias: "pulls/delete-pending-review",
    description: `Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "review_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments",
    alias: "pulls/list-comments-for-review",
    description: `Lists comments for a specific pull request review.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "review_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(review_comment),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals",
    alias: "pulls/dismiss-review",
    description: `Dismisses a specified review on a pull request.

**Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection),
you must be a repository administrator or be included in the list of people or teams
who can dismiss pull request reviews.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_dismiss_review_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "review_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events",
    alias: "pulls/submit-review",
    description: `Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see &quot;[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request).&quot;

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: pulls_submit_review_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "review_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/pulls/:pull_number/update-branch",
    alias: "pulls/update-branch",
    description: `Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z
          .object({ expected_head_sha: z.string() })
          .partial()
          .passthrough()
          .nullish(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "pull_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z
      .object({ message: z.string(), url: z.string() })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/comments",
    alias: "pulls/list-review-comments-for-repo",
    description: `Lists review comments for all pull requests in a repository. By default,
review comments are in ascending order by ID.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated", "created_at"]).optional(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(pull_request_review_comment),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/comments/:comment_id",
    alias: "pulls/get-review-comment",
    description: `Provides details for a specified review comment.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review_comment,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/pulls/comments/:comment_id",
    alias: "pulls/update-review-comment",
    description: `Edits the content of a specified review comment.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ body: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: pull_request_review_comment,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/pulls/comments/:comment_id",
    alias: "pulls/delete-review-comment",
    description: `Deletes a review comment.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
    alias: "reactions/list-for-pull-request-review-comment",
    description: `List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "content",
        type: "Query",
        schema: z
          .enum([
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes",
          ])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(reaction),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
    alias: "reactions/create-for-pull-request-review-comment",
    description: `Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: reactions_create_for_team_discussion_comment_in_org_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: reaction,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/pulls/comments/:comment_id/reactions/:reaction_id",
    alias: "reactions/delete-for-pull-request-comment",
    description: `**Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.&#x60;

Delete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "comment_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "reaction_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/readme",
    alias: "repos/get-readme",
    description: `Gets the preferred README for a repository.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw file contents. This is the default if you do not specify a media type.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub&#x27;s open-source [Markup library](https://github.com/github/markup).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: content_file,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/readme/:dir",
    alias: "repos/get-readme-in-directory",
    description: `Gets the README from a repository directory.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw file contents. This is the default if you do not specify a media type.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub&#x27;s open-source [Markup library](https://github.com/github/markup).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "dir",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: content_file,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/releases",
    alias: "repos/list-releases",
    description: `This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).

Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(release),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/releases",
    alias: "repos/create-release",
    description: `Users with push access to the repository can create a release.

This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see &quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)&quot; and &quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_release_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: release,
    errors: [
      {
        status: 404,
        description: `Not Found if the discussion category name is invalid`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/releases/:release_id",
    alias: "repos/get-release",
    description: `Gets a public release with the specified release ID.

**Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint
for uploading release assets. This key is a hypermedia resource. For more information, see
&quot;[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: release,
    errors: [
      {
        status: 401,
        description: `Unauthorized`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/releases/:release_id",
    alias: "repos/update-release",
    description: `Users with push access to the repository can edit a release.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_release_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: release,
    errors: [
      {
        status: 404,
        description: `Not Found if the discussion category name is invalid`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/releases/:release_id",
    alias: "repos/delete-release",
    description: `Users with push access to the repository can delete a release.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/releases/:release_id/assets",
    alias: "repos/list-release-assets",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(release_asset),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/releases/:release_id/assets",
    alias: "repos/upload-release-asset",
    description: `This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the &#x60;upload_url&#x60; returned in
the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.

You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.

Most libraries will set the required &#x60;Content-Length&#x60; header automatically. Use the required &#x60;Content-Type&#x60; header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: 

&#x60;application/zip&#x60;

GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
you&#x27;ll still need to pass your authentication to be able to upload an asset.

When an upstream failure occurs, you will receive a &#x60;502 Bad Gateway&#x60; status. This may leave an empty asset with a state of &#x60;starter&#x60;. It can be safely deleted.

**Notes:**
*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The &quot;[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)&quot;
endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api).
*   To find the &#x60;release_id&#x60; query the [&#x60;GET /repos/{owner}/{repo}/releases/latest&#x60; endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). 
*   If you upload an asset with the same filename as another uploaded asset, you&#x27;ll receive an error and must delete the old file before you can re-upload the new asset.`,
    requestFormat: "binary",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.instanceof(File).optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "name",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "label",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: release_asset,
    errors: [
      {
        status: 422,
        description: `Response if you upload an asset with the same filename as another uploaded asset`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/releases/:release_id/reactions",
    alias: "reactions/list-for-release",
    description: `List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "content",
        type: "Query",
        schema: z
          .enum(["+1", "laugh", "heart", "hooray", "rocket", "eyes"])
          .optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(reaction),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/releases/:release_id/reactions",
    alias: "reactions/create-for-release",
    description: `Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a &#x60;Status: 200 OK&#x60; means that you already added the reaction type to this release.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: reactions_create_for_release_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: reaction,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/releases/:release_id/reactions/:reaction_id",
    alias: "reactions/delete-for-release",
    description: `**Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id&#x60;.

Delete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "release_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "reaction_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/releases/assets/:asset_id",
    alias: "repos/get-release-asset",
    description: `To download the asset&#x27;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "asset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: release_asset,
    errors: [
      {
        status: 302,
        description: `Found`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/releases/assets/:asset_id",
    alias: "repos/update-release-asset",
    description: `Users with push access to the repository can edit a release asset.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_update_release_asset_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "asset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: release_asset,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/releases/assets/:asset_id",
    alias: "repos/delete-release-asset",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "asset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/releases/generate-notes",
    alias: "repos/generate-release-notes",
    description: `Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_generate_release_notes_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: release_notes_content,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/releases/latest",
    alias: "repos/get-latest-release",
    description: `View the latest published full release for the repository.

The latest release is the most recent non-prerelease, non-draft release, sorted by the &#x60;created_at&#x60; attribute. The &#x60;created_at&#x60; attribute is the date of the commit used for the release, and not the date when the release was drafted or published.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: release,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/releases/tags/:tag",
    alias: "repos/get-release-by-tag",
    description: `Get a published release with the specified tag.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "tag",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: release,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/rules/branches/:branch",
    alias: "repos/get-branch-rules",
    description: `Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply
to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level
at which they are configured (e.g. repository or organization). Rules in rulesets with &quot;evaluate&quot; or &quot;disabled&quot;
enforcement statuses are not returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "branch",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(repository_rule_detailed),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/rulesets",
    alias: "repos/get-repo-rulesets",
    description: `Get all the rulesets for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "includes_parents",
        type: "Query",
        schema: z.boolean().optional().default(true),
      },
    ],
    response: z.array(repository_ruleset),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/rulesets",
    alias: "repos/create-repo-ruleset",
    description: `Create a ruleset for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: `Request body`,
        type: "Body",
        schema: repos_create_repo_ruleset_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_ruleset,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/rulesets/:ruleset_id",
    alias: "repos/get-repo-ruleset",
    description: `Get a ruleset for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ruleset_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "includes_parents",
        type: "Query",
        schema: z.boolean().optional().default(true),
      },
    ],
    response: repository_ruleset,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/rulesets/:ruleset_id",
    alias: "repos/update-repo-ruleset",
    description: `Update a ruleset for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        description: `Request body`,
        type: "Body",
        schema: repos_update_repo_ruleset_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ruleset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: repository_ruleset,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/rulesets/:ruleset_id",
    alias: "repos/delete-repo-ruleset",
    description: `Delete a ruleset for a repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ruleset_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/rulesets/rule-suites",
    alias: "repos/get-repo-rule-suites",
    description: `Lists suites of rule evaluations at the repository level.
For more information, see &quot;[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "time_period",
        type: "Query",
        schema: z
          .enum(["hour", "day", "week", "month"])
          .optional()
          .default("day"),
      },
      {
        name: "actor_name",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "rule_suite_result",
        type: "Query",
        schema: z
          .enum(["pass", "fail", "bypass", "all"])
          .optional()
          .default("all"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: rule_suites,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/rulesets/rule-suites/:rule_suite_id",
    alias: "repos/get-repo-rule-suite",
    description: `Gets information about a suite of rule evaluations from within a repository.
For more information, see &quot;[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "rule_suite_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: rule_suite,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/secret-scanning/alerts",
    alias: "secret-scanning/list-alerts-for-repo",
    description: `Lists secret scanning alerts for an eligible repository, from newest to oldest.

The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "resolved"]).optional(),
      },
      {
        name: "secret_type",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "resolution",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "validity",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.array(secret_scanning_alert),
    errors: [
      {
        status: 404,
        description: `Repository is public or secret scanning is disabled for the repository`,
        schema: z.void(),
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    alias: "secret-scanning/get-alert",
    description: `Gets a single secret scanning alert detected in an eligible repository.

The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: secret_scanning_alert,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Repository is public, or secret scanning is disabled for the repository, or the resource is not found`,
        schema: z.void(),
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/secret-scanning/alerts/:alert_number",
    alias: "secret-scanning/update-alert",
    description: `Updates the status of a secret scanning alert in an eligible repository.

The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: secret_scanning_update_alert_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: secret_scanning_alert,
    errors: [
      {
        status: 400,
        description: `Bad request, resolution comment is invalid or the resolution was not changed.`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Repository is public, or secret scanning is disabled for the repository, or the resource is not found`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `State does not match the resolution or resolution comment`,
        schema: z.void(),
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/secret-scanning/alerts/:alert_number/locations",
    alias: "secret-scanning/list-locations-for-alert",
    description: `Lists all locations for a given secret scanning alert for an eligible repository.

The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "alert_number",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(secret_scanning_location),
    errors: [
      {
        status: 404,
        description: `Repository is public, or secret scanning is disabled for the repository, or the resource is not found`,
        schema: z.void(),
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/security-advisories",
    alias: "security-advisories/list-repository-advisories",
    description: `Lists security advisories in a repository.

The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:read&#x60; scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "published"])
          .optional()
          .default("created"),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "after",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().gte(1).lte(100).optional().default(30),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["triage", "draft", "published", "closed"]).optional(),
      },
    ],
    response: z.array(repository_advisory),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/security-advisories",
    alias: "security-advisories/create-repository-advisory",
    description: `Creates a new repository security advisory.

In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repository_advisory_create,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_advisory,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/security-advisories/:ghsa_id",
    alias: "security-advisories/get-repository-advisory",
    description: `Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.

Anyone can access any published security advisory on a public repository.

The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a
collaborator on the security advisory.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:read&#x60; scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ghsa_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_advisory,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/repos/:owner/:repo/security-advisories/:ghsa_id",
    alias: "security-advisories/update-repository-advisory",
    description: `Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.

In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository,
or a collaborator on the repository security advisory.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repository_advisory_update,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ghsa_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_advisory,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/security-advisories/:ghsa_id/cve",
    alias: "security-advisories/create-repository-advisory-cve-request",
    description: `If you want a CVE identification number for the security vulnerability in your project, and don&#x27;t already have one, you can request a CVE identification number from GitHub. For more information see &quot;[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional).&quot;

You may request a CVE for public repositories, but cannot do so for private repositories.

In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ghsa_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/security-advisories/:ghsa_id/forks",
    alias: "security-advisories/create-fork",
    description: `Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.

**Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ghsa_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: full_repository,
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/security-advisories/reports",
    alias: "security-advisories/create-private-vulnerability-report",
    description: `Report a security vulnerability to the maintainers of the repository.
See &quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)&quot; for more information about private vulnerability reporting.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: private_vulnerability_report_create,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_advisory,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/stargazers",
    alias: "activity/list-stargazers-for-repo",
    description: `Lists the people that have starred the repository.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.star+json&#x60;**: Includes a timestamp of when the star was created.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.union([z.array(simple_user), z.array(stargazer)]),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/stats/code_frequency",
    alias: "repos/get-code-frequency-stats",
    description: `
Returns a weekly aggregate of the number of additions and deletions pushed to a repository.

**Note:** This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains
10,000 or more commits, a 422 status code will be returned.
`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(code_frequency_stat),
    errors: [
      {
        status: 422,
        description: `Repository contains more than 10,000 commits`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/stats/commit_activity",
    alias: "repos/get-commit-activity-stats",
    description: `Returns the last year of commit activity grouped by week. The &#x60;days&#x60; array is a group of commits per day, starting on &#x60;Sunday&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(commit_activity),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/stats/contributors",
    alias: "repos/get-contributors-stats",
    description: `
Returns the &#x60;total&#x60; number of commits authored by the contributor. In addition, the response includes a Weekly Hash (&#x60;weeks&#x60; array) with the following information:

*   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time).
*   &#x60;a&#x60; - Number of additions
*   &#x60;d&#x60; - Number of deletions
*   &#x60;c&#x60; - Number of commits

**Note:** This endpoint will return &#x60;0&#x60; values for all addition and deletion counts in repositories with 10,000 or more commits.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(contributor_activity),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/stats/participation",
    alias: "repos/get-participation-stats",
    description: `Returns the total commit counts for the &#x60;owner&#x60; and total commit counts in &#x60;all&#x60;. &#x60;all&#x60; is everyone combined, including the &#x60;owner&#x60; in the last 52 weeks. If you&#x27;d like to get the commit counts for non-owners, you can subtract &#x60;owner&#x60; from &#x60;all&#x60;.

The array order is oldest week (index 0) to most recent week.

The most recent week is seven days ago at UTC midnight to today at UTC midnight.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: participation_stats,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/stats/punch_card",
    alias: "repos/get-punch-card-stats",
    description: `Each array contains the day number, hour number, and number of commits:

*   &#x60;0-6&#x60;: Sunday - Saturday
*   &#x60;0-23&#x60;: Hour of day
*   Number of commits

For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(code_frequency_stat),
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/statuses/:sha",
    alias: "repos/create-commit-status",
    description: `Users with push access in a repository can create commit statuses for a given SHA.

Note: there is a limit of 1000 statuses per &#x60;sha&#x60; and &#x60;context&#x60; within a repository. Attempts to create more than 1000 statuses will result in a validation error.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_commit_status_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sha",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: status,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/subscribers",
    alias: "activity/list-watchers-for-repo",
    description: `Lists the people watching the specified repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/subscription",
    alias: "activity/get-repo-subscription",
    description: `Gets information about whether the authenticated user is subscribed to the repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_subscription,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Not Found if you don&#x27;t subscribe to the repository`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/subscription",
    alias: "activity/set-repo-subscription",
    description: `If you would like to watch a repository, set &#x60;subscribed&#x60; to &#x60;true&#x60;. If you would like to ignore notifications made within a repository, set &#x60;ignored&#x60; to &#x60;true&#x60;. If you would like to stop watching a repository, [delete the repository&#x27;s subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: activity_set_repo_subscription_Body.optional(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: repository_subscription,
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/subscription",
    alias: "activity/delete-repo-subscription",
    description: `This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository&#x27;s subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/tags",
    alias: "repos/list-tags",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(tag),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/tags/protection",
    alias: "repos/list-tag-protection",
    description: `This returns the tag protection states of a repository.

This information is only available to repository administrators.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(tag_protection),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/tags/protection",
    alias: "repos/create-tag-protection",
    description: `This creates a tag protection state for a repository.
This endpoint is only available to repository administrators.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ pattern: z.string() }).passthrough(),
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: tag_protection,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/tags/protection/:tag_protection_id",
    alias: "repos/delete-tag-protection",
    description: `This deletes a tag protection state for a repository.
This endpoint is only available to repository administrators.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "tag_protection_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/tarball/:ref",
    alias: "repos/download-tarball-archive",
    description: `Gets a redirect URL to download a tar archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually
&#x60;main&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request.
**Note**: For private repositories, these links are temporary and expire after five minutes.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/teams",
    alias: "repos/list-teams",
    description: `Lists the teams that have access to the specified repository and that are also visible to the authenticated user.

For a public repository, a team is listed only if that team added the public repository explicitly.

OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to use this endpoint with a public repository, and &#x60;repo&#x60; scope to use this endpoint with a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/topics",
    alias: "repos/get-all-topics",
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: topic,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/topics",
    alias: "repos/replace-all-topics",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_replace_all_topics_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: topic,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/traffic/clones",
    alias: "repos/get-clones",
    description: `Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per",
        type: "Query",
        schema: z.enum(["day", "week"]).optional().default("day"),
      },
    ],
    response: clone_traffic,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/traffic/popular/paths",
    alias: "repos/get-top-paths",
    description: `Get the top 10 popular contents over the last 14 days.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(content_traffic),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/traffic/popular/referrers",
    alias: "repos/get-top-referrers",
    description: `Get the top 10 referrers over the last 14 days.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(referrer_traffic),
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/traffic/views",
    alias: "repos/get-views",
    description: `Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per",
        type: "Query",
        schema: z.enum(["day", "week"]).optional().default("day"),
      },
    ],
    response: view_traffic,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:owner/:repo/transfer",
    alias: "repos/transfer",
    description: `A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original &#x60;owner&#x60;, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_transfer_Body,
      },
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: minimal_repository,
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/vulnerability-alerts",
    alias: "repos/check-vulnerability-alerts",
    description: `Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see &quot;[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `Not Found if repository is not enabled with vulnerability alerts`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "put",
    path: "/repos/:owner/:repo/vulnerability-alerts",
    alias: "repos/enable-vulnerability-alerts",
    description: `Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see &quot;[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "delete",
    path: "/repos/:owner/:repo/vulnerability-alerts",
    alias: "repos/disable-vulnerability-alerts",
    description: `Disables dependency alerts and the dependency graph for a repository.
The authenticated user must have admin access to the repository. For more information,
see &quot;[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/repos/:owner/:repo/zipball/:ref",
    alias: "repos/download-zipball-archive",
    description: `Gets a redirect URL to download a zip archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually
&#x60;main&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request.

**Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "ref",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "post",
    path: "/repos/:template_owner/:template_repo/generate",
    alias: "repos/create-using-template",
    description: `Creates a new repository using a repository template. Use the &#x60;template_owner&#x60; and &#x60;template_repo&#x60; route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository&#x27;s information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the &#x60;is_template&#x60; key is &#x60;true&#x60;.

OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to create a public repository, and &#x60;repo&#x60; scope to create a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_using_template_Body,
      },
      {
        name: "template_owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "template_repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: full_repository,
  },
  {
    method: "get",
    path: "/repositories",
    alias: "repos/list-public",
    description: `Lists all public repositories in the order that they were created.

Note:
- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
- Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.`,
    requestFormat: "json",
    parameters: [
      {
        name: "since",
        type: "Query",
        schema: z.number().int().optional(),
      },
    ],
    response: z.array(minimal_repository),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/search/code",
    alias: "search/code",
    description: `Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).

When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the &#x60;text-match&#x60; media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).

For example, if you want to find the definition of the &#x60;addClass&#x60; function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:

&#x60;q&#x3D;addClass+in:file+language:js+repo:jquery/jquery&#x60;

This query searches for the keyword &#x60;addClass&#x60; within a file&#x27;s contents. The query limits the search to files where the language is JavaScript in the &#x60;jquery/jquery&#x60; repository.

Considerations for code search:

Due to the complexity of searching code, there are a few restrictions on how searches are performed:

*   Only the _default branch_ is considered. In most cases, this will be the &#x60;master&#x60; branch.
*   Only files smaller than 384 KB are searchable.
*   You must always include at least one search term when searching source code. For example, searching for [&#x60;language:go&#x60;](https://github.com/search?utf8&#x3D;%E2%9C%93&amp;q&#x3D;language%3Ago&amp;type&#x3D;Code) is not valid, while [&#x60;amazing
language:go&#x60;](https://github.com/search?utf8&#x3D;%E2%9C%93&amp;q&#x3D;amazing+language%3Ago&amp;type&#x3D;Code) is.

This endpoint requires you to authenticate and limits you to 10 requests per minute.`,
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.literal("indexed").optional(),
      },
      {
        name: "order",
        type: "Query",
        schema: z.enum(["desc", "asc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        incomplete_results: z.boolean(),
        items: z.array(code_search_result_item),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/search/commits",
    alias: "search/commits",
    description: `Find commits via various criteria on the default branch (usually &#x60;main&#x60;). This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).

When searching for commits, you can get text match metadata for the **message** field when you provide the &#x60;text-match&#x60; media type. For more details about how to receive highlighted search results, see [Text match
metadata](https://docs.github.com/rest/search/search#text-match-metadata).

For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:

&#x60;q&#x3D;repo:octocat/Spoon-Knife+css&#x60;`,
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["author-date", "committer-date"]).optional(),
      },
      {
        name: "order",
        type: "Query",
        schema: z.enum(["desc", "asc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        incomplete_results: z.boolean(),
        items: z.array(commit_search_result_item),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/search/issues",
    alias: "search/issues-and-pull-requests",
    description: `Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).

When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the &#x60;text-match&#x60; media type. For more details about how to receive highlighted
search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).

For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.

&#x60;q&#x3D;windows+label:bug+language:python+state:open&amp;sort&#x3D;created&amp;order&#x3D;asc&#x60;

This query searches for the keyword &#x60;windows&#x60;, within any open issue that is labeled as &#x60;bug&#x60;. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.

**Note:** For requests made by GitHub Apps with a user access token, you can&#x27;t retrieve a combination of issues and pull requests in a single query. Requests that don&#x27;t include the &#x60;is:issue&#x60; or &#x60;is:pull-request&#x60; qualifier will receive an HTTP &#x60;422 Unprocessable Entity&#x60; response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the &#x60;is&#x60; qualifier, see &quot;[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum([
            "comments",
            "reactions",
            "reactions-+1",
            "reactions--1",
            "reactions-smile",
            "reactions-thinking_face",
            "reactions-heart",
            "reactions-tada",
            "interactions",
            "created",
            "updated",
          ])
          .optional(),
      },
      {
        name: "order",
        type: "Query",
        schema: z.enum(["desc", "asc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        incomplete_results: z.boolean(),
        items: z.array(issue_search_result_item),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/search/labels",
    alias: "search/labels",
    description: `Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).

When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the &#x60;text-match&#x60; media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).

For example, if you want to find labels in the &#x60;linguist&#x60; repository that match &#x60;bug&#x60;, &#x60;defect&#x60;, or &#x60;enhancement&#x60;. Your query might look like this:

&#x60;q&#x3D;bug+defect+enhancement&amp;repository_id&#x3D;64778136&#x60;

The labels that best match the query appear first in the search results.`,
    requestFormat: "json",
    parameters: [
      {
        name: "repository_id",
        type: "Query",
        schema: z.number().int(),
      },
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional(),
      },
      {
        name: "order",
        type: "Query",
        schema: z.enum(["desc", "asc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        incomplete_results: z.boolean(),
        items: z.array(label_search_result_item),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/search/repositories",
    alias: "search/repos",
    description: `Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).

When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the &#x60;text-match&#x60; media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).

For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:

&#x60;q&#x3D;tetris+language:assembly&amp;sort&#x3D;stars&amp;order&#x3D;desc&#x60;

This query searches for repositories with the word &#x60;tetris&#x60; in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.`,
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["stars", "forks", "help-wanted-issues", "updated"])
          .optional(),
      },
      {
        name: "order",
        type: "Query",
        schema: z.enum(["desc", "asc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        incomplete_results: z.boolean(),
        items: z.array(repo_search_result_item),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/search/topics",
    alias: "search/topics",
    description: `Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See &quot;[Searching topics](https://docs.github.com/articles/searching-topics/)&quot; for a detailed list of qualifiers.

When searching for topics, you can get text match metadata for the topic&#x27;s **short\_description**, **description**, **name**, or **display\_name** field when you pass the &#x60;text-match&#x60; media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).

For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:

&#x60;q&#x3D;ruby+is:featured&#x60;

This query searches for topics with the keyword &#x60;ruby&#x60; and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.`,
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        incomplete_results: z.boolean(),
        items: z.array(topic_search_result_item),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/search/users",
    alias: "search/users",
    description: `Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).

When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the &#x60;text-match&#x60; media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).

For example, if you&#x27;re looking for a list of popular users, you might try this query:

&#x60;q&#x3D;tom+repos:%3E42+followers:%3E1000&#x60;

This query searches for users with the name &#x60;tom&#x60;. The results are restricted to users with more than 42 repositories and over 1,000 followers.

This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see &quot;[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["followers", "repositories", "joined"]).optional(),
      },
      {
        name: "order",
        type: "Query",
        schema: z.enum(["desc", "asc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        incomplete_results: z.boolean(),
        items: z.array(user_search_result_item),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/user",
    alias: "users/get-authenticated",
    description: `OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope in order for the response to include private profile information.`,
    requestFormat: "json",
    response: z.union([private_user, public_user]),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/user",
    alias: "users/update-authenticated",
    description: `**Note:** If your email is set to private and you send an &#x60;email&#x60; parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_update_authenticated_Body.optional(),
      },
    ],
    response: private_user,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/blocks",
    alias: "users/list-blocked-by-authenticated-user",
    description: `List the users you&#x27;ve blocked on your personal account.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/blocks/:username",
    alias: "users/check-blocked",
    description: `Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `If the user is not blocked`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/user/blocks/:username",
    alias: "users/block",
    description: `Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/blocks/:username",
    alias: "users/unblock",
    description: `Unblocks the given user and returns a 204.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/codespaces",
    alias: "codespaces/list-for-authenticated-user",
    description: `Lists the authenticated user&#x27;s codespaces.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "repository_id",
        type: "Query",
        schema: z.number().int().optional(),
      },
    ],
    response: z
      .object({ total_count: z.number().int(), codespaces: z.array(codespace) })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/codespaces",
    alias: "codespaces/create-for-authenticated-user",
    description: `Creates a new codespace, owned by the authenticated user.

This endpoint requires either a &#x60;repository_id&#x60; OR a &#x60;pull_request&#x60; but not both.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: codespaces_create_for_authenticated_user_Body,
      },
    ],
    response: codespace,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 503,
        description: `Service unavailable`,
        schema: z
          .object({
            code: z.string(),
            message: z.string(),
            documentation_url: z.string(),
          })
          .partial()
          .passthrough(),
      },
    ],
  },
  {
    method: "get",
    path: "/user/codespaces/:codespace_name",
    alias: "codespaces/get-for-authenticated-user",
    description: `Gets information about a user&#x27;s codespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/user/codespaces/:codespace_name",
    alias: "codespaces/update-for-authenticated-user",
    description: `Updates a codespace owned by the authenticated user. Currently only the codespace&#x27;s machine type and recent folders can be modified using this endpoint.

If you specify a new machine type it will be applied the next time your codespace is started.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: codespaces_update_for_authenticated_user_Body.optional(),
      },
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/codespaces/:codespace_name",
    alias: "codespaces/delete-for-authenticated-user",
    description: `Deletes a user&#x27;s codespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial().passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/codespaces/:codespace_name/exports",
    alias: "codespaces/export-for-authenticated-user",
    description: `Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.

If changes cannot be pushed to the codespace&#x27;s repository, they will be pushed to a new or previously-existing fork instead.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace_export_details,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/codespaces/:codespace_name/exports/:export_id",
    alias: "codespaces/get-export-details-for-authenticated-user",
    description: `Gets information about an export of a codespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "export_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace_export_details,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/codespaces/:codespace_name/machines",
    alias: "codespaces/codespace-machines-for-authenticated-user",
    description: `List the machine types a codespace can transition to use.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        machines: z.array(codespace_machine),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/codespaces/:codespace_name/publish",
    alias: "codespaces/publish-for-authenticated-user",
    description: `Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.

The codespace&#x27;s token is granted write permissions to the repository, allowing the user to push their changes.

This will fail for a codespace that is already published, meaning it has an associated repository.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: codespaces_publish_for_authenticated_user_Body,
      },
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace_with_full_repository,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/codespaces/:codespace_name/start",
    alias: "codespaces/start-for-authenticated-user",
    description: `Starts a user&#x27;s codespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 402,
        description: `Payment required`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/codespaces/:codespace_name/stop",
    alias: "codespaces/stop-for-authenticated-user",
    description: `Stops a user&#x27;s codespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "codespace_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespace,
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/codespaces/secrets",
    alias: "codespaces/list-secrets-for-authenticated-user",
    description: `Lists all development environment secrets available for a user&#x27;s codespaces without revealing their
encrypted values.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        secrets: z.array(codespaces_secret),
      })
      .passthrough(),
  },
  {
    method: "get",
    path: "/user/codespaces/secrets/:secret_name",
    alias: "codespaces/get-secret-for-authenticated-user",
    description: `Gets a development environment secret available to a user&#x27;s codespaces without revealing its encrypted value.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: codespaces_secret,
  },
  {
    method: "put",
    path: "/user/codespaces/secrets/:secret_name",
    alias: "codespaces/create-or-update-secret-for-authenticated-user",
    description: `Creates or updates a development environment secret for a user&#x27;s codespace with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see &quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).&quot;

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: codespaces_create_or_update_secret_for_authenticated_user_Body,
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.object({}).partial(),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/codespaces/secrets/:secret_name",
    alias: "codespaces/delete-secret-for-authenticated-user",
    description: `Deletes a development environment secret from a user&#x27;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
  },
  {
    method: "get",
    path: "/user/codespaces/secrets/:secret_name/repositories",
    alias: "codespaces/list-repositories-for-secret-for-authenticated-user",
    description: `List the repositories that have been granted the ability to use a user&#x27;s development environment secret.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repositories: z.array(minimal_repository),
      })
      .passthrough(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/user/codespaces/secrets/:secret_name/repositories",
    alias: "codespaces/set-repositories-for-secret-for-authenticated-user",
    description: `Select the repositories that will use a user&#x27;s development environment secret.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          actions_set_selected_repositories_enabled_github_actions_organization_Body,
      },
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    alias: "codespaces/add-repository-for-secret-for-authenticated-user",
    description: `Adds a repository to the selected repositories for a user&#x27;s development environment secret.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/codespaces/secrets/:secret_name/repositories/:repository_id",
    alias: "codespaces/remove-repository-for-secret-for-authenticated-user",
    description: `Removes a repository from the selected repositories for a user&#x27;s development environment secret.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "secret_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 500,
        description: `Internal Error`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/codespaces/secrets/public-key",
    alias: "codespaces/get-public-key-for-authenticated-user",
    description: `Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.

The authenticated user must have Codespaces access to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    response: codespaces_user_public_key,
  },
  {
    method: "get",
    path: "/user/docker/conflicts",
    alias:
      "packages/list-docker-migration-conflicting-packages-for-authenticated-user",
    description: `Lists all packages that are owned by the authenticated user within the user&#x27;s namespace, and that encountered a conflict during a Docker migration.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    response: z.array(package),
  },
  {
    method: "patch",
    path: "/user/email/visibility",
    alias: "users/set-primary-email-visibility-for-authenticated-user",
    description: `Sets the visibility for your primary email addresses.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_set_primary_email_visibility_for_authenticated_user_Body,
      },
    ],
    response: z.array(email),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/emails",
    alias: "users/list-emails-for-authenticated-user",
    description: `Lists all of your email addresses, and specifies which one is visible
to the public.

OAuth app tokens and personal access tokens (classic) need the &#x60;user:email&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(email),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/emails",
    alias: "users/add-email-for-authenticated-user",
    description: `OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_add_email_for_authenticated_user_Body.optional(),
      },
    ],
    response: z.array(email),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/emails",
    alias: "users/delete-email-for-authenticated-user",
    description: `OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_add_email_for_authenticated_user_Body,
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/followers",
    alias: "users/list-followers-for-authenticated-user",
    description: `Lists the people following the authenticated user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/following",
    alias: "users/list-followed-by-authenticated-user",
    description: `Lists the people who the authenticated user follows.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/following/:username",
    alias: "users/check-person-is-followed-by-authenticated",
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `if the person is not followed by the authenticated user`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/user/following/:username",
    alias: "users/follow",
    description: `Note that you&#x27;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see &quot;[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;user:follow&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/following/:username",
    alias: "users/unfollow",
    description: `OAuth app tokens and personal access tokens (classic) need the &#x60;user:follow&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/gpg_keys",
    alias: "users/list-gpg-keys-for-authenticated-user",
    description: `Lists the current user&#x27;s GPG keys.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:gpg_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(gpg_key),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/gpg_keys",
    alias: "users/create-gpg-key-for-authenticated-user",
    description: `Adds a GPG key to the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:gpg_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_create_gpg_key_for_authenticated_user_Body,
      },
    ],
    response: gpg_key,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/gpg_keys/:gpg_key_id",
    alias: "users/get-gpg-key-for-authenticated-user",
    description: `View extended details for a single GPG key.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:gpg_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "gpg_key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: gpg_key,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/gpg_keys/:gpg_key_id",
    alias: "users/delete-gpg-key-for-authenticated-user",
    description: `Removes a GPG key from the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:gpg_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "gpg_key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/installations",
    alias: "apps/list-installations-for-authenticated-user",
    description: `Lists installations of your GitHub App that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

You can find the permissions for the installation under the &#x60;permissions&#x60; key.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        installations: z.array(installation),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/installations/:installation_id/repositories",
    alias: "apps/list-installation-repos-for-authenticated-user",
    description: `List repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access for an installation.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

The access the user has to each repository is included in the hash under the &#x60;permissions&#x60; key.`,
    requestFormat: "json",
    parameters: [
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z
      .object({
        total_count: z.number().int(),
        repository_selection: z.string().optional(),
        repositories: z.array(repository),
      })
      .passthrough(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/user/installations/:installation_id/repositories/:repository_id",
    alias: "apps/add-repo-to-installation-for-authenticated-user",
    description: `Add a single repository to an installation. The authenticated user must have admin access to the repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/installations/:installation_id/repositories/:repository_id",
    alias: "apps/remove-repo-from-installation-for-authenticated-user",
    description: `Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the &#x60;repository_selection&#x60; of &#x60;selected&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "installation_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "repository_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Returned when the application is installed on &#x60;all&#x60; repositories in the organization, or if this request would remove the last repository that the application has access to in the organization.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/user/interaction-limits",
    alias: "interactions/get-restrictions-for-authenticated-user",
    description: `Shows which type of GitHub user can interact with your public repositories and when the restriction expires.`,
    requestFormat: "json",
    response: z.union([interaction_limit_response, z.object({}).partial()]),
  },
  {
    method: "put",
    path: "/user/interaction-limits",
    alias: "interactions/set-restrictions-for-authenticated-user",
    description: `Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: interaction_limit,
      },
    ],
    response: interaction_limit_response,
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/interaction-limits",
    alias: "interactions/remove-restrictions-for-authenticated-user",
    description: `Removes any interaction restrictions from your public repositories.`,
    requestFormat: "json",
    response: z.void(),
  },
  {
    method: "get",
    path: "/user/issues",
    alias: "issues/list-for-authenticated-user",
    description: `List issues across owned and member repositories assigned to the authenticated user.

**Note**: GitHub&#x27;s REST API considers every pull request an issue, but not every issue is a pull request. For this
reason, &quot;Issues&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by
the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from &quot;Issues&quot; endpoints will be an _issue id_. To find out the pull
request id, use the &quot;[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)&quot; endpoint.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type.
- **&#x60;application/vnd.github.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;.
- **&#x60;application/vnd.github.html+json&#x60;**: Returns HTML rendered from the body&#x27;s markdown. Response will include &#x60;body_html&#x60;.
- **&#x60;application/vnd.github.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "filter",
        type: "Query",
        schema: z
          .enum([
            "assigned",
            "created",
            "mentioned",
            "subscribed",
            "repos",
            "all",
          ])
          .optional()
          .default("assigned"),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "labels",
        type: "Query",
        schema: z.string().optional(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "comments"])
          .optional()
          .default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(issue),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/keys",
    alias: "users/list-public-ssh-keys-for-authenticated-user",
    description: `Lists the public SSH keys for the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:public_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(key),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/keys",
    alias: "users/create-public-ssh-key-for-authenticated-user",
    description: `Adds a public SSH key to the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:gpg_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_create_public_ssh_key_for_authenticated_user_Body,
      },
    ],
    response: key,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/keys/:key_id",
    alias: "users/get-public-ssh-key-for-authenticated-user",
    description: `View extended details for a single public SSH key.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:public_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: key,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/keys/:key_id",
    alias: "users/delete-public-ssh-key-for-authenticated-user",
    description: `Removes a public SSH key from the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:public_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/marketplace_purchases",
    alias: "apps/list-subscriptions-for-authenticated-user",
    description: `Lists the active subscriptions for the authenticated user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(user_marketplace_purchase),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/marketplace_purchases/stubbed",
    alias: "apps/list-subscriptions-for-authenticated-user-stubbed",
    description: `Lists the active subscriptions for the authenticated user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(user_marketplace_purchase),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/memberships/orgs",
    alias: "orgs/list-memberships-for-authenticated-user",
    description: `Lists all of the authenticated user&#x27;s organization memberships.`,
    requestFormat: "json",
    parameters: [
      {
        name: "state",
        type: "Query",
        schema: z.enum(["active", "pending"]).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(org_membership),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/memberships/orgs/:org",
    alias: "orgs/get-membership-for-authenticated-user",
    description: `If the authenticated user is an active or pending member of the organization, this endpoint will return the user&#x27;s membership. If the authenticated user is not affiliated with the organization, a &#x60;404&#x60; is returned. This endpoint will return a &#x60;403&#x60; if the request is made by a GitHub App that is blocked by the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: org_membership,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/user/memberships/orgs/:org",
    alias: "orgs/update-membership-for-authenticated-user",
    description: `Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: orgs_update_membership_for_authenticated_user_Body,
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: org_membership,
    errors: [
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/migrations",
    alias: "migrations/list-for-authenticated-user",
    description: `Lists all migrations a user has started.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(migration),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/migrations",
    alias: "migrations/start-for-authenticated-user",
    description: `Initiates the generation of a user migration archive.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: migrations_start_for_authenticated_user_Body,
      },
    ],
    response: migration,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/migrations/:migration_id",
    alias: "migrations/get-status-for-authenticated-user",
    description: `Fetches a single user migration. The response includes the &#x60;state&#x60; of the migration, which can be one of the following values:

*   &#x60;pending&#x60; - the migration hasn&#x27;t started yet.
*   &#x60;exporting&#x60; - the migration is in progress.
*   &#x60;exported&#x60; - the migration finished successfully.
*   &#x60;failed&#x60; - the migration failed.

Once the migration has been &#x60;exported&#x60; you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).`,
    requestFormat: "json",
    parameters: [
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "exclude",
        type: "Query",
        schema: z.array(z.string()).optional(),
      },
    ],
    response: migration,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/migrations/:migration_id/archive",
    alias: "migrations/get-archive-for-authenticated-user",
    description: `Fetches the URL to download the migration archive as a &#x60;tar.gz&#x60; file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:

*   attachments
*   bases
*   commit\_comments
*   issue\_comments
*   issue\_events
*   issues
*   milestones
*   organizations
*   projects
*   protected\_branches
*   pull\_request\_reviews
*   pull\_requests
*   releases
*   repositories
*   review\_comments
*   schema
*   users

The archive will also contain an &#x60;attachments&#x60; directory that includes all attachment files uploaded to GitHub.com and a &#x60;repositories&#x60; directory that contains the repository&#x27;s Git data.`,
    requestFormat: "json",
    parameters: [
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 302,
        description: `Response`,
        schema: z.void(),
      },
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/migrations/:migration_id/archive",
    alias: "migrations/delete-archive-for-authenticated-user",
    description: `Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.`,
    requestFormat: "json",
    parameters: [
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/migrations/:migration_id/repos/:repo_name/lock",
    alias: "migrations/unlock-repo-for-authenticated-user",
    description: `Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of &#x60;404 Not Found&#x60; if the repository is not locked.`,
    requestFormat: "json",
    parameters: [
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "repo_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/migrations/:migration_id/repositories",
    alias: "migrations/list-repos-for-authenticated-user",
    description: `Lists all the repositories for this user migration.`,
    requestFormat: "json",
    parameters: [
      {
        name: "migration_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/orgs",
    alias: "orgs/list-for-authenticated-user",
    description: `List organizations for the authenticated user.

For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with &#x60;read:org&#x60; scope, you can publicize your organization membership with &#x60;user&#x60; scope, etc.). Therefore, this API requires at least &#x60;user&#x60; or &#x60;read:org&#x60; scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a &#x60;403 Forbidden&#x60; response.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(organization_simple),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/packages",
    alias: "packages/list-packages-for-authenticated-user",
    description: `Lists packages owned by the authenticated user within the user&#x27;s namespace.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Query",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "visibility",
        type: "Query",
        schema: z.enum(["public", "private", "internal"]).optional(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(package),
    errors: [
      {
        status: 400,
        description: `The value of &#x60;per_page&#x60; multiplied by &#x60;page&#x60; cannot be greater than 10000.`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/user/packages/:package_type/:package_name",
    alias: "packages/get-package-for-authenticated-user",
    description: `Gets a specific package for a package owned by the authenticated user.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: package,
  },
  {
    method: "delete",
    path: "/user/packages/:package_type/:package_name",
    alias: "packages/delete-package-for-authenticated-user",
    description: `Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, &#x60;repo&#x60; scope is also required. For the list these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/packages/:package_type/:package_name/restore",
    alias: "packages/restore-package-for-authenticated-user",
    description: `Restores a package owned by the authenticated user.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#x27;s namespace first.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "token",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/packages/:package_type/:package_name/versions",
    alias:
      "packages/get-all-package-versions-for-package-owned-by-authenticated-user",
    description: `Lists package versions for a package owned by the authenticated user.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["active", "deleted"]).optional().default("active"),
      },
    ],
    response: z.array(package_version),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/packages/:package_type/:package_name/versions/:package_version_id",
    alias: "packages/get-package-version-for-authenticated-user",
    description: `Gets a specific package version for a package owned by the authenticated user.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: package_version,
  },
  {
    method: "delete",
    path: "/user/packages/:package_type/:package_name/versions/:package_version_id",
    alias: "packages/delete-package-version-for-authenticated-user",
    description: `Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.

The authenticated user must have admin permissions in the organization to use this endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/packages/:package_type/:package_name/versions/:package_version_id/restore",
    alias: "packages/restore-package-version-for-authenticated-user",
    description: `Restores a package version owned by the authenticated user.

You can restore a deleted package version under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#x27;s namespace first.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/projects",
    alias: "projects/create-for-authenticated-user",
    description: `Creates a user project board. Returns a &#x60;410 Gone&#x60; status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: projects_create_for_authenticated_user_Body,
      },
    ],
    response: project,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error_simple,
      },
    ],
  },
  {
    method: "get",
    path: "/user/public_emails",
    alias: "users/list-public-emails-for-authenticated-user",
    description: `Lists your publicly visible email address, which you can set with the
[Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
endpoint.

OAuth app tokens and personal access tokens (classic) need the &#x60;user:email&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(email),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/repos",
    alias: "repos/list-for-authenticated-user",
    description: `Lists repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.`,
    requestFormat: "json",
    parameters: [
      {
        name: "visibility",
        type: "Query",
        schema: z.enum(["all", "public", "private"]).optional().default("all"),
      },
      {
        name: "affiliation",
        type: "Query",
        schema: z
          .string()
          .optional()
          .default("owner,collaborator,organization_member"),
      },
      {
        name: "type",
        type: "Query",
        schema: z
          .enum(["all", "owner", "public", "private", "member"])
          .optional()
          .default("all"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "pushed", "full_name"])
          .optional()
          .default("full_name"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "before",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
    ],
    response: z.array(repository),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/repos",
    alias: "repos/create-for-authenticated-user",
    description: `Creates a new repository for the authenticated user.

OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to create a public repository, and &#x60;repo&#x60; scope to create a private repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: repos_create_for_authenticated_user_Body,
      },
    ],
    response: full_repository,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 400,
        description: `Bad Request`,
        schema: basic_error,
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/repository_invitations",
    alias: "repos/list-invitations-for-authenticated-user",
    description: `When authenticating as a user, this endpoint will list all currently open repository invitations for that user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(repository_invitation),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "patch",
    path: "/user/repository_invitations/:invitation_id",
    alias: "repos/accept-invitation-for-authenticated-user",
    requestFormat: "json",
    parameters: [
      {
        name: "invitation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/repository_invitations/:invitation_id",
    alias: "repos/decline-invitation-for-authenticated-user",
    requestFormat: "json",
    parameters: [
      {
        name: "invitation_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 409,
        description: `Conflict`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/social_accounts",
    alias: "users/list-social-accounts-for-authenticated-user",
    description: `Lists all of your social accounts.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(social_account),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/social_accounts",
    alias: "users/add-social-account-for-authenticated-user",
    description: `Add one or more social accounts to the authenticated user&#x27;s profile.

OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_add_social_account_for_authenticated_user_Body,
      },
    ],
    response: z.array(social_account),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/social_accounts",
    alias: "users/delete-social-account-for-authenticated-user",
    description: `Deletes one or more social accounts from the authenticated user&#x27;s profile.

OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_add_social_account_for_authenticated_user_Body,
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/ssh_signing_keys",
    alias: "users/list-ssh-signing-keys-for-authenticated-user",
    description: `Lists the SSH signing keys for the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:ssh_signing_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(ssh_signing_key),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/user/ssh_signing_keys",
    alias: "users/create-ssh-signing-key-for-authenticated-user",
    description: `Creates an SSH signing key for the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;write:ssh_signing_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: users_create_ssh_signing_key_for_authenticated_user_Body,
      },
    ],
    response: ssh_signing_key,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/ssh_signing_keys/:ssh_signing_key_id",
    alias: "users/get-ssh-signing-key-for-authenticated-user",
    description: `Gets extended details for an SSH signing key.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:ssh_signing_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "ssh_signing_key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: ssh_signing_key,
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/ssh_signing_keys/:ssh_signing_key_id",
    alias: "users/delete-ssh-signing-key-for-authenticated-user",
    description: `Deletes an SSH signing key from the authenticated user&#x27;s GitHub account.

OAuth app tokens and personal access tokens (classic) need the &#x60;admin:ssh_signing_key&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "ssh_signing_key_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/starred",
    alias: "activity/list-repos-starred-by-authenticated-user",
    description: `Lists repositories the authenticated user has starred.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.star+json&#x60;**: Includes a timestamp of when the star was created.`,
    requestFormat: "json",
    parameters: [
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(repository),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/starred/:owner/:repo",
    alias: "activity/check-repo-is-starred-by-authenticated-user",
    description: `Whether the authenticated user has starred the repository.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Not Found if this repository is not starred by you`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "put",
    path: "/user/starred/:owner/:repo",
    alias: "activity/star-repo-for-authenticated-user",
    description: `Note that you&#x27;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see &quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "delete",
    path: "/user/starred/:owner/:repo",
    alias: "activity/unstar-repo-for-authenticated-user",
    description: `Unstar a repository that the authenticated user has previously starred.`,
    requestFormat: "json",
    parameters: [
      {
        name: "owner",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "repo",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/subscriptions",
    alias: "activity/list-watched-repos-for-authenticated-user",
    description: `Lists repositories the authenticated user is watching.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/user/teams",
    alias: "teams/list-for-authenticated-user",
    description: `List all of the teams across all of the organizations to which the authenticated
user belongs.

OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; scope to use this endpoint.

When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.`,
    requestFormat: "json",
    parameters: [
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(team_full),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users",
    alias: "users/list",
    description: `Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.

Note: Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.`,
    requestFormat: "json",
    parameters: [
      {
        name: "since",
        type: "Query",
        schema: z.number().int().optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(simple_user),
    errors: [
      {
        status: 304,
        description: `Not modified`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username",
    alias: "users/get-by-username",
    description: `Provides publicly available information about someone with a GitHub account.

The &#x60;email&#x60; key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for &#x60;email&#x60;, then it will have a value of &#x60;null&#x60;. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).

The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see &quot;[Emails API](https://docs.github.com/rest/users/emails)&quot;.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.union([private_user, public_user]),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/docker/conflicts",
    alias: "packages/list-docker-migration-conflicting-packages-for-user",
    description: `Lists all packages that are in a specific user&#x27;s namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(package),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/events",
    alias: "activity/list-events-for-authenticated-user",
    description: `If you are authenticated as the given user, you will see your private events. Otherwise, you&#x27;ll only see public events.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
  },
  {
    method: "get",
    path: "/users/:username/events/orgs/:org",
    alias: "activity/list-org-events-for-authenticated-user",
    description: `This is the user&#x27;s organization dashboard. You must be authenticated as the user to view this.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "org",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
  },
  {
    method: "get",
    path: "/users/:username/events/public",
    alias: "activity/list-public-events-for-user",
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
  },
  {
    method: "get",
    path: "/users/:username/followers",
    alias: "users/list-followers-for-user",
    description: `Lists the people following the specified user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
  },
  {
    method: "get",
    path: "/users/:username/following",
    alias: "users/list-following-for-user",
    description: `Lists the people who the specified user follows.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(simple_user),
  },
  {
    method: "get",
    path: "/users/:username/following/:target_user",
    alias: "users/check-following-for-user",
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "target_user",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 404,
        description: `if the user does not follow the target user`,
        schema: z.void(),
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/gists",
    alias: "gists/list-for-user",
    description: `Lists public gists for the specified user:`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "since",
        type: "Query",
        schema: z.string().datetime({ offset: true }).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(base_gist),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/gpg_keys",
    alias: "users/list-gpg-keys-for-user",
    description: `Lists the GPG keys for a user. This information is accessible by anyone.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(gpg_key),
  },
  {
    method: "get",
    path: "/users/:username/hovercard",
    alias: "users/get-context-for-user",
    description: `Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.

  The &#x60;subject_type&#x60; and &#x60;subject_id&#x60; parameters provide context for the person&#x27;s hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about &#x60;octocat&#x60; who owns the &#x60;Spoon-Knife&#x60; repository, you would use a &#x60;subject_type&#x60; value of &#x60;repository&#x60; and a &#x60;subject_id&#x60; value of &#x60;1300192&#x60; (the ID of the &#x60;Spoon-Knife&#x60; repository).

OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "subject_type",
        type: "Query",
        schema: z
          .enum(["organization", "repository", "issue", "pull_request"])
          .optional(),
      },
      {
        name: "subject_id",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: hovercard,
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/installation",
    alias: "apps/get-user-installation",
    description: `Enables an authenticated GitHub App to find the user’s installation information.

You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: installation,
  },
  {
    method: "get",
    path: "/users/:username/keys",
    alias: "users/list-public-keys-for-user",
    description: `Lists the _verified_ public SSH keys for a user. This is accessible by anyone.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(key_simple),
  },
  {
    method: "get",
    path: "/users/:username/orgs",
    alias: "orgs/list-for-user",
    description: `List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.

This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(organization_simple),
  },
  {
    method: "get",
    path: "/users/:username/packages",
    alias: "packages/list-packages-for-user",
    description: `Lists all packages in a user&#x27;s namespace for which the requesting user has access.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Query",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "visibility",
        type: "Query",
        schema: z.enum(["public", "private", "internal"]).optional(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
    ],
    response: z.array(package),
    errors: [
      {
        status: 400,
        description: `The value of &#x60;per_page&#x60; multiplied by &#x60;page&#x60; cannot be greater than 10000.`,
        schema: z.void(),
      },
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/packages/:package_type/:package_name",
    alias: "packages/get-package-for-user",
    description: `Gets a specific package metadata for a public package owned by a user.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: package,
  },
  {
    method: "delete",
    path: "/users/:username/packages/:package_type/:package_name",
    alias: "packages/delete-package-for-user",
    description: `Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.

If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/users/:username/packages/:package_type/:package_name/restore",
    alias: "packages/restore-package-for-user",
    description: `Restores an entire package for a user.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#x27;s namespace first.

If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "token",
        type: "Query",
        schema: z.string().optional(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/packages/:package_type/:package_name/versions",
    alias: "packages/get-all-package-versions-for-package-owned-by-user",
    description: `Lists package versions for a public package owned by a specified user.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.array(package_version),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/packages/:package_type/:package_name/versions/:package_version_id",
    alias: "packages/get-package-version-for-user",
    description: `Gets a specific package version for a public package owned by a specified user.

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: package_version,
  },
  {
    method: "delete",
    path: "/users/:username/packages/:package_type/:package_name/versions/:package_version_id",
    alias: "packages/delete-package-version-for-user",
    description: `Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.

If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "post",
    path: "/users/:username/packages/:package_type/:package_name/versions/:package_version_id/restore",
    alias: "packages/restore-package-version-for-user",
    description: `Restores a specific package version for a user.

You can restore a deleted package under the following conditions:
  - The package was deleted within the last 30 days.
  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#x27;s namespace first.

If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see &quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).&quot;`,
    requestFormat: "json",
    parameters: [
      {
        name: "package_type",
        type: "Path",
        schema: z.enum([
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container",
        ]),
      },
      {
        name: "package_name",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "package_version_id",
        type: "Path",
        schema: z.number().int(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 401,
        description: `Requires authentication`,
        schema: basic_error,
      },
      {
        status: 403,
        description: `Forbidden`,
        schema: basic_error,
      },
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/projects",
    alias: "projects/list-for-user",
    description: `Lists projects for a user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "state",
        type: "Query",
        schema: z.enum(["open", "closed", "all"]).optional().default("open"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(project),
    errors: [
      {
        status: 422,
        description: `Validation failed, or the endpoint has been spammed.`,
        schema: validation_error,
      },
    ],
  },
  {
    method: "get",
    path: "/users/:username/received_events",
    alias: "activity/list-received-events-for-user",
    description: `These are events that you&#x27;ve received by watching repositories and following users. If you are authenticated as the given user, you will see private events. Otherwise, you&#x27;ll only see public events.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
  },
  {
    method: "get",
    path: "/users/:username/received_events/public",
    alias: "activity/list-received-public-events-for-user",
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(event),
  },
  {
    method: "get",
    path: "/users/:username/repos",
    alias: "repos/list-for-user",
    description: `Lists public repositories for the specified user.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "type",
        type: "Query",
        schema: z.enum(["all", "owner", "member"]).optional().default("owner"),
      },
      {
        name: "sort",
        type: "Query",
        schema: z
          .enum(["created", "updated", "pushed", "full_name"])
          .optional()
          .default("full_name"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
  },
  {
    method: "get",
    path: "/users/:username/settings/billing/actions",
    alias: "billing/get-github-actions-billing-user",
    description: `Gets the summary of the free and paid GitHub Actions minutes used.

Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see &quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)&quot;.

OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: actions_billing_usage,
  },
  {
    method: "get",
    path: "/users/:username/settings/billing/packages",
    alias: "billing/get-github-packages-billing-user",
    description: `Gets the free and paid storage used for GitHub Packages in gigabytes.

Paid minutes only apply to packages stored for private repositories. For more information, see &quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: packages_billing_usage,
  },
  {
    method: "get",
    path: "/users/:username/settings/billing/shared-storage",
    alias: "billing/get-shared-storage-billing-user",
    description: `Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.

Paid minutes only apply to packages stored for private repositories. For more information, see &quot;[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).&quot;

OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: combined_billing_usage,
  },
  {
    method: "get",
    path: "/users/:username/social_accounts",
    alias: "users/list-social-accounts-for-user",
    description: `Lists social media accounts for a user. This endpoint is accessible by anyone.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(social_account),
  },
  {
    method: "get",
    path: "/users/:username/ssh_signing_keys",
    alias: "users/list-ssh-signing-keys-for-user",
    description: `Lists the SSH signing keys for a user. This operation is accessible by anyone.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(ssh_signing_key),
  },
  {
    method: "get",
    path: "/users/:username/starred",
    alias: "activity/list-repos-starred-by-user",
    description: `Lists repositories a user has starred.

This endpoint supports the following custom media types. For more information, see &quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).&quot;

- **&#x60;application/vnd.github.star+json&#x60;**: Includes a timestamp of when the star was created.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "sort",
        type: "Query",
        schema: z.enum(["created", "updated"]).optional().default("created"),
      },
      {
        name: "direction",
        type: "Query",
        schema: z.enum(["asc", "desc"]).optional().default("desc"),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.union([z.array(starred_repository), z.array(repository)]),
  },
  {
    method: "get",
    path: "/users/:username/subscriptions",
    alias: "activity/list-repos-watched-by-user",
    description: `Lists repositories a user is watching.`,
    requestFormat: "json",
    parameters: [
      {
        name: "username",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "per_page",
        type: "Query",
        schema: z.number().int().optional().default(30),
      },
      {
        name: "page",
        type: "Query",
        schema: z.number().int().optional().default(1),
      },
    ],
    response: z.array(minimal_repository),
  },
  {
    method: "get",
    path: "/versions",
    alias: "meta/get-all-versions",
    description: `Get all supported GitHub API versions.`,
    requestFormat: "json",
    response: z.array(z.string()),
    errors: [
      {
        status: 404,
        description: `Resource not found`,
        schema: basic_error,
      },
    ],
  },
  {
    method: "get",
    path: "/zen",
    alias: "meta/get-zen",
    description: `Get a random sentence from the Zen of GitHub`,
    requestFormat: "json",
    response: z.string(),
  },
])

export const api = new Zodios(endpoints)

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
  return new Zodios(baseUrl, endpoints, options)
}
